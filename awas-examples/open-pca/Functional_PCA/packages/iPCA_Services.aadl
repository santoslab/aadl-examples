--iPCA_Services.aadl

--contains uses of Platform services, customized for the PCA pump


package iPCA_Services
public
  with 
    CPAL, 
    Platform_Properties, 
    Services, 
    Base_Types;

flag renames data Base_Types::Boolean;


--device driver for the patient button
--this is used by abstract component iPCA_Peripherals::Patient_Button
--for its device driver
thread CPAL_Button_Driver extends CPAL::CPAL_Device_Driver
--properties will direct which Genode driver to use, and how the parameters are mapped	
end CPAL_Button_Driver;

thread CPAL_Drug_Reservoir_Driver extends CPAL::CPAL_Device_Driver
end CPAL_Drug_Reservoir_Driver;

thread CPAL_Upstream_Monitor_Driver extends CPAL::CPAL_Device_Driver
end CPAL_Upstream_Monitor_Driver;

--pump driver gets rate from rate controller and drives pins 8&9 of GPIO
--that connect to the stepper motor
thread CPAL_Mechanical_Pump_Driver extends CPAL::CPAL_Device_Driver
	features
	  step : in event port;
	  halt : in data port flag;
	  pin8 : out event data port flag;
	  pin9 : out event data port flag;
	properties
	  Dispatch_Protocol => Periodic;
	  Period => iPCA_Properties::Stepper_Period;
end CPAL_Mechanical_Pump_Driver;

thread implementation CPAL_Mechanical_Pump_Driver.i
  annex BLESS
  {**
  DO_NOT_PROVE
  invariant <<true>>  
  variables
    stat : integer := 0;  --count position of stator 
  states
    start : initial state;	
    run : complete state;
    done : final state;
  transitions
    go: start -[ ]-> run {};
    m : run -[on dispatch]-> run
      {
      if
        ( halt? )~> skip
      []  
        ( not halt? and (stat<=0) )~> 
          { pin8!(false) & pin9!(false) & stat:=1 }
      []  
        ( not halt? and (stat=1) )~> 
          { pin8!(false) & pin9!(true) & stat:=2 }
      []  
        ( not halt? and (stat=2) )~> 
          { pin8!(true) & pin9!(true) & stat:=3 }
      []  
        ( not halt? and (stat>=3) )~> 
          { pin8!(true) & pin9!(false) & stat:=0 }
      fi
      };
  **};
end CPAL_Mechanical_Pump_Driver.i;

thread CPAL_Downstream_Monitor_Driver extends CPAL::CPAL_Device_Driver
end CPAL_Downstream_Monitor_Driver;



thread iPCA_GPIO_Control extends CPAL::GPIO_Control
  properties
    Platform_Properties::GPIO_Input_Output => "UUUUUUUUOOUUIIII";  --pins 8&9 are output controlling stepper motor, pins 12-15 are inputs
    Platform_Properties::GPIO_Active_Level => "UUUUUUUUHHUUHHHH";  --active high (H), low (L), or unused (U)
    Platform_Properties::GPIO_Irq_Trigger =>  "UUUUUUUUUUUUBBBB";  --cause event when input changes
end iPCA_GPIO_Control;

process iPCA_CPAL_Server_Process extends CPAL::CPAL_Server_Process
end iPCA_CPAL_Server_Process;

process implementation iPCA_CPAL_Server_Process.i  extends CPAL::CPAL_Server_Process.i
	subcomponents	
	  gpio : refined to thread iPCA_GPIO_Control;
	  mediator : refined to thread iPCA_CPAL_Mediator.i;
	  cbd : thread CPAL_Button_Driver;
	  cdrd : thread CPAL_Drug_Reservoir_Driver;
	  cumd : thread CPAL_Upstream_Monitor_Driver;
	  cmpd : thread CPAL_Mechanical_Pump_Driver;
	  cdmd : thread CPAL_Downstream_Monitor_Driver;
	properties
		Classifier_Substitution_Rule => Type_Extension;	   
end iPCA_CPAL_Server_Process.i;

--this makes the abstract Platform_Services into a system
system iPCA_Platform_Services extends Services::Platform_Services
end iPCA_Platform_Services;

system implementation iPCA_Platform_Services.i extends Services::Platform_Services.i
--	subcomponents
--	  cpal : refined to process iPCA_CPAL_Server_Process.i;
	properties
		Classifier_Substitution_Rule => Type_Extension;	   
end iPCA_Platform_Services.i;

thread iPCA_CPAL_Mediator extends CPAL::CPAL_Mediator
end iPCA_CPAL_Mediator;

thread implementation iPCA_CPAL_Mediator.i
end iPCA_CPAL_Mediator.i;

end iPCA_Services;