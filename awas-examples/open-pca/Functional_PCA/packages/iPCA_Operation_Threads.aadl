--iPCA_Operation_Threads.aadl
--holds threads for PCA_Operation::Operation_Thread_Group.i


package iPCA_Operation_Threads
public
with 
  Physical_Types,
  EMV2,
  BLESS, 
  iPCA_Types, 
  Base_Types, 
--  iPCA_Security, 
--  iPCA_Feature_Groups,
  iPCA_Properties;

--detects when the maximum drug allowed per hour is reached
--contained by PCA_Operation::Operation_Thread_Group
thread Max_Drug_Per_Hour_Watcher
features
    Near_Max_Drug_Per_Hour: out event port --near maximum drug infused in any hour
      {BLESS::Assertion => "<<PATIENT_NEAR_MAX_DRUG_PER_HOUR()>>";};  
    over_max_drug_per_hour: out event port --over maximum drug infused in any hour
      {BLESS::Assertion => "<<PATIENT_OVER_MAX_DRUG_PER_HOUR()>>";};  
    infusion_flow_rate: in data port iPCA_Types::Flow_Rate  --rate to pump
      {BLESS::Assertion => "<<:=PUMP_RATE()>>";};
    max_drug_per_hour: in data port iPCA_Types::Drug_Volume  --prescribed maximum hourly limit on drug infusion
      {BLESS::Assertion => "<<:=MAX_DRUG_PER_HOUR>>";};  --maximum drug infused in any hour
  properties
    Thread_Properties::Dispatch_Protocol => Hybrid;  --both event and period dispatches
    Timing_Properties::Period => iPCA_Properties::Service_Thread_Period;  --update outputs every 1s    
end Max_Drug_Per_Hour_Watcher;

thread implementation Max_Drug_Per_Hour_Watcher.i
  annex EMV2 
  {**
  use types ErrorLibrary, iPCA_Error_Model;
  use behavior iPCA_Error_Model::FailStop; 	
  --same error propagations as alarm thread
  error propagations
    --
    Near_Max_Drug_Per_Hour : out propagation {EarlyServiceTermination};
    over_max_drug_per_hour : out propagation {EarlyServiceTermination};
    infusion_flow_rate : in propagation {ItemOmission,ItemCommission,ValueError};
    max_drug_per_hour : in propagation {ItemOmission,ItemCommission,ValueError};
  flows
      --
    near_source: error source Near_Max_Drug_Per_Hour{EarlyServiceTermination} when failed;
    over_source: error source over_max_drug_per_hour{EarlyServiceTermination} when failed;
      --value error becomes item comission
--    flow_near:  error path infusion_flow_rate{ItemCommission,ValueError}->Near_Max_Drug_Per_Hour{ItemCommission};
--    flow_near2:  error path infusion_flow_rate{ItemOmission}->Near_Max_Drug_Per_Hour(ItemOmission);
--    flow_over:  error path infusion_flow_rate{ItemCommission,ValueError}->over_max_drug_per_hour(ItemCommission);
--    flow_over2:  error path infusion_flow_rate{ItemOmission}->over_max_drug_per_hour(ItemOmission);
--    max_near:  error path max_drug_per_hour{ItemCommission,ValueError}->Near_Max_Drug_Per_Hour(ItemCommission);
--    max_near2:  error path max_drug_per_hour{ItemOmission}->Near_Max_Drug_Per_Hour(ItemOmission);
--    max_over:  error path max_drug_per_hour{ItemCommission,ValueError}->over_max_drug_per_hour(ItemCommission);
--    max_over2:  error path max_drug_per_hour{ItemOmission}->over_max_drug_per_hour(ItemOmission);
  end propagations;
  properties
    EMV2::OccurrenceDistribution => iPCA_Properties::ThreadFailureRate 
      applies to fail;	
  **};  --end of EMV2
end Max_Drug_Per_Hour_Watcher.i;

--rate control is the most important function, and the trickiest to specify
--contained by PCA_Operation::Operation_Thread_Group
thread Rate_Controller
features
  --pump control
    infusion_flow_rate: out data port iPCA_Types::Flow_Rate  --rate to pump
      {BLESS::Assertion => "<<:=PUMP_RATE()>>";};  
  --pump mode
    Pumping_Mode: out data port iPCA_Types::Pumping_Mode  
      ; 
  --status (what rate being pumped)
    system_status: out event data port iPCA_Types::Status_Type;
  --from boss thread
    begin_infusion: in event port  --the prescription approved for infusion
      {BLESS::Assertion => "<<Rx_APPROVED()>>";};  
    begin_priming: in event port;       --clinician pressed "prime" button 
    end_priming: in event port;         --clinician pressed "off" button  
    halt_infusion: in event port;   --clinician pressed "stop" button
  --from prescription checker
    square_bolus_rate: in data port iPCA_Types::Flow_Rate 
      {BLESS::Assertion => "<<:=SQUARE_BOLUS_RATE>>";};
    patient_bolus_rate: in data port iPCA_Types::Flow_Rate 
      {BLESS::Assertion => "<<:=PATIENT_BOLUS_RATE>>";};
    basal_rate: in data port iPCA_Types::Flow_Rate 
      {BLESS::Assertion => "<<:=BASAL_RATE>>";};
    vtbi: in data port iPCA_Types::Drug_Volume 
      {BLESS::Assertion => "<<:=vtbi>>";};
  --from safety
    hw_detected_failure: in event port;
    stop_pumping_completely: in event port;  --stop the pump
    pump_at_KVO_rate: in event port;  --keep vein open    
    alarm : in event data port iPCA_Types::Alarm_Type;  --alarm indication
    warning : in event data port iPCA_Types::Warning_Type;  --warning indication
  --actions
    patient_request_not_too_soon: in event port  --patient pressed bolus button not too soon
      {BLESS::Assertion => "<<PATIENT_REQUEST_NOT_TOO_SOON(now)>>";};  
  --reservoir
    door_open: in data port Base_Types::Boolean;
  --control panel
    pause_infusion: in event port;
    resume_infusion: in event port;
    cp_clinician_request_bolus: in event port;   --square bolus request from control panel
    cp_bolus_duration: in event data port Physical_Types::Minute; --set square bolus time from control panel
  --from Max_Drug_Per_Hour_Watcher
--    Near_Max_Drug_Per_Hour: in event port  --near maximum drug infused in any hour
--      {BLESS::Assertion => "<<PATIENT_NEAR_MAX_DRUG_PER_HOUR()>>";};  
    over_max_drug_per_hour: in event port  --over maximum drug infused in any hour
      {BLESS::Assertion => "<<PATIENT_OVER_MAX_DRUG_PER_HOUR()>>";};  
  --from Network:  danger detected-stop pumping
    network_stop_pump: in event port;
  properties
    Thread_Properties::Dispatch_Protocol => Aperiodic;
end Rate_Controller;

thread implementation Rate_Controller.i
annex BLESS
{**
assert
<<DURATIONS: : PB_DURATION() and SQUARE_DURATION()>>
invariant <<true>>
variables
  --time of last action
  tla :time := 0;
  la :   --last action
    enumeration (	
    	SafetyStopPump,		--safety architecture found a problem
    	StopButton,				--clinician pressed stop button
    	KVOcommand,				--alarm causes Keep-vein-open rate
    	KVOalarm,					--some alarms should pump at KVO rate
    	TooMuchJuice,     --exceeded max drug per hour, pump at KVO until prescription and patient are re-authenticated
    	PatientButton,		--patient requested drug
      ResumeSquareBolus,--infusion of vtbi finished, resume clinician-commanded bolus
      ResumeBasal,			--infusion of vtbi finished, resume basal-rate
      StartSquareBolus,	--begin clinician-commanded bolus
      SquareBolusDone,  --infusion of vtbi finished
      StartPriming,			--begin pump/line priming, pressed "prime" button
      EndPriming,    		--end priming, pressed "prime" button again, or time-out 
      StartButton				--start pumping at basal rate
    );
--CONSIDER ELIMINATING DIVISION BY ONLY PUTTING OUT PB_DURATION    
  pb_duration : time  --patient button duration = vtbi/patient_bolus_rate
    <<PB_DURATION : :pb_duration=(vtbi/patient_bolus_rate)>>;
  square_duration : time
    <<	SQUARE_DURATION : :square_duration=(vtbi/square_bolus_rate)>>;
states
  PowerOn : initial state;				--power-on
  WaitForRx : complete state;		--wait for valid prescription
  CheckPBR : state  --check patient_bolus_rate is positive
    <<Rx_APPROVED()>>;
  RxApproved : complete state   --prescription verified
    <<Rx_APPROVED() and DURATIONS()>>;
  Priming : complete state			--priming the pump, 1 ml in 6 sec
    <<(la=StartPriming) and (infusion_flow_rate@now = #iPCA_Properties::Prime_Rate) and DURATIONS()>>;
  WaitForStart : complete state   --wait for clinician to press 'start' button
    <<HALT() and (infusion_flow_rate@now=0) and DURATIONS()>>;
  PumpBasalRate : complete state  --pumping at basal rate
    <<((la=StartButton) or (la=ResumeBasal)) and (infusion_flow_rate@now=basal_rate@now) and DURATIONS()>>;
  PumpPatientButtonVTBI : complete state  --pumping patient-requested bolus
    <<(la=PatientButton) and DURATIONS() and (infusion_flow_rate@now=patient_bolus_rate)>>;
  PumpCCBRate : complete state    --pumping at clinician-commanded bolus rate
    <<((la=StartSquareBolus) or (la=ResumeSquareBolus)) and (infusion_flow_rate@now=square_bolus_rate@now) and DURATIONS()>>;
  ButtonDuringSquare : complete state  --patient button during square bolus
    <<(la=PatientButton) and DURATIONS() and (infusion_flow_rate@now=patient_bolus_rate)>>;
  PumpKVORate : complete state    --pumping at keep-vein-open rate
    <<((la=KVOcommand) or (la=KVOalarm) or (la=TooMuchJuice))  and DURATIONS()
      and (infusion_flow_rate@now=#iPCA_Properties::KVO_Rate)>>;
  PumpingSuspended : complete state  --pump halted
    <<((la=StopButton) or (la=SafetyStopPump)) and (infusion_flow_rate@now=0)>>;
  Crash : final state;		--abnormal termination
  Done : final state    --normal termination
    <<infusion_flow_rate@now=0>>;
transitions
--wait for valid prescription
  go : PowerOn-[ true ]->WaitForRx{};  
--prescription validated
  rxo : WaitForRx-[ on dispatch begin_infusion ]-> CheckPBR{};
  pbr0 : CheckPBR-[ (patient_bolus_rate<=0) or (square_bolus_rate<=0)  ]->Crash{};	--bad patient_bolus_rate
  pbrok : CheckPBR-[ (patient_bolus_rate>0) and (square_bolus_rate>0) ]->RxApproved
    {<<Rx_APPROVED() and (patient_bolus_rate>0) and (square_bolus_rate>0)>>  --likely will change from logic variable to predicate Rx_APPROVED()
    pb_duration := vtbi/patient_bolus_rate  --calculate patient bolus duration
    <<Rx_APPROVED() and PB_DURATION() and (square_bolus_rate>0)>>
    ;
    square_duration := vtbi/square_bolus_rate   --calculate square bolus duration
    <<Rx_APPROVED() and PB_DURATION() and SQUARE_DURATION()>>
    };  --end of pbrok
--clinician press 'prime' button
  rxpri : RxApproved-[ on dispatch begin_priming ]-> Priming  
    {
    la :=StartPriming
    	  <<begin_priming@now and Rx_APPROVED() and (la = StartPriming) and DURATIONS()>>
    ;	
    infusion_flow_rate!(#iPCA_Properties::Prime_Rate)  --infuse at prime rate
    	  <<(la = StartPriming) and Rx_APPROVED() and DURATIONS() and
    	    (infusion_flow_rate@now=#iPCA_Properties::Prime_Rate)>>   
    };
--priming done, wait for start
  prd: Priming-[ on dispatch end_priming or timeout (begin_priming) #iPCA_Properties::Prime_Time sec]-> WaitForStart  
    {
    la:=EndPriming
      <<HALT() and DURATIONS()>>  --and begin_priming timed out
    ;
    infusion_flow_rate!(0)   --stop priming flow
      <<HALT() and (infusion_flow_rate@now=0) and DURATIONS()>>
    };
--prime again
  pri: WaitForStart-[ on dispatch begin_priming ]-> Priming  
    {
    la:=StartPriming
    	  <<begin_priming@now and DURATIONS() and PRIME_RATE()>>
    ;	
    infusion_flow_rate!(#iPCA_Properties::Prime_Rate)  --infuse at prime rate
    	  <<PRIME_RATE() and DURATIONS() and
    	    (infusion_flow_rate@now=#iPCA_Properties::Prime_Rate)>>   
   };
--clinician press 'start' button without priming    
--  swp: RxApproved-[ on dispatch begin_infusion ]-> PumpBasalRate  
--    {
--    la:=StartButton
--      <<(la=StartButton) and begin_infusion@now>>    
--    ;
--    infusion_flow_rate!(basal_rate)   --infuse at basal rate
--      <<(la=StartButton) and (infusion_flow_rate@now=basal_rate@now)>>
--    };
--clinician press 'start' button after priming    
  sap: WaitForStart-[ on dispatch begin_infusion ]-> PumpBasalRate  --start after priming
    {
    la:=StartButton
      <<(la=StartButton) and (Rx_APPROVED())@now  and DURATIONS()>>    
    ;
    infusion_flow_rate!(basal_rate)   --infuse at basal rate
      <<(la=StartButton) and (infusion_flow_rate@now=basal_rate@now) and DURATIONS()>>
    };
--patient_button_request 
  patient_button: 
  PumpBasalRate -[ on dispatch patient_request_not_too_soon ]-> PumpPatientButtonVTBI
    {
    la := PatientButton 
      <<(la=PatientButton) and patient_button_request@now and DURATIONS()>>    
    ;
    infusion_flow_rate!(patient_bolus_rate)   --infuse at patient button rate
      <<(la=PatientButton) and DURATIONS()
        and (infusion_flow_rate@now=patient_bolus_rate)>>    	
    };  --end of patient_button
--vtbi delivered
  vtbi_delivered: 
  PumpPatientButtonVTBI -[ on dispatch timeout (patient_request_not_too_soon) pb_duration ms ]-> PumpBasalRate
    {
    la:=ResumeBasal
    ;
    <<(la=ResumeBasal) and DURATIONS()>>  --and timeout of patient button duration
    infusion_flow_rate!(basal_rate)   --infuse at basal rate
      <<(la=ResumeBasal) and (infusion_flow_rate@now=basal_rate@now) and DURATIONS()>>   
    };  --end of vtbi_delivered
--Clinician-requested (square) bolus requested
  square_bolus:
  PumpBasalRate -[ on dispatch cp_clinician_request_bolus ]-> PumpCCBRate
    {
    	la := StartSquareBolus
    ;
      <<(la=StartSquareBolus) and DURATIONS()>>
    infusion_flow_rate!(square_bolus_rate)   --infuse at patient button rate
      <<(la=StartSquareBolus) and DURATIONS()
        and (infusion_flow_rate@now=square_bolus_rate)>>    	
    	};
--End clinician-requested bolus
  square_delivered: 
  PumpCCBRate -[ on dispatch timeout (cp_clinician_request_bolus) square_duration ms ]-> PumpBasalRate
    {
    la:=ResumeBasal
    ;
    << (la=ResumeBasal)  and DURATIONS()>>  --and timeout of patient button duration
    infusion_flow_rate!(basal_rate)   --infuse at basal rate
      <<(la=ResumeBasal) and (infusion_flow_rate@now=basal_rate@now) and DURATIONS()>>   
    };  --end of square_delivered
--Patient button during square bolus
  pb_square:
  PumpCCBRate -[ on dispatch patient_request_not_too_soon ]-> ButtonDuringSquare
    {
    la := PatientButton 
      <<(la=PatientButton) and PATIENT_REQUEST_NOT_TOO_SOON(now) and DURATIONS()>>    
    ;
    infusion_flow_rate!(patient_bolus_rate)   --infuse at patient button rate
      <<(la=PatientButton) and DURATIONS()
        and (infusion_flow_rate@now=patient_bolus_rate)>>    	
    };  --end of pb_square
--Resume Square Bolus after vtbi
  pb_square_delivered:
  ButtonDuringSquare -[ on dispatch timeout (patient_request_not_too_soon) pb_duration ms ]-> PumpCCBRate
    {
    la:=ResumeSquareBolus
    ;
    <<(la=ResumeSquareBolus) and DURATIONS()>>  --and timeout of patient button duration
    infusion_flow_rate!(square_bolus_rate)   --infuse square bolus rate
      <<(la=ResumeSquareBolus) and (infusion_flow_rate@now=square_bolus_rate@now) and DURATIONS()>>   
    };  --end of pb_square_delivered
--stop pumping completely due to alarm
  alarm_halt:  
  ButtonDuringSquare,PumpCCBRate,PumpBasalRate,PumpPatientButtonVTBI 
       -[ on dispatch hw_detected_failure or stop_pumping_completely ]-> PumpingSuspended
    {
    la:=SafetyStopPump
    ;
    <<(la=SafetyStopPump)  and DURATIONS()>>  
    infusion_flow_rate!(0)   --halt pumping
      <<(la=SafetyStopPump) and (infusion_flow_rate@now=0) and DURATIONS()>>   
    };  --end of alarm_halt
--Pump at KVO rate from alarm or warning
  alarm_kvo:  
ButtonDuringSquare,PumpCCBRate,PumpBasalRate,PumpPatientButtonVTBI -[ on dispatch pump_at_KVO_rate]-> PumpKVORate
    {
    la:=KVOalarm
    ;
    <<(la=KVOalarm) and DURATIONS()>>  
    infusion_flow_rate!(#iPCA_Properties::KVO_Rate)   --infuse KVO rate
      <<(la=KVOalarm) and (infusion_flow_rate@now=#iPCA_Properties::KVO_Rate) and DURATIONS()>>   
    };  --end of alarm_kvo
    
**};
end Rate_Controller.i;


--checks prescriptions for hard and soft limits
--contained by PCA_Operation::Operation_Thread_Group
thread Prescription_Checker
  features
    check_prescription: in event port;  --from boss thread
    prescription: in data port iPCA_Types::Prescription;  --prescription read from bar code or RFID
    prescription_okay: out event port 
      {BLESS::Assertion => "<<Rx_APPROVED()>>";};  --the prescription approved for infusion
  --to rate controller
    vtbi: out data port iPCA_Types::Drug_Volume  --volume to be infused
      {BLESS::Assertion => "<<:=vtbi>>";};
    square_bolus_rate: out data port iPCA_Types::Flow_Rate 
      {BLESS::Assertion => "<<:=SQUARE_BOLUS_RATE>>";};  --clinician-commanded bolus rate
    patient_bolus_rate: out data port iPCA_Types::Flow_Rate 
      {BLESS::Assertion => "<<:=PATIENT_BOLUS_RATE>>";};  --patient-requested bolus rate
    basal_rate: out data port iPCA_Types::Flow_Rate   --basal flow rate
      {BLESS::Assertion => "<<:=BASAL_RATE>>";};
  --to patient bolus checker
    minimum_time_between_bolus: out data port Physical_Types::Minute
      {BLESS::Assertion => "<<:=MINIMUM_TIME_BETWEEN_BOLUS>>";};
  --to max drug per hour checker
    max_drug_per_hour: out data port iPCA_Types::Drug_Volume 
      {BLESS::Assertion => "<<:=MAX_DRUG_PER_HOUR>>";};  --maximum drug infused in any hour
--    CP_Max_Drug_Per_Hour_Exceeded: in event port;   --display that maximum drug per hour would be exceeded by more drug 
  --drug library
    get_drug_record: out event data port iPCA_Types::Drug_Code 
      {BLESS::Assertion => "<<:=myRx.Code >>";};  --request drug record from library
    the_drug_record: in event data port iPCA_Types::Drug_Record 
      {BLESS::Assertion => "<<:=DRUG_LIBRARY[myRx.Code] >>";}; --returned drug record, may be null value if drug code not in library
    drug_not_in_library : in event port  --no drug found having the given drug code
      {BLESS::Assertion=>"<<NDF(iPCA_Properties::Drug_Library_Size)>>";};  
  --control panel
--    Rx_Mismatch: out event port  --mismatch between prescription and drug library
--      {BLESS::Assertion => "<<not Rx_VALID()>>";};  
    confirm_soft_limit_exception: in event port  --clinician approved soft limit
      {BLESS::Assertion => "<<CLINICIAN_APPROVED_SOFT_LIMIT>>";};  --clinician confirmed prescription
    reject_soft_limit_exception: in event port  --clinician disapprove soft limit
      {BLESS::Assertion => "<<not CLINICIAN_APPROVED_SOFT_LIMIT>>";};   --clinician rejected prescription
    soft_limit_warning: out event port   --prescription exceeds soft limit in drug library
      {BLESS::Assertion => "<<SOFT_LIMIT_VIOLATED()>>";};  
--    Rx_Confirmed: out event port;  --prescription matches, limits acceptable
  --to safety
    hard_limit_violated: out event port  --prescription exceeds hard limit in drug library
      {BLESS::Assertion => "<<HARD_LIMIT_VIOLATED()>>";};  
--    Hard_Limit_Okay: out event port  --prescription exceeds hard limit in drug library
--      {BLESS::Assertion => "<<not HARD_LIMIT_VIOLATED()>>";};  
  properties
    Thread_Properties::Dispatch_Protocol=>Aperiodic;  
end Prescription_Checker;

thread implementation Prescription_Checker.i
  annex EMV2 
  {**
  use types ErrorLibrary, iPCA_Error_Model;
  use behavior iPCA_Error_Model::FailStop; 	
  error propagations
    prescription: in propagation {ItemOmission, ItemCommission, ValueError};
    prescription_okay : out propagation {EarlyServiceTermination, ItemCommission};
    vtbi: out propagation {ItemOmission,ItemCommission, ValueError};
    square_bolus_rate: out propagation {ValueError};
    max_drug_per_hour: out propagation {ValueError};
    basal_rate: out propagation {ValueError};
--    CP_Max_Drug_Per_Hour_Exceeded : in propagation {ItemOmission,ItemCommission};
    get_drug_record : out propagation {ItemOmission, ItemCommission};
    the_drug_record: in propagation {EarlyServiceTermination, ValueError};
    confirm_soft_limit_exception : in propagation {ItemOmission, ItemCommission};
    reject_soft_limit_exception : in propagation {ItemOmission, ItemCommission};
    soft_limit_warning : out propagation {ItemOmission, ItemCommission};
    hard_limit_violated : out propagation {ItemOmission, ItemCommission};

  flows
      --fail stop
    fail_stop: error source prescription_okay{EarlyServiceTermination} when failed;
 end propagations;
  properties
    EMV2::OccurrenceDistribution => iPCA_Properties::ThreadFailureRate 
      applies to fail;	
  **};  --end of EMV2
annex BLESS 
{**
  assert
    <<Rx_APPROVED: :Rx_VALID() and   --valid prescritption
      not HARD_LIMIT_VIOLATED() and  --no hard limit violations
      (CLINICIAN_APPROVED_SOFT_LIMIT or not SOFT_LIMIT_VIOLATED())>>  --either no soft limits, or clinician approved
    <<Rx_VALID: :  (myRx.Code=myDrugRecord.Code) and  --drug code matches
    	(myRx.Drug_Name=myDrugRecord.Name) and  --same name of drug
    	(myRx.Concentration=myDrugRecord.Concentration) >>  --same concentration   	
    <<HARD_LIMIT_VIOLATED: : not
    	((myRx.VTBI >= myDrugRecord.Vtbi_Lower_Hard) and --vtbi above lower hard limit
    	(myRx.VTBI <= myDrugRecord.Vtbi_Upper_Hard) and --vtbi below lower hard limit
    	(myRx.Basal_Flow_Rate >= myDrugRecord.Basal_Rate_Lower_Hard) and --basal rate above lower hard limit
    	(myRx.Basal_Flow_Rate <= myDrugRecord.Basal_Rate_Upper_Hard))>> --basal rate below upper hard limit	
    <<SOFT_LIMIT_VIOLATED: : not
    	((myRx.VTBI >= myDrugRecord.Vtbi_Lower_Soft) and --vtbi above lower soft limit
    	(myRx.VTBI <= myDrugRecord.Vtbi_Upper_Soft) and --vtbi below lower soft limit
    	(myRx.Basal_Flow_Rate >= myDrugRecord.Basal_Rate_Lower_Soft) and --basal rate above lower soft limit
    	(myRx.Basal_Flow_Rate <= myDrugRecord.Basal_Rate_Upper_Soft))>> --basal rate below upper soft limit	
    <<AXIOM_Rx_IS_INTENDED_PRESCRIPTION: :
      (vtbi=myRx.VTBI) and
      (SQUARE_BOLUS_RATE=myDrugRecord.Square_Bolus_Rate_Typical) and
      (PATIENT_BOLUS_RATE=myRx.Patient_Bolus_Rate) and
      (MAX_DRUG_PER_HOUR=myRx.Max_Drug_Per_Hour) and
      (BASAL_RATE=myRx.Basal_Rate)
      >>
  invariant <<true>>
  variables
    myRx : iPCA_Types::Prescription;  --holds prescription
    myDrugRecord :  iPCA_Types::Drug_Record;  --holds drug record
  states
	Start: initial state;  --power on
	WaitForRx : complete state;  --waiting for prescription
	GettingDrugRecord : complete state;  --ask drug library for drug record
	CheckRx : state;  --check prescription
	RxValid : state   --the prescription matches library, now check limits
	  <<Rx_VALID()>>;  
	HardLimitsMet : state   --the prescription satisfies hard limits
	  <<Rx_VALID() and not HARD_LIMIT_VIOLATED() and AXIOM_Rx_IS_INTENDED_PRESCRIPTION()>>;
	OutputRx : complete state   --putting out good prescription
	  <<Rx_APPROVED()>>;
	SoftLimit : complete state  --soft limit exceeded, get clinician confirmations
	  <<SOFT_LIMIT_VIOLATED() and Rx_VALID() and 
	    not HARD_LIMIT_VIOLATED() and AXIOM_Rx_IS_INTENDED_PRESCRIPTION()>>;
	BadRx : complete state  --bad Rx waiting for power down (stop)
	  <<NDF(iPCA_Properties::Drug_Library_Size) or --no drug found
	    not Rx_VALID() or HARD_LIMIT_VIOLATED() or (SOFT_LIMIT_VIOLATED() and 
	  	not CLINICIAN_APPROVED_SOFT_LIMIT)>>;
	Done: final state;
  transitions
    go: Start -[ ]-> WaitForRx{};
    getrx : WaitForRx -[ on dispatch check_prescription ]-> GettingDrugRecord
      {
      Prescription?(myRx) ; --get prescription from port
      get_drug_record!(myRx.Code)  --ask drug library for drug record
      };  --end of getrx
    getdr: GettingDrugRecord -[ on dispatch the_drug_record ]-> CheckRx
      {
      the_drug_record?(myDrugRecord)
        <<myDrugRecord = DRUG_LIBRARY[myRx.Code]>>
      };
    dnil: GettingDrugRecord -[ on dispatch drug_not_in_library ]-> BadRx{};
    check: CheckRx -[  --check prescription against library
    	(myRx.Code=myDrugRecord.Code) and  --drug code matches
    	(myRx.Drug_Name=myDrugRecord.Name) and  --same name of drug
    	(myRx.Concentration=myDrugRecord.Concentration)  --same concentration   	
      ]-> RxValid{};
    badrx: CheckRx -[ not --Rx/library mismatch
    	((myRx.Code=myDrugRecord.Code) and  --drug code matches
    	(myRx.Drug_Name=myDrugRecord.Name) and  --same name of drug
    	(myRx.Concentration=myDrugRecord.Concentration))  --same concentration   	
      ]-> BadRx{};
--      ]-> BadRx{Rx_Mismatch!};
    okhard : RxValid -[
    	(myRx.VTBI >= myDrugRecord.Vtbi_Lower_Hard) and --vtbi above lower hard limit
    	(myRx.VTBI <= myDrugRecord.Vtbi_Upper_Hard) and --vtbi below lower hard limit
    	(myRx.Basal_Flow_Rate >= myDrugRecord.Basal_Rate_Lower_Hard) and --basal rate above lower hard limit
    	(myRx.Basal_Flow_Rate <= myDrugRecord.Basal_Rate_Upper_Hard) --basal rate below lower hard limit	
      ]-> HardLimitsMet{};
--      ]-> HardLimitsMet{Hard_Limit_Okay!};
    badhard : RxValid -[ not
    	((myRx.VTBI >= myDrugRecord.Vtbi_Lower_Hard) and --vtbi above lower hard limit
    	(myRx.VTBI <= myDrugRecord.Vtbi_Upper_Hard) and --vtbi below lower hard limit
    	(myRx.Basal_Flow_Rate >= myDrugRecord.Basal_Rate_Lower_Hard) and --basal rate above lower hard limit
    	(myRx.Basal_Flow_Rate <= myDrugRecord.Basal_Rate_Upper_Hard)) --basal rate below lower hard limit	
      ]-> BadRx{hard_limit_violated!};
    oksoft: HardLimitsMet-[
    	(myRx.VTBI >= myDrugRecord.Vtbi_Lower_Soft) and --vtbi above lower soft limit
    	(myRx.VTBI <= myDrugRecord.Vtbi_Upper_Soft) and --vtbi below lower soft limit
    	(myRx.Basal_Flow_Rate >= myDrugRecord.Basal_Rate_Lower_Soft) and --basal rate above lower soft limit
    	(myRx.Basal_Flow_Rate <= myDrugRecord.Basal_Rate_Upper_Soft) --basal rate below lower soft limit	
      ]->OutputRx{  --prescription okay, may begin infusion, put out Rx parameters
      	prescription_okay! &
      	vtbi!(myRx.VTBI) &
      	square_bolus_rate!(myDrugRecord.Square_Bolus_Rate_Typical) &
      	max_drug_per_hour!(myRx.Max_Drug_Per_Hour) &
      	patient_bolus_rate!(myRx.Patient_Bolus_Rate) &
      	basal_rate!(myRx.Basal_Rate)
        };  --end of oksoft
    badsoft: HardLimitsMet-[ not
    	((myRx.VTBI >= myDrugRecord.Vtbi_Lower_Soft) and --vtbi above lower soft limit
    	(myRx.VTBI <= myDrugRecord.Vtbi_Upper_Soft) and --vtbi below lower soft limit
    	(myRx.Basal_Flow_Rate >= myDrugRecord.Basal_Rate_Lower_Soft) and --basal rate above lower soft limit
    	(myRx.Basal_Flow_Rate <= myDrugRecord.Basal_Rate_Upper_Soft)) --basal rate below lower soft limit	   	
      ]->SoftLimit{soft_limit_warning!};
    yessoft: SoftLimit -[on dispatch confirm_soft_limit_exception]->OutputRx{  --soft limit violation approved, may begin infusion, put out Rx parameters
      	prescription_okay! &
      	vtbi!(myRx.VTBI) &
      	square_bolus_rate!(myDrugRecord.Square_Bolus_Rate_Typical) &
      	max_drug_per_hour!(myRx.Max_Drug_Per_Hour) &
      	patient_bolus_rate!(myRx.Patient_Bolus_Rate) &
      	basal_rate!(myRx.Basal_Rate)
        };
    nosoft: SoftLimit -[on dispatch reject_soft_limit_exception]->WaitForRx{};  --rejected, wait for new Rx
    quit: WaitForRx,GettingDrugRecord,OutputRx,SoftLimit,BadRx
      -[ on dispatch stop ]-> Done{}; --cancel Rx when stopped
**};  
end Prescription_Checker.i;


--R4.2.0(3): minimum time between patient-requested bolus
thread Patient_Bolus_Checker
  features
    minimum_time_between_bolus: in data port Physical_Types::Minute
      {BLESS::Assertion => "<<:=MINIMUM_TIME_BETWEEN_BOLUS>>";};
    patient_button_request: in event port;
    patient_request_not_too_soon: out event port
      {BLESS::Assertion => "<<PATIENT_REQUEST_NOT_TOO_SOON(now)>>";};
    patient_request_too_soon: out event port
      {BLESS::Assertion => "<<PATIENT_REQUEST_TOO_SOON(now)>>";};
    stop: in event port;  --use lower case 'stop'
  properties
    Dispatch_Protocol => Sporadic;
	annex EMV2 {**
		use types iPCA_Error_Model, ErrorLibrary;
		error propagations
			patient_button_request: in propagation {ButtonError, EarlyServiceTermination};
		flows
--Patient_Bolus_Checker suppresses all patient button errors
			pbc: error sink patient_button_request {ButtonError, EarlyServiceTermination};
		end propagations;
	**};
end Patient_Bolus_Checker;

thread implementation Patient_Bolus_Checker.i
  annex BLESS
  {**
  invariant <<LPB()>>
  variables
    last_patient_bolus: time:=0
      <<LPB: :patient_request_not_too_soon@last_patient_bolus and 
        not (exists t:time in last_patient_bolus,,now that patient_request_not_too_soon@t)>>;
  states
    start: initial state
      <<last_patient_bolus=0 and now=0 and LPB()>>;	
    run: complete state
      <<LPB()>>;
    check_last_bolus_time: state
      <<LPB() and patient_button_request@now>>;
  	done: final state;
 transitions
   go: start-[ ]-> run{};
   button: run -[on dispatch patient_button_request]-> check_last_bolus_time{};
   nottoosoon: check_last_bolus_time -[(now-minimum_time_between_bolus?) > last_patient_bolus]-> run
     {  <<LPB() and patient_button_request@now and
     	  (now-MINIMUM_TIME_BETWEEN_BOLUS@now) > last_patient_bolus>>
     patient_request_not_too_soon! 
      ; <<patient_request_not_too_soon@now>>
      last_patient_bolus:=now
     <<patient_request_not_too_soon@now and last_patient_bolus=now>>};
   toosoon: check_last_bolus_time -[(now-minimum_time_between_bolus?) <= last_patient_bolus]-> run
     {patient_request_too_soon!};
   quit: run-[on dispatch stop]->done{};  
  **}; 
end Patient_Bolus_Checker.i;



end iPCA_Operation_Threads;