--PCA_Context.aadl

--PCA pump hooked up to abstract components representing actors, patient, clinician, etc.

package iPCA_Context
public
  with 
  -- Base_Types,       --AADL Data Modeling Annex
    EMV2,  --AADL error model annex, version 2
    --Timing_Properties,   --predeclared AADL property sets
   -- Physical_Properties, 
    Buses,
    Physical_Types, --types and properties to mimic physical entities as data
    BLESS,				 --package defining Assertion
    FG,   --platform feature groups
--    iPCA_Feature_Groups,  --PCA-specific feature groups
    --BLESS_Types,         --package holding equivalents to BLESS built-in types express using Data Modeling Annex
    --PCA_Alarm,		--package holing process and thread for PCA alarm behavior
    --PCA_Assertions,  --package holding Assertion annex library
    --PCA_Safety,					--package holding safety architecture
    --PCA_Security,				--package holding security architecture
    --PCA_Drug_Library,   --package holding drug library
    --PCA_Mechanical,			--package holding mechanical components: pump, flow monitor, reservoir
    --PCA_Power,          --package holding battery and power supply
    iPCA_Properties,   --property set holding most numerical values used in the model
    iPCA_Medical_Device  --package holding PCA pump system implementation
    --PCA_Control_Panel,  --package holding control panel
    --PCA_Operation,      --package holding normal operation logic
 --   PCA_System,        --package holding PCA pump system
 --   iPCA_Types--package holding types used only by this PCA pump model
    ;
 
  -- connect the pump with the actors in its environment, patient, clinician, technician, and ICE manager
system Open_PCA_Context
end Open_PCA_Context;

  --instantiate this to get everything
system implementation Open_PCA_Context.i
	subcomponents
		--the PCA pump
		pca_pump: system iPCA_Medical_Device::PCA_Pump_System.i;
		--our patient
		patient: abstract Patient.imp;
		--attending nurse
		nurse: abstract Clinician.imp;
		--hospital technician software
--			tech_sw: process Tech_Software.imp;
		-- network
		network: bus Buses::CAT5;
		--network supervisor
		supervisor: processor Network_Supervisor;
		--maintenance interface, USB dongle connected to a laptop
		maintenance_controller: processor Maintenance_Processor;
		--cable to jack
		cable: bus Buses::Maintenance_Bus;
		dev1: system Other_Medical_Device.imp;
		dev2: system Other_Medical_Device.imp;
		dev3: system Other_Medical_Device.imp;
	connections
		--drug to patient
--		infusion_set: port pca_pump.drug_outlet -> patient.infused_drug;
		infusion_set: feature pca_pump.act.drug_outlet -> patient.infused_drug;
		--patient button
--		patient_button: port patient.button_press -> pca_pump.button_press;
		patient_button: feature patient.button_press -> pca_pump.sense.patient_button_press;
		--nurse hears sound
--		noise: port pca_pump.noise -> nurse.Sound;
		noise: feature pca_pump.act.ui_sound -> nurse.sound;
		--nurse sees image
--		visual: port pca_pump.light_to_eye -> nurse.light_to_eye;
		visual: feature pca_pump.act.ui_image -> nurse.light_to_eye;
		--nurse touches control panel
--		touch: port nurse.finger_press -> pca_pump.finger_press;
		touch: feature nurse.finger_press -> pca_pump.sense.ui_touch;
		--connect supervisor to network
		sbus: bus access network -> supervisor.to_devices;
		--connect pump to network
		pbus: bus access network -> pca_pump.external_network;
		--connect pump to maintenance cable
		pcbl: bus access cable <-> pca_pump.jack;
		--connect maintenance processor to cable 
		mcbl: bus access cable <-> maintenance_controller.jack;
		--connect control app signals to PCA pump
--    sgnl: feature group control_app.pca_signals <-> pca_pump.app_signals
--     ;--{Actual_Connection_Binding=>(reference(network));};  --flow through network
		--connect tech software to pca pump
--    tech: feature group tech_sw.to_pca <-> pca_pump.to_tech
--      ;--{Actual_Connection_Binding=>(reference(cable));};  --flow through cable to jack
		--connect other devices to network
		d1bus: bus access network -> dev1.to_network;
		d2bus: bus access network -> dev2.to_network;
		d3bus: bus access network -> dev3.to_network;
--		properties
--			Actual_Processor_Binding => (reference (dongle)) applies to tech_sw;
		--control app runs on supervisor
		--   Actual_Processor_Binding=>(reference(supervisor)) applies to control_app;
  annex EMV2
  {**
  use types iPCA_Error_Model;
  use behavior iPCA_Error_Model::PatientHealth;
  composite error behavior
    states
    [patient.in_pain]-> in_pain;
    [patient.may_die]-> may_die;
  end composite;
  **};  --end of EMV2
end Open_PCA_Context.i;


abstract Patient
  features
  --drug infused into patient
    infused_drug : in data port Physical_Types::Fluid_Flow
      {BLESS::Assertion=>"<<:=INFUSION_RATE>>";};  --infusion rate into patient is value of infused_drug port
    button_press: out event port;  --physically depressing the button
end Patient;

abstract implementation Patient.imp
--drug flow errors may impair function or harm patient
--third-parties may press the button for the patient
  annex EMV2
  {**
  use types iPCA_Error_Model;
  use behavior iPCA_Error_Model::PatientHealth;
  error propagations
  --incorrect drug flow, may harm patient
    infused_drug: in propagation {DrugFlowError, DrugKindError};
  --patient button pressed by someone other than patient
    button_press: out propagation {ButtonError};  
  flows
  --third party presses patient button
    tpp: error source button_press{ButtonError};
--    ts: error source button_press{TooSoonPress};
  end propagations;
  component error behavior
    transitions
      healthy -[infused_drug{DrugStopped,DrugUnderInfusion}]-> in_pain;
      healthy  -[infused_drug{DrugKindError,DrugOverInfusion}]-> may_die;
  end component;
  properties
  --how often does a third-party press the button for the patient?
    EMV2::OccurrenceDistribution => iPCA_Properties::ThirdPartyButtonRate 
      applies to tpp;
--    EMV2::OccurrenceDistribution => iPCA_Properties::TooSoonButtonRate 
--      applies to ts;
  **};  --end of EMV2
end Patient.imp;

abstract Clinician
  features
--EXTERNAL EFFECT
    sound: in data port;  --noise made by speaker, heard by clinician
--EXTERNAL EFFECT
    light_to_eye: in data port;  --image seen by clinician
--EXTERNAL PHENOMENON    
    finger_press: out event data port;  --clinician touches screen
end Clinician;

abstract implementation Clinician.imp
--clinicians may cause operator errors, or receive erroneous image or sound
  annex EMV2
  {**
  use types iPCA_Error_Model,ErrorLibrary;
  error propagations
  --incorrect sound, may not alert alarm or warning
    sound: in propagation {ItemOmission,AlarmError,ValueError}; 
  --incorrect visual, wrong data or no alarm symbol
    light_to_eye: in propagation {ItemOmission,AlarmError,ValueError}; 
  --operator error
    finger_press: out propagation {OperatorError};
  flows
  --incorrect sound
    hear: error sink sound{ItemOmission,AlarmError,ValueError};
  --incorrect visual,  
    see: error sink light_to_eye{ItemOmission,AlarmError,ValueError};
  --operator error
    oops: error source finger_press{OperatorError};
  end propagations;
   properties
  --how often does a clinician make an error?
    EMV2::OccurrenceDistribution => iPCA_Properties::OperatorErrorRate 
      applies to oops;
  **};  --end of EMV2
end Clinician.imp;

--hospital service worker that reads logs, loads drug library, and provisions security
process Tech_Software
  features
    to_pca: feature group inverse of FG::Maintenance;
end Tech_Software;

process implementation Tech_Software.imp
--technician may get bad logs, but never provides faulty data/signals
  annex EMV2
  {**
  use types iPCA_Error_Model,ErrorLibrary;
  error propagations
  --fault log
    to_pca.get_fault_log: not in propagation {CommonErrors}; --no error on request
    to_pca.the_fault_log: out propagation {LogError};  --log may be dead, corrupted of truncated
  --event log
    to_pca.get_event_log: not in propagation {CommonErrors}; --no error on request
    to_pca.the_event_log: out propagation {LogError};  --log may be dead, corrupted of truncated
  --security log
    to_pca.get_security_log: not in propagation {CommonErrors}; --no error on request
    to_pca.the_security_log: out propagation {LogError};  --log may be dead, corrupted of truncated
  --drug library
    to_pca.load_drug_library: not in propagation {CommonErrors}; --no error on loading drug library
  --provisioning
    to_pca.security_provisioning: not out propagation {CommonErrors}; --no error when provisioning
  flows
  --get bad fault log
    bad_fault_log: error source to_pca.the_fault_log{LogError};
  --get bad event log 
    bad_event_log: error source to_pca.the_event_log{LogError};
  end propagations;
  **};  --end of EMV2
end Tech_Software.imp;

--make control app for PCA
process PCA_Control_App
--  features
--    pca_signals : feature group inverse of FG::PCA5;  --aggregated feature groups
  --specification of prototype features
--  (alarm_type=>feature group PCA_Pump::PCA_Alarms,         --alarm
--  status_type=>feature group PCA_Pump::PCA_Status,         --status
--  param_type=>feature group PCA_Pump::PCA_Parameters,      --param
--  command_type=>feature group PCA_Pump::PCA_Commands,      --command
--  security_type=>feature group PCA_Pump::PCA_Security                --pki
--  )
end PCA_Control_App; 

process implementation PCA_Control_App.imp
  --thread providing app functionality will be subcomponent of this process
end PCA_Control_App.imp;

--Network Supervisor hardware
processor Network_Supervisor
  features
    to_devices: requires bus access Buses::CAT5;  --network connection
    to_console: requires bus access;  --nurses station (not further specified here)
    to_hospital: requires bus access;  --to hospital information network  (not further specified here)
end Network_Supervisor;    

--connects to PCA pump to read logs, load drug library, provision security
processor Maintenance_Processor
  features
    jack : requires bus access Buses::Maintenance_Bus;  --connects to jack on PCA pump
end Maintenance_Processor;



--models other Medical devices implementing 
--connected to the network
system Other_Medical_Device features
  --bus access to  network   
	to_network: requires bus access Buses::CAT5;  
end Other_Medical_Device;

system implementation Other_Medical_Device.imp
end Other_Medical_Device.imp;


end iPCA_Context;
