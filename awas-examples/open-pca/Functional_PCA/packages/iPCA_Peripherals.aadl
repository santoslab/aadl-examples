--iPCA_Peripherals.aadl
--holds mechanical components
package iPCA_Peripherals
public
	with Peripherals, -- platform peripherals
	Base_Types, -- EMV2,
	CPAL, -- Physical_Types,
	BLESS, iPCA_Feature_Groups, iPCA_Types;


	system iPCA_Fluid extends Peripherals::Sensors_Actuators
		features
			sense: refined to feature group iPCA_Feature_Groups::Sensing_iPCA;
			act: refined to feature group iPCA_Feature_Groups::Actuation_iPCA;
			from_safety: refined to feature group inverse of iPCA_Feature_Groups::Safety_Peripherals_iPCA;
			from_operation: refined to feature group inverse of iPCA_Feature_Groups::Operation_Peripherals_iPCA;
--old PCA pump model signals put into feature groups
--    request_bolus: out event port;  --patient has pressed the button requesting a bolus
--    low_reservoir: out event port;  --warning: little drug left
--    empty_reservoir: out event port;  --alarm: (almost) no drug left
--    door_open: out data port Base_Types::Boolean;  --reservoir door is open
--    door_closed: out event port;  --door was closed
--    pump_too_hot: out event port;        --pump hot alarm
--    upstream_flow_rate: out data port iPCA_Types::Flow_Rate;  --measured drug flow rate
--    upstream_occlusion: out event port;  --upstream occlusion detected
--    downstream_flow_rate: out data port iPCA_Types::Flow_Rate  --measured drug flow rate
--       {BLESS::Assertion=>"<<:=MEASURED_FLOW_RATE>>";};
--    downstream_occlusion: out event port;		--downstream blockage detected
--    bubble_detected: out event port;	    --bubble detected in line
		flows
			drug_to_patient: flow source act.drug_outlet;
		properties
			Classifier_Substitution_Rule => Type_Extension;
		annex EMV2 {**
			use types ErrorLibrary, iPCA_Error_Model;
			error propagations
				-- someone other than the patient presses the button
				sense.patient_button_press: in propagation {ButtonError};
				from_operation.request_bolus: out propagation {ButtonError, EarlyServiceTermination};
				-- signal to barcode reader may be corrupted
				sense.barcode_signal: in propagation {ErrorLibrary::ValueError};
			end propagations;
		**};
	end iPCA_Fluid;

	system implementation iPCA_Fluid.i extends Peripherals::Sensors_Actuators.i
		subcomponents
			button: abstract Patient_Button_func;
			reservoir: abstract Drug_Reservoir_func;
			pump: abstract Mechanical_Pump_func;
			upstream: abstract Upstream_Monitor_func;
			downstream: abstract Downstream_Monitor_func;
--			cpal: refined to process iPCA_CPAL.i;
		connections
			-- patient button
			b_p: port sense.patient_button_press -> button.button_press;
			r_b: port button.request_bolus -> from_operation.request_bolus;
			-- reservoir
--		fill : port act.fill_reservoir -> reservoir.fill_reservoir;
--		r_u : port reservoir.drug_outlet -> upstream.drug_intake;  --drug from reservoir to upstream monitor
			d_o: port reservoir.door_open -> from_operation.door_open;
			d_c: port reservoir.door_closed -> from_operation.door_closed;
			l_r: port reservoir.low_reservoir -> from_safety.Low_Reservoir;
			e_r: port reservoir.empty_reservoir -> from_safety.Empty_Reservoir;
--			f_r: port act.fill_reservoir -> reservoir.fill_reservoir;
			-- upstream monitor
--		u_p : port upstream.drug_outlet -> pump.drug_intake;
			u_f_r: port upstream.upstream_flow_rate -> from_safety.Upstream_Flow_Rate;
			u_ocl: port upstream.upstream_occlusion -> from_safety.upstream_occlusion;
			-- mechanical pump
--		p_d : port pump.drug_outlet -> downstream.drug_intake;
			r: port from_operation.infusion_flow_rate -> pump.rate;
			h: port halt -> pump.halt;
			p_t_h: port pump.pump_too_hot -> from_safety.Pump_Too_Hot;
			-- downstream monitor
--		d_p : port downstream.drug_outlet -> act.drug_outlet;  --drug to patient
			d_f_r: port downstream.downstream_flow_rate -> from_safety.Downstream_Flow_Rate;
			d_ocl: port downstream.downstream_occlusion -> from_safety.downstream_occlusion;
			b_d: port downstream.bubble_detected -> from_safety.bubble;
--	flows
--	  dtp : end to end flow
--	    reservoir -> r_u -> upstream -> u_p -> pump -> p_d -> downstream;
--			cpal_safety: feature group cpal.from_safety <-> from_safety;
--			cpal_op: feature group cpal.from_operation <-> from_operation;
--			cpal_halt: feature halt -> cpal.halt;
  annex EMV2 {**
    use types ErrorLibrary, iPCA_Error_Model;
    use behavior iPCA_Error_Model::CompositeFailUndetected; 	
  	composite error behavior
  	states
  	  fd : [1 ormore(button.failed, reservoir.failed, pump.failed) 
 -- 	  	and 0 orless(upstream.failed, downstream.failed)
  	  	]->failed;
  	  fu : [1 ormore(upstream.failed, downstream.failed)]->undetected_failure;
  	end composite;
  **};
	end iPCA_Fluid.i;

--this is the FUNCTIONAL button provided to patients to request more drug
--it is bound to iPCA_Hardware::Patient_Button.i
	abstract Patient_Button_func
		features
			button_press: in event port; -- physically depressing the button
			request_bolus: out event port; -- patient has pressed the button requesting a bolus
		annex EMV2 {**
			use types ErrorLibrary, iPCA_Error_Model;
			use behavior iPCA_Error_Model::FailStop;	
			error propagations
				-- button passes along third-party presses
				button_press: in propagation {ButtonError};
				-- button may also be broken
				request_bolus: out propagation {EarlyServiceTermination, ButtonError};
			flows
				-- no output when button fails (completely)
				fail_silent: error source request_bolus {EarlyServiceTermination};
				-- flow through errors
				third_party: error path button_press {ButtonError} -> request_bolus {ButtonError};
			end propagations;
			component error behavior
				propagations
				failed -[]-> request_bolus {EarlyServiceTermination};
			end component;
			properties
				EMV2::OccurrenceDistribution => iPCA_Properties::PatientButtonFailureRate applies to fail;
				EMV2::OccurrenceDistribution => iPCA_Properties::ThirdPartyButtonRate applies to third_party;
		**}; -- end of error model
	end Patient_Button_func;

--this is the FUNCTIONAL drug reservoir 
--it is bound to iPCA_Hardware::Drug_Reservoir.i
	abstract Drug_Reservoir_func
		features
			door_open: out data port Base_Types::Boolean; -- reservoir door is open
			low_reservoir: out event port; -- warning: little drug left
			empty_reservoir: out event port; -- alarm: (almost) no drug left
			door_closed: out event port; -- door was closed
		annex EMV2 {**
			use types ErrorLibrary, iPCA_Error_Model;
			use behavior iPCA_Error_Model::FailStop;	
			error propagations
				door_open: out propagation {ItemOmission, ItemCommission};
				low_reservoir: out propagation {ItemOmission, ItemCommission};
				empty_reservoir: out propagation {ItemOmission, ItemCommission};
				door_closed: out propagation {ItemOmission, ItemCommission};
			flows
				dr_es1: error source door_open {ItemOmission, ItemCommission};
				dr_es2: error source low_reservoir {ItemOmission, ItemCommission};
				dr_es3: error source empty_reservoir {ItemOmission, ItemCommission};
				dr_es4: error source door_closed {ItemOmission, ItemCommission};
			end propagations;		
			component error behavior
				propagations
				failed -[]-> door_open {ItemOmission};
				failed -[]-> low_reservoir {ItemOmission};
				failed -[]-> empty_reservoir {ItemOmission};
				failed -[]-> door_closed {ItemOmission};
			end component;
			properties
				EMV2::OccurrenceDistribution => iPCA_Properties::ReservoirFailureRate applies to fail;
				EMV2::OccurrenceDistribution => iPCA_Properties::ReservoirFalsePositiveRate
				  applies to dr_es1.ItemCommission, dr_es2.ItemCommission, dr_es3.ItemCommission, dr_es4.ItemCommission;	
		**}; 
	end Drug_Reservoir_func;

--this is the FUNCTIONAL physical pump that move the drug
--it is bound to iPCA_Hardware::Mechanical_Pump.i
	abstract Mechanical_Pump_func
		features
			rate: in data port iPCA_Types::Flow_Rate -- rate to pump
			  {BLESS::Assertion => "<<:=INFUSION_RATE>>";};
			halt: in event port {BLESS::Assertion => "<<INFUSION_RATE=0>>";}; -- stop pumping
			pump_too_hot: out event port; -- pump hot alarm
		annex EMV2 {**
			use types ErrorLibrary, iPCA_Error_Model;
			use behavior iPCA_Error_Model::FailStop;	
			error propagations
				rate: in propagation {ValueError};
				halt: in propagation {ItemOmission, ItemCommission};
				pump_too_hot: out propagation {ItemOmission, ItemCommission};
				bindings: in propagation {EarlyServiceTermination};
			flows
				mp_es1: error source pump_too_hot {ItemOmission, ItemCommission};
			end propagations;	
--want to get pump failure from binding to iPCA_Hardware::Mechanical_Pump.i	
--			component error behavior
--			propagations
--				FailStop -[]-> bindings {ServiceOmission};
--			end component;
			properties
				EMV2::OccurrenceDistribution => iPCA_Properties::PumpFailureRate applies to fail;
				EMV2::OccurrenceDistribution => iPCA_Properties::FalsePositiveRate
				  applies to mp_es1.ItemCommission;	
		**}; 
	end Mechanical_Pump_func;

--this is the FUNCTIONAL fluid monitor between the reservoir and the pump
--it is bound to iPCA_Hardware::Upstream_Monitor.i
	abstract Upstream_Monitor_func
		features
			upstream_flow_rate: out data port iPCA_Types::Flow_Rate; -- measured drug flow rate
			upstream_occlusion: out event port; -- upstream occlusion detected
		annex EMV2 {**
			use types ErrorLibrary, iPCA_Error_Model;
			use behavior iPCA_Error_Model::FailStop;	
			error propagations
				upstream_flow_rate: out propagation {ValueError};
				upstream_occlusion: out propagation {ItemOmission, ItemCommission};
				bindings: in propagation {EarlyServiceTermination};
			flows
				um_es1: error source upstream_occlusion {ItemOmission, ItemCommission};
				um_es2: error source upstream_flow_rate {ValueError};
			end propagations;	
			component error behavior
			propagations
				failed -[]-> upstream_flow_rate {ValueError};
				failed -[]-> upstream_occlusion {ItemOmission};
			end component;
			properties
				EMV2::OccurrenceDistribution => iPCA_Properties::UpstreamMonitorFailureRate applies to fail;
				EMV2::OccurrenceDistribution => iPCA_Properties::FalsePositiveRate
				  applies to um_es1.ItemCommission;	
		**}; 
	end Upstream_Monitor_func;

--this is the FUNCTIONAL fluid monitor between the pump and the patient
--it is bound to iPCA_Hardware::Downstream_Monitor.i
	abstract Downstream_Monitor_func
		features
			downstream_flow_rate: out data port iPCA_Types::Flow_Rate -- measured drug flow rate
			  {BLESS::Assertion => "<<:=MEASURED_FLOW_RATE>>";};
			downstream_occlusion: out event port; -- downstream blockage detected
			bubble_detected: out event port; -- bubble detected in line
		annex EMV2 {**
			use types ErrorLibrary, iPCA_Error_Model;
			use behavior iPCA_Error_Model::FailStop;	
			error propagations
				downstream_flow_rate: out propagation {ValueError};
				downstream_occlusion: out propagation {ItemOmission, ItemCommission};
				bubble_detected: out propagation {ItemOmission, ItemCommission};
				bindings: in propagation {EarlyServiceTermination};
			flows
				dm_es1: error source downstream_occlusion {ItemOmission, ItemCommission};
				dm_es2: error source downstream_flow_rate {ValueError};
				dm_es3: error source bubble_detected {ItemOmission, ItemCommission};
			end propagations;	
			component error behavior
			propagations
				failed -[]-> downstream_flow_rate {ValueError};
				failed -[]-> downstream_occlusion {ItemOmission};
				failed -[]-> bubble_detected {ItemOmission};
			end component;
			properties
				EMV2::OccurrenceDistribution => iPCA_Properties::DownstreamMonitorFailureRate applies to fail;
				EMV2::OccurrenceDistribution => iPCA_Properties::FalsePositiveRate
				  applies to dm_es1.ItemCommission, dm_es3.ItemCommission;	
		**}; 
	end Downstream_Monitor_func;

	process iPCA_CPAL extends CPAL::CPAL_Server_Process
		features
			from_safety: refined to feature group inverse of iPCA_Feature_Groups::Safety_Peripherals_iPCA;
			from_operation: refined to feature group inverse of iPCA_Feature_Groups::Operation_Peripherals_iPCA;
		properties
			Classifier_Substitution_Rule => Type_Extension;
	end iPCA_CPAL;

	process implementation iPCA_CPAL.i extends CPAL::CPAL_Server_Process.i
	end iPCA_CPAL.i;

end iPCA_Peripherals;