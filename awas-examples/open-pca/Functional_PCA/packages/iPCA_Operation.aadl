package iPCA_Operation
public
	with Base_Types, Physical_Types, iPCA_Feature_Groups, --PCA pump feature groups
    iPCA_Types, 
    iPCA_Drug_Library, 
    iPCA_Operation_Threads, 
    iPCA_Boss, Operation, --platform operation subsystem
    BLESS;
    
	flag renames data Base_Types::Boolean;

	system iPCA_Operation extends Operation::Operation
		--operation subsystem
		features
			to_safety: refined to feature group iPCA_Feature_Groups::Operation_Safety_iPCA; --communicate with safety subsystem
			to_peripherals: refined to feature group iPCA_Feature_Groups::Operation_Peripherals_iPCA; --command sensors/actuators
			from_power: refined to  feature group inverse of iPCA_Feature_Groups::Power_Operation_iPCA; --communicate with power subsystem
			to_user: refined to feature group iPCA_Feature_Groups::User_Interface_iPCA; --expose user interface
			from_maintenance: refined to feature group inverse of iPCA_Feature_Groups::Maintenance_iPCA; --only uses a subset of maintenance signals
			to_comm: refined to feature group iPCA_Feature_Groups::Network_iPCA; --communicate with network controller
			crypto_control: refined to feature group inverse of iPCA_Feature_Groups::Crypto_Control_iPCA;
			alarm: refined to feature group inverse of iPCA_Feature_Groups::Alarm_iPCA;
		properties
			Classifier_Substitution_Rule => Type_Extension;
		annex EMV2 {**
			use types ErrorLibrary, iPCA_Error_Model;
			error propagations
				to_peripherals.request_bolus: in propagation {ButtonError, EarlyServiceTermination};
			end propagations;
		**};
	end iPCA_Operation;

	system implementation iPCA_Operation.i extends Operation::Operation.i
		subcomponents
			operation_process: process Operation_Process.i; --process holding thread that controls pump action
      scanner: abstract Scanner_Function;	
		connections
			pb: port to_peripherals.Request_Bolus -> operation_process.patient_button_request;
					--pump control
			pfr: port operation_process.infusion_flow_rate -> to_peripherals.infusion_flow_rate;
--    ufr: port Upstream_Flow_Rate -> operation_process.Upstream_Flow_Rate;
--    dfr: port Downstream_Flow_Rate -> operation_process.Downstream_Flow_Rate;
					--reservoir
			do: port to_peripherals.door_open -> operation_process.door_open;
			dc: port to_peripherals.door_closed -> operation_process.door_closed;
					--operation to control panel
			stat: port operation_process.system_status -> to_user.system_status;
			hlv: port operation_process.hard_limit_violated -> to_safety.hard_limit_violated; --connection out of operation.i
			hlvcp: port operation_process.hard_limit_violated -> to_user.hard_limit_violated; --connection to control panel
			pi: port to_user.pause_infusion -> operation_process.pause_infusion;
			ri: port to_user.resume_infusion -> operation_process.resume_infusion;
--    ss: port operation_process.system_status -> control_panel.system_status;
--    crb: port operation_process.clinician_request_bolus -> control_panel.clinician_request_bolus;
--    bd: port control_panel.Bolus_Duration -> operation_process.Bolus_Duration;
--    rx: port operation_process.Rx -> control_panel.Rx;
			crx: port to_user.confirm_soft_limit_exception -> operation_process.confirm_soft_limit_exception;
			rrx: port to_user.reject_soft_limit_exception -> operation_process.reject_soft_limit_exception;
			slv: port operation_process.soft_limit_warning -> to_user.soft_limit_warning;
			start: port to_user.start_button_pressed -> operation_process.start_button_pressed;
			stop: port to_user.stop_button_pressed -> operation_process.stop_button_pressed;
			toff: port to_user.turn_off -> operation_process.turn_off;
      ai: port to_user.alarm_inactivation -> operation_process.alarm_inactivation;
--			cpar: port control_panel.cp_reset_alarm -> to_safety.cp_reset_alarm;
			crb: port to_user.clinician_request_bolus -> operation_process.clinician_request_bolus;
			cbd: port to_user.clinician_bolus_duration -> operation_process.clinician_bolus_duration;
			msg: port operation_process.display_message -> to_user.display_message;
			soun: port operation_process.sound_type -> to_user.sound_type;
			prnts: port operation_process.patient_request_not_too_soon -> to_user.patient_request_not_too_soon;
			prts: port operation_process.patient_request_too_soon -> to_user.patient_request_too_soon;
			cpmdph: port operation_process.over_max_drug_per_hour -> to_user.over_max_drug_per_hour;
					--warning and alarms from safety
			al: port alarm.alarm -> operation_process.Alarm;
			wa: port alarm.warning -> operation_process.Warning;
					--scanner 
      sd: port scanner.Scan_Data -> crypto_control.Scan_Data;
      dos: port operation_process.do_scan -> scanner.do_scan;
      sdo: port scanner.scan_done -> operation_process.scan_done;
					--security
			rx: port crypto_control.Prescription -> operation_process.Prescription;
			sac: port operation_process.authenticate_clinician -> crypto_control.authenticate_clinician;
--			scn: port security_subsystem.Clinician_Name -> control_panel.Clinician_Name;
			sap: port operation_process.authenticate_patient -> crypto_control.authenticate_patient;
--			spn: port security_subsystem.Patient_Name -> control_panel.Patient_Name;
			sarx: port operation_process.authenticate_prescription -> crypto_control.authenticate_prescription;
--			srx: port security_subsystem.Prescription -> operation_process.Prescription;
			saf: port crypto_control.authentication_fail -> operation_process.authentication_fail;
			spa: port crypto_control.authentication_pass -> operation_process.authentication_pass;
--    pro: feature group to_maintenance.Security_Provisioning <-> security_subsystem.Provisioning;
--    secf: port security_subsystem.security_fault -> security_fault;
					--hardware detected failure
			hdf: port to_safety.hw_detected_failure -> operation_process.hw_detected_failure;
			stp: port to_safety.Halt -> operation_process.stop_pumping_completely;
			pkr: port to_safety.pump_at_KVO_rate -> operation_process.pump_at_KVO_rate;
					--power
--			rbt: port from_power.Remaining_Battery_Time -> control_panel.Remaining_Battery_Time;
--			ubp: port from_power.Using_Battery_Power -> control_panel.Using_Battery_Power;
--			lbw: port from_power.low_battery_warning -> control_panel.low_battery_warning;
					--safety
--    sf: port security_subsystem.security_fault -> operation_process.security_fault;  
			pod: port to_safety.POST_Done -> operation_process.POST_Done;
			pof: port to_safety.POST_Fail -> operation_process.POST_Fail;
			prf: port operation_process.priming_failure -> to_safety.priming_failure;
			mdw: port operation_process.over_max_drug_per_hour -> to_safety.over_max_drug_per_hour;
					--event log
      gel: port from_maintenance.get_event_log -> operation_process.get_event_log;
      tel: port operation_process.the_event_log -> from_maintenance.the_event_log;
					--drug library
      ldl: port from_maintenance.load_drug_library -> operation_process.load_drug_library;
			dnil: port operation_process.drug_not_in_library -> to_safety.drug_not_in_library;
					--pump mode
			pm: port operation_process.Pumping_Mode -> to_safety.Pumping_Mode;
			  --network communication
      nai: port to_comm.alarm_inactivation -> operation_process.alarm_inactivation;
			nstp: port to_comm.Halt -> operation_process.stop_pumping_completely;
			npkr: port to_comm.pump_at_KVO_rate -> operation_process.pump_at_KVO_rate;
			
	end iPCA_Operation.i;

	process Operation_Process
		features
				--patient button
			infusion_flow_rate: out data port iPCA_Types::Flow_Rate; --rate to pump
--    Upstream_Flow_Rate: in data port iPCA_Types::Flow_Rate;
--    Downstream_Flow_Rate: in data port iPCA_Types::Flow_Rate;
--  --reservoir
			door_open: in data port Base_Types::Boolean;
					--control panel
			alarm_inactivation: in event data port iPCA_Types::Alarm_Signal; --"On","Alarm_Off","Alarm_Paused","Audio_Off","Audio_Paused"
			prescription: in data port iPCA_Types::Prescription; --extracted prescription from scan data
			pumping_mode: out data port iPCA_Types::Pumping_Mode; --rate to pump 
			patient_button_request: in event port; --patient pressed bolus button
					--battery
--    low_battery_warning: in event port;
--    Using_Battery_Power: in data port Base_Types::Boolean
--      {BLESS::Assertion=>"<<Battery_Current>0.0>>";};
--      --remaining battery time estimated by assuming linear voltage delcine with stored energy
--    Remaining_Battery_Time: in data port BLESS_Types::Time
--      {BLESS::Assertion=>"<<RBT: :=(filtered_voltage/#iPCA_Properties::Full_Battery_Voltage)
--          *#iPCA_Properties::Battery_Power_Duration>>";};
					--drug library
			drug_not_in_library: out event port;
			stop_pumping_completely: in event port;
			pump_at_KVO_rate: in event port;
			hw_detected_failure: in event port;
			hard_limit_violated: out event port;
			soft_limit_warning: out event port;
--    security_fault: in event port;
					--event log
			get_event_log: in event port;
			pause_infusion: in event port;
			resume_infusion: in event port;
			clinician_request_bolus: in event port; --square bolus request from control panel
			clinician_bolus_duration: in event data port Physical_Types::Minute; --set square bolus time from control panel
			confirm_soft_limit_exception: in event port; --clinician confirmed prescription
			reject_soft_limit_exception: in event port; --clinician rejected prescription
			stop_button_pressed: in event port; --clinician pressed "stop" button
			start_button_pressed: in event port; --clinician pressed "start" button   
			over_max_drug_per_hour: out event port; --too much juice
			patient_request_not_too_soon: out event port {BLESS::Assertion => "<<PATIENT_REQUEST_NOT_TOO_SOON(now)>>";};
			patient_request_too_soon: out event port {BLESS::Assertion => "<<PATIENT_REQUEST_TOO_SOON(now)>>";};
					--security
			authenticate_clinician: out event port; --do clinican authentication
			authenticate_patient: out event port; --do patient authentication
			authenticate_prescription: out event port; --do prescription authentication
			authentication_fail: in event port; --authentication failed
			authentication_pass: in event port; --authentication passed
					--boss thread
			do_scan: out event port; --tell scanner to scan
			scan_done: in event port; --scan completed
			post_done: in event port; --power-on self-test completed
			post_fail: in event port; --power-on self-test failure  
			door_closed: in event port; --the drug door was closed
			turn_off: in event port; --the "off" switch was pressed    
			priming_failure: out event port; --priming time-out
					--pump mode
			load_drug_library: in event data port iPCA_Types::Drug_Library;
--      {BLESS::Assertion=>"dl=load_drug_library^0";};
					--from safety
			alarm: in event data port iPCA_Types::Alarm_Type; --alarm indication
			warning: in event data port iPCA_Types::Warning_Type; --warning indication
					--problems
--    Near_Max_Drug_Per_Hour: out event port;
			the_event_log: out event data port iPCA_Types::Event_Log;
					--pump control
			system_status: out event data port iPCA_Types::Status_Type;
--    Rx: out event data port iPCA_Types::Prescription;  --prescription to control panel
			display_message: out event data port iPCA_Types::Message; --message to be displayed on control panel and ICE console
			sound_type: out event data port iPCA_Types::Sound;
		annex EMV2 {**
			use types iPCA_Error_Model, Platform_Error_Model, ErrorLibrary;
			use behavior iPCA_Error_Model::CompositeFailStop;
			error propagations
				patient_button_request: in propagation {ButtonError, EarlyServiceTermination};
			  	processor: in propagation {CPUFailure};
			  	memory: in propagation {MemoryFailure, ValueError};
			  	--all: out propagation {ValueError};
			flows
			  mve: error path memory{ValueError} -> all {ValueError};
--			  ave: error path all{ValueError} -> all {ValueError};
			end propagations;
			component error behavior
			  transitions
			  cpu_fail: working -[processor{CPUFailure}]-> failed;  
			  mem_fail: working -[memory{MemoryFailure}]-> failed;  
			end component;
		**};
	end Operation_Process;

	process implementation Operation_Process.i
		subcomponents
			operation_threads: thread group Operation_Thread_Group.i;
			drug_library: thread iPCA_Drug_Library::Drug_Library_Thread.i;
			event_logger: thread Event_Logger_Thread.i;
		connections
				--drug library thread
			ldl: port load_drug_library -> drug_library.load_drug_library;
			gdr: port operation_threads.get_drug_record -> drug_library.get_drug_record;
			tdr: port drug_library.the_drug_record -> operation_threads.the_drug_record;
			ndf: port drug_library.no_drug_found -> operation_threads.no_drug_found;
			dnil: port drug_library.no_drug_found -> drug_not_in_library;
--    dnil: port operation_threads.drug_not_in_library -> drug_not_in_library;
					--event logger thread
			gel: port get_event_log -> event_logger.get_event_log;
			tel: port event_logger.the_event_log -> the_event_log;
			le: port operation_threads.log_event -> event_logger.log_event;
					--patient button
			pb: port patient_button_request -> operation_threads.patient_button_request;
					--pump control
--    ufr: port Upstream_Flow_Rate -> operation_threads.Upstream_Flow_Rate;
--    dfr: port Downstream_Flow_Rate -> operation_threads.Downstream_Flow_Rate;
			do: port door_open -> operation_threads.door_open;
			pfr: port operation_threads.infusion_flow_rate -> infusion_flow_rate;
					--control panel
			hlv: port operation_threads.hard_limit_violated -> hard_limit_violated;
			pi: port pause_infusion -> operation_threads.pause_infusion;
			ri: port resume_infusion -> operation_threads.resume_infusion;
--    ss: port operation_threads.system_status -> system_status;
			crb: port clinician_request_bolus -> operation_threads.cp_clinician_request_bolus;
			bd: port clinician_bolus_duration -> operation_threads.cp_bolus_duration;
--    rxo: port operation_threads.Rx -> Rx;
			crx: port confirm_soft_limit_exception -> operation_threads.confirm_soft_limit_exception;
			rrx: port reject_soft_limit_exception -> operation_threads.reject_soft_limit_exception;
			slv: port operation_threads.soft_limit_warning -> soft_limit_warning;
			start: port start_button_pressed -> operation_threads.start_button_pressed;
			stop: port stop_button_pressed -> operation_threads.stop_button_pressed;
--			ai: port alarm_inactivation -> operation_threads.alarm_inactivation;
			toff: port turn_off -> operation_threads.turn_off;
			disp: port operation_threads.display_message -> display_message;
			soun: port operation_threads.sound_type -> sound_type;
			mdph: port operation_threads.over_max_drug_per_hour -> over_max_drug_per_hour;
			syst: port operation_threads.system_status -> system_status;
			prnts: port operation_threads.patient_request_not_too_soon -> patient_request_not_too_soon;
			prts: port operation_threads.patient_request_too_soon -> patient_request_too_soon;
					--electrical
--    lbw: port low_battery_warning -> operation_threads.low_battery_warning;
--    ubp: port Using_Battery_Power -> operation_threads.Using_Battery_Power;
--    rbt: port Remaining_Battery_Time -> operation_threads.Remaining_Battery_Time;
					--fluid
			dc: port door_closed -> operation_threads.door_closed;
					--power-on selft test
			pod: port post_done -> operation_threads.post_done;
			pof: port post_fail -> operation_threads.post_fail;
					--warning and alarms from safety
			al: port alarm -> operation_threads.alarm;
			wa: port warning -> operation_threads.warning;
					--priming failure
			pf: port operation_threads.priming_failure -> priming_failure;
					--max dose
--    mdw: port operation_threads.Near_Max_Drug_Per_Hour -> Near_Max_Drug_Per_Hour;
					--security
			acl: port operation_threads.authenticate_clinician -> authenticate_clinician;
			apa: port operation_threads.authenticate_patient -> authenticate_patient;
			apr: port operation_threads.authenticate_prescription -> authenticate_prescription;
			afl: port authentication_fail -> operation_threads.authentication_fail;
			aps: port authentication_pass -> operation_threads.authentication_pass;
			presc: port Prescription -> operation_threads.Prescription;
					--hardware detected failure
			hdf: port hw_detected_failure -> operation_threads.hw_detected_failure;
			stp: port stop_pumping_completely -> operation_threads.stop_pumping_completely;
			pkr: port pump_at_KVO_rate -> operation_threads.pump_at_KVO_rate;
					--scanner
			dos: port operation_threads.do_scan -> do_scan;
			sdo: port scan_done -> operation_threads.scan_done;
					--pumping mode
			pm: port operation_threads.Pumping_Mode -> Pumping_Mode;
	end Operation_Process.i;

	thread group Operation_Thread_Group
		features
				--from safety
--			alarm_inactivation: in data port iPCA_Types::Alarm_Signal; --"On","Alarm_Off","Alarm_Paused","Audio_Off","Audio_Paused"
			infusion_flow_rate: out data port iPCA_Types::Flow_Rate; --rate to pump
					--drug library
			door_open: in data port Base_Types::Boolean;
					--security
			prescription: in data port iPCA_Types::Prescription; --extracted prescription from scan data
					--boss thread
			pumping_mode: out data port iPCA_Types::Pumping_Mode;
			hw_detected_failure: in event port;
			stop_pumping_completely: in event port; --stop the pump
			pump_at_KVO_rate: in event port; --keep vein open    
			hard_limit_violated: out event port; --prescription exceeds hard limit in drug library
--    drug_not_in_library: out event port;  --tell alarm thread null drug record returned
					--patient bolus
			patient_button_request: in event port; --patient pressed bolus button
			patient_request_not_too_soon: out event port {BLESS::Assertion => "<<PATIENT_REQUEST_NOT_TOO_SOON(now)>>";};
			patient_request_too_soon: out event port {BLESS::Assertion => "<<PATIENT_REQUEST_TOO_SOON(now)>>";};
					--control panel
			pause_infusion: in event port;
			resume_infusion: in event port;
			cp_clinician_request_bolus: in event port; --square bolus request from control panel
			stop_button_pressed: in event port; --clinician pressed "stop" button
			start_button_pressed: in event port; --clinician pressed "start" button   
			confirm_soft_limit_exception: in event port; --clinician confirmed prescription
			reject_soft_limit_exception: in event port; --clinician rejected prescription
			soft_limit_warning: out event port; --prescription exceeds soft limit in drug library
			over_max_drug_per_hour: out event port; --too much juice
			no_drug_found: in event port --no drug found having the given drug code
				{BLESS::Assertion => "<<NDF(iPCA_Properties::Drug_Library_Size)>>";};
					--battery
--    Using_Battery_Power: in data port Base_Types::Boolean
--      {BLESS::Assertion=>"<<Battery_Current>0.0>>";};
					--remaining battery time estimated by assuming linear voltage delcine with stored energy
--    Remaining_Battery_Time: in data port BLESS_Types::Time
--      {BLESS::Assertion=>"<<RBT()>>";};
--    low_battery_warning: in event port;
					--log events
			do_scan: out event port; --tell scanner to scan
			scan_done: in event port; --scan completed
					--reservoir
			authenticate_clinician: out event port; --do clinican authentication
			authenticate_patient: out event port; --do patient authentication
			authenticate_prescription: out event port; --do prescription authentication
			authentication_fail: in event port; --authentication failed
			authentication_pass: in event port; --authentication passed
			post_done: in event port; --power-on self-test completed
			post_fail: in event port; --power-on self-test failure  
			door_closed: in event port; --the drug door was closed
			turn_off: in event port; --the "off" switch was pressed    
			priming_failure: out event port;
			network_stop_pump: in event port; --priming time-out
					--pump mode
			alarm: in event data port iPCA_Types::Alarm_Type; --alarm indication
			warning: in event data port iPCA_Types::Warning_Type; --warning indication
					--to safety
--    Near_Max_Drug_Per_Hour: out event port;  --maximum drug allowed (over time) during bolus infusion
			cp_bolus_duration: in event data port Physical_Types::Minute; --set square bolus time from control panel
--    Rx: out event data port iPCA_Types::Prescription;  --prescription read from bar code or RFID
			system_status: out event data port iPCA_Types::Status_Type;
			display_message: out event data port iPCA_Types::Message; --message to be displayed on control panel and ICE console
			sound_type: out event data port iPCA_Types::Sound; --sound to be made by control panel and ICE console
					--pump control
			get_drug_record: out event data port iPCA_Types::Drug_Code; --request drug record from library
			the_drug_record: in event data port iPCA_Types::Drug_Record; --returned drug record, may be null value if drug code not in library
					--no library entry for given drug code
			log_event: out event data port iPCA_Types::Event_Record;
		annex EMV2 {**
			use types iPCA_Error_Model, ErrorLibrary;
			error propagations
				patient_button_request: in propagation {ButtonError, EarlyServiceTermination};
			end propagations;
		**};
	end Operation_Thread_Group;

	thread group implementation Operation_Thread_Group.i
		subcomponents
				--boss thread decides use case 1
			boss: thread iPCA_Boss::Boss_Thread.i;
					--rate controller calculated pump rate
			rate_controller: thread iPCA_Operation_Threads::Rate_Controller.i;
					--prescription checker
			prescription_checker: thread iPCA_Operation_Threads::Prescription_Checker.i;
					--talks to ice_bus_adaptor in PCA_System.aadl
--			network_thread: thread iPCA_Operation_Threads::Network_Interface_Thread.i;
					--overdose watcher
			max_drug_watcher: thread iPCA_Operation_Threads::Max_Drug_Per_Hour_Watcher.i;
					--checks whether last bolus was before minimum_time_between_bolus
			patient_bolus_checker: thread iPCA_Operation_Threads::Patient_Bolus_Checker.i;
		connections
				--status
			stat: port rate_controller.system_status -> system_status;
					--boss thread inputs
			pod: port post_done -> boss.post_done;
			pof: port post_fail -> boss.post_fail;
			stb: port start_button_pressed -> boss.start_button_pressed;
			sop: port stop_button_pressed -> boss.stop_button_pressed;
			scd: port scan_done -> boss.scan_done;
			baf: port authentication_fail -> boss.authentication_fail;
			baps: port authentication_pass -> boss.authentication_pass;
			bnd: port no_drug_found -> boss.drug_not_in_library;
			bthlv: port prescription_checker.hard_limit_violated -> boss.hard_limit_violated;
			btcrx: port confirm_soft_limit_exception -> boss.confirm_soft_limit_exception;
			btrrx: port reject_soft_limit_exception -> boss.reject_soft_limit_exception;
			dc: port door_closed -> boss.door_closed;
			off: port turn_off -> boss.turn_off;
					--boss thread outputs
			ble: port boss.log_event -> log_event;
			btd: port boss.display_message -> display_message;
			bts: port boss.sound_type -> sound_type;
			bds: port boss.do_scan -> do_scan;
			bac: port boss.authenticate_clinician -> authenticate_clinician;
			bap: port boss.authenticate_patient -> authenticate_patient;
			barx: port boss.authenticate_prescription -> authenticate_prescription;
			bpr: port boss.begin_priming -> rate_controller.begin_priming;
			epr: port boss.end_priming -> rate_controller.end_priming;
			pf: port boss.priming_failure -> priming_failure;
			bi: port boss.begin_infusion -> rate_controller.begin_infusion;
			hi: port boss.halt_infusion -> rate_controller.halt_infusion;
			crx: port boss.check_prescription -> prescription_checker.check_prescription;
					--rate controller output
			pfr: port rate_controller.infusion_flow_rate -> infusion_flow_rate;
			pm: port rate_controller.Pumping_Mode -> Pumping_Mode;
					--patient bolus checker
			prb: port patient_button_request -> patient_bolus_checker.patient_button_request;
			rcprnts: port patient_bolus_checker.patient_request_not_too_soon -> rate_controller.patient_request_not_too_soon;
			prnts: port patient_bolus_checker.patient_request_not_too_soon -> patient_request_not_too_soon;
			prts: port patient_bolus_checker.patient_request_too_soon -> patient_request_too_soon;
					--rate controller inputs
			spc: port stop_pumping_completely -> rate_controller.stop_pumping_completely;
			kvo: port pump_at_KVO_rate -> rate_controller.pump_at_KVO_rate;
			alm: port Alarm -> rate_controller.Alarm;
			war: port Warning -> rate_controller.Warning;
			dor: port door_open -> rate_controller.door_open;
			pin: port pause_infusion -> rate_controller.pause_infusion;
			rin: port resume_infusion -> rate_controller.resume_infusion;
--			isp: port network_thread.network_stop_pump -> rate_controller.network_stop_pump;
					--from control panel to rate controller
			crb: port cp_clinician_request_bolus -> rate_controller.cp_clinician_request_bolus;
			bdr: port cp_bolus_duration -> rate_controller.cp_bolus_duration;
					--from boss thread to rate controller  
--    spf: port CP_Stop_Flow -> rate.CP_Stop_Flow;
--    stf: port CP_Start_Flow -> rate.CP_Start_Flow; 
--    pri: port CP_Prime -> rate.CP_Prime;
					--to max drug per hour watcher 
--    pnm: port max_drug_watcher.Near_Max_Drug_Per_Hour -> rate_controller.Near_Max_Drug_Per_Hour;
--    mdw: port max_drug_watcher.Near_Max_Drug_Per_Hour -> Near_Max_Drug_Per_Hour;
			pom: port max_drug_watcher.over_max_drug_per_hour -> rate_controller.over_max_drug_per_hour;
			poc: port max_drug_watcher.over_max_drug_per_hour -> over_max_drug_per_hour;
			ifl: port rate_controller.infusion_flow_rate -> max_drug_watcher.infusion_flow_rate;
			mdh: port prescription_checker.max_drug_per_hour -> max_drug_watcher.max_drug_per_hour;
					--from prescription checker to rate_controller 
--    rok: port prescription_checker.prescription_okay -> rate_controller.prescription_okay;
			pbr: port prescription_checker.patient_bolus_rate -> rate_controller.patient_bolus_rate;
			sbr: port prescription_checker.square_bolus_rate -> rate_controller.square_bolus_rate;
			bar: port prescription_checker.basal_rate -> rate_controller.basal_rate;
			vtb: port prescription_checker.vtbi -> rate_controller.vtbi;
					--from prescription checker to patient bolus checker
			mtbb: port prescription_checker.minimum_time_between_bolus -> patient_bolus_checker.minimum_time_between_bolus;
					--prescription checker inputs
			pcnd: port no_drug_found -> prescription_checker.drug_not_in_library;
			tdr: port the_drug_record -> prescription_checker.the_drug_record;
			cfrx: port confirm_soft_limit_exception -> prescription_checker.confirm_soft_limit_exception;
			rrx: port reject_soft_limit_exception -> prescription_checker.reject_soft_limit_exception;
			pcrx: port Prescription -> prescription_checker.Prescription;
					--prescription checker outputs
			slw: port prescription_checker.soft_limit_warning -> soft_limit_warning;
			hlv: port prescription_checker.hard_limit_violated -> hard_limit_violated;
			gdr: port prescription_checker.get_drug_record -> get_drug_record;
			rxok: port prescription_checker.prescription_okay -> boss.prescription_okay;
--					--control panel to network thread
--			ai: port alarm_inactivation -> network_thread.alarm_inactivation;
--			icpbd: port cp_bolus_duration -> network_thread.cp_bolus_duration;
--			icrb: port cp_clinician_request_bolus -> network_thread.cp_clinician_request_bolus;
--					--patient bolus checker to network thread
--			icprnts: port patient_bolus_checker.patient_request_not_too_soon -> network_thread.patient_request_not_too_soon;
--			icprts: port patient_bolus_checker.patient_request_too_soon -> network_thread.patient_request_too_soon;
--					--prescription checker to network thread
--			srxok: port prescription_checker.prescription_okay -> network_thread.prescription_okay;
--			ssbr: port prescription_checker.square_bolus_rate -> network_thread.square_bolus_rate;
--			spbr: port prescription_checker.patient_bolus_rate -> network_thread.patient_bolus_rate;
--			scbr: port prescription_checker.basal_rate -> network_thread.basal_rate;
--			svtbi: port prescription_checker.vtbi -> network_thread.vtbi;
--					--rate controller to network thread
--			sifr: port rate_controller.infusion_flow_rate -> network_thread.infusion_flow_rate;
--					--max drug watcher to network thread
----    snmax: port max_drug_watcher.Near_Max_Drug_Per_Hour -> network_thread.Near_Max_Drug_Per_Hour;
--			somax: port max_drug_watcher.over_max_drug_per_hour -> network_thread.over_max_drug_per_hour;
--					--safety to network thread
--			ialrm: port Alarm -> network_thread.Alarm;
--			iwarn: port Warning -> network_thread.Warning;
--					--boss to network thread
--			ibi: port boss.begin_infusion -> network_thread.begin_infusion;
--			ihi: port boss.halt_infusion -> network_thread.halt_infusion;
--					--fluid to network thread
--			ido: port door_open -> network_thread.door_open;
--					--hardware detected failure
--			hdf: port hw_detected_failure -> rate_controller.hw_detected_failure;
--			stp: port stop_pumping_completely -> rate_controller.stop_pumping_completely;
--			ikvo: port pump_at_KVO_rate -> network_thread.pump_at_KVO_rate;
--			ispc: port stop_pumping_completely -> network_thread.stop_pumping_completely;
--			ihwdf: port hw_detected_failure -> network_thread.hw_detected_failure;
--  annex EMV2X
--  {**
--  --the ui process is working when the ui thread is
--  use types ErrorLibrary, iPCA_Error_Model;
--  --when the ui thread fails, it stops
--  use behavior iPCA_Error_Model::CompositeFailStop; 	
--  --same error propagations as ui thread
--  error propagations
--    hw_detected_failure: in propagation {ItemOmission,ItemCommission};
--    stop_pumping_completely: in propagation {ItemOmission,ItemCommission};
--    pump_at_KVO_rate: in propagation {ItemOmission,ItemCommission};
--    Alarm: in propagation {ItemOmission,ItemCommission,ValueError};
--    Warning: in propagation {ItemOmission,ItemCommission,ValueError};
--  --to safety
--    Near_Max_Drug_Per_Hour: out propagation {ItemOmission,ItemCommission};  --maximum drug allowed (over time) during bolus infusion
--    hard_limit_violated: out propagation {ItemOmission,ItemCommission};  --prescription exceeds hard limit in drug library
----    drug_not_in_library: out propagation {ItemOmission,ItemCommission};  --tell alarm thread null drug record returned
--  --actions
--    patient_button_request: in propagation {ItemOmission,ItemCommission};  --patient pressed bolus button
--  --control panel
--    pause_infusion: in propagation {ItemOmission,ItemCommission};
--    resume_infusion: in propagation {ItemOmission,ItemCommission};
--    cp_clinician_request_bolus: in propagation {ItemOmission,ItemCommission};   --square bolus request from control panel
--    cp_bolus_duration: in propagation {ItemOmission,ItemCommission,ValueError};  --set square bolus time from control panel
----    Rx: out propagation {ItemOmission,ItemCommission,ValueError};   --prescription read from bar code or RFID
--    stop_button_pressed: in propagation {ItemOmission,ItemCommission};  --clinician pressed "stop" button
--    start_button_pressed: in propagation {ItemOmission,ItemCommission};  --clinician pressed "start" button   
----    CP_Prime: in propagation {ItemOmission,ItemCommission};  --clinician pressed "prime" button   
--    confirm_soft_limit_exception: in propagation {ItemOmission,ItemCommission};  --clinician confirmed prescription
--    reject_soft_limit_exception: in propagation {ItemOmission,ItemCommission};   --clinician rejected prescription
----    alarm_inactivation: in propagation {ItemOmission,ItemCommission,ValueError};  --"On","Alarm_Off","Alarm_Paused","Audio_Off","Audio_Paused"
--    soft_limit_warning: out propagation {ItemOmission,ItemCommission};  --prescription exceeds soft limit in drug library
--    system_status: out propagation {ItemOmission,ItemCommission,ValueError}; 
--    over_max_drug_per_hour: out propagation {ItemOmission,ItemCommission};  --too much juice
--  --pump control
--    infusion_flow_rate:  out propagation {ItemOmission,ItemCommission,ValueError};    --rate to pump
----    Upstream_Flow_Rate: in data port iPCA_Types::Flow_Rate;
----    Downstream_Flow_Rate: in data port iPCA_Types::Flow_Rate;
--  --drug library
--    get_drug_record: not out propagation {CommonErrors};  --request drug record from library
--    the_drug_record: in propagation {EarlyServiceTermination,ValueError}; --retruned drug record, may be null value if drug code not in library
--    no_drug_found: in propagation {ItemOmission};
--  --battery
----    Using_Battery_Power: in propagation {ItemOmission,ItemCommission};
----      --remaining battery time estimated by assuming linear voltage delcine with stored energy
----    Remaining_Battery_Time:  in propagation {ItemOmission,ItemCommission,ValueError};
----    low_battery_warning: in propagation {ItemOmission,ItemCommission};
--  --log events
--    log_event: out propagation {ItemOmission,ItemCommission,ValueError}; 
--  --scanner   
----    Scan_Data: in propagation {ItemOmission,ItemCommission,ValueError}; --data from scanner
--  --reservoir
--    door_open: in propagation {ItemOmission,ItemCommission};
--  --security
----    encrypt : out propagation {ItemOmission,ItemCommission,ValueError}; 
----    decrypt: out propagation {ItemOmission,ItemCommission,ValueError}; 
----    sign: out propagation {ItemOmission,ItemCommission,ValueError}; 
----    verify : out propagation {ItemOmission,ItemCommission,ValueError}; 
----    verified : in propagation {ItemOmission,ItemCommission};
----    result :in propagation {ItemOmission,ItemCommission,ValueError}; 
--  end propagations;
--  composite error behavior
--    states 
--    --any thread failed -> thread group failed
--     [boss.failed or rate_controller.failed or prescription_checker.failed or ice_thread.failed or max_drug_watcher.failed]->failed;
--    --all threads working ->  thread group working
--     [boss.working and rate_controller.working and prescription_checker.working and ice_thread.working and max_drug_watcher.working]->working;
--  end composite;  	
--  **};  --end of EMV2
			Operation_Thread_Group_i_new_connection: port hw_detected_failure -> rate_controller.hw_detected_failure;
			Operation_Thread_Group_i_new_connection2: port network_stop_pump -> rate_controller.network_stop_pump;
	end Operation_Thread_Group.i;

-- stores events
	thread Event_Logger_Thread
		features
				--record an event in the log
			get_event_log: in event port; --put out event log next period
--      {BLESS::Assertion=>"<<the_event_log=EVENT_LOG>>";};
					--log output
			log_event: in event data port iPCA_Types::Event_Record {BLESS::Assertion => "<<:=EVENT_RECORD>>";};
					--ask for the whole event log
			the_event_log: out event data port iPCA_Types::Event_Log --output event log
			{BLESS::Assertion => "<<:=EVENT_LOG>>";};
		properties
			Thread_Properties::Dispatch_Protocol => Aperiodic;
	end Event_Logger_Thread;

--this represents the device implementation that stores & retrieves fault indications
--must add hardware faults
	thread implementation Event_Logger_Thread.i
  annex BLESS
  {**
  assert
    <<AXIOM_LOG: :log=EVENT_LOG>>
    <<ELT:c:all k:integer in 1 ..c are log[k]=EVENT_RECORD>>
  invariant <<ELT(event_count)>>
  variables
    log : iPCA_Types::Event_Log;  --data structure holding fault log
    event_count :  integer:=0;    --count of logged faults
    an_event : iPCA_Types::Event_Record;  --event record received
  states
    start : initial state <<ELT(event_count)>>;
    run : complete state <<ELT(event_count)>>;
    done : final state;  
  transitions
    elt0: start-[ ]->run{};
    elt1: run-[on dispatch log_event]->run --put event record into array, increment count
      {  <<ELT(event_count)>>
      	log_event?(an_event)
      	; <<ELT(event_count) and (an_event=EVENT_RECORD)>>
      	event_count:=event_count+1
      	; <<ELT(event_count-1) and (an_event=EVENT_RECORD)>>
      	log[event_count]:=an_event
      	<<(log[event_count]=EVENT_RECORD) and (all k:integer in 1 ..event_count-1 are log[k]=EVENT_RECORD)>>
      };
    elt2: run-[on dispatch get_event_log]->run  --output the log
      {<<AXIOM_LOG() and ELT(event_count)>>
      the_event_log!(log)
      <<AXIOM_LOG() and ELT(event_count)>>};
  **};
annex EMV2 
  {** 
  use types iPCA_Error_Model, ErrorLibrary;
  --use common behavior fail-subtle, one corrupted log entry doesn't mean the logging stops
  use behavior iPCA_Error_Model::FailCorruptedTruncated;
  error propagations
  --this may not get the right value to log, or may have service issues
    log_event: in propagation {ValueError,EarlyServiceTermination};
  -- *not* expecting any errors in the command to read the log
    get_event_log: not in propagation {CommonErrors};
  -- errors in the value of the log retreived 
    the_event_log: out propagation {LogError};
  flows  --three different log fault behaviors:  complete failure, corruption, and truncation
  --nothing returned from log when failed
    died: error source the_event_log{DeadLog} when failed;
  --corrupted log
    mucked: error source the_event_log{CorruptedLog} when corrupted;
  --truncated log
    trunc: error source the_event_log{TruncatedLog} when truncated;
  end propagations;
  component error behavior
    events  
      --event representing failure of the log outright
--      ve: error event log_fault;
--      erroneous_hardwired_failure_indication_put_in_log: 
      corrupt: error event
--        when POST_Failure{ItemCommission} or RAM_Failure{ItemCommission}
        ;
--    transitions  
      --log dies -> failed
--      hwcrpt: working -[erroneous_hardwired_failure_indication_put_in_log]-> failed;  

  end component;
  properties
--  use thread failure rate for event log
    EMV2::occurrencedistribution => iPCA_Properties::ThreadFailureRate 
      applies to corrupt;
  **};  --end of EMV2
	end Event_Logger_Thread.i;
	
--functional representation of a scannar that will be bound to an actual device:  iPCA_Hardware::Scanner.i;	
abstract Scanner_Function
  features
    do_scan: in event port;                    --tell scanner to scan
    scan_done: out event port;                   --scan completed
    scan_data: out event data port iPCA_Types::Scan_Data_Type;  --data from scanner	
  annex EMV2 {**
    use types iPCA_Error_Model, ErrorLibrary;
    use behavior ErrorLibrary::FailStop;
    error propagations
      scan_data : out propagation {ValueError,ServiceOmission};
    flows  
      bad_scan : error source scan_data{ValueError};
      no_scan : error source scan_data{ServiceOmission} when FailStop; 
    end propagations;
    properties
    EMV2::occurrencedistribution => iPCA_Properties::ScannerFailureRate 
      applies to Failure;
    EMV2::occurrencedistribution => iPCA_Properties::BadDataRate 
      applies to bad_scan;  
  **};
end Scanner_Function;
	
end iPCA_Operation; --package
