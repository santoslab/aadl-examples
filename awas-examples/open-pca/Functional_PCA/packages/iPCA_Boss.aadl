--iPCA_Boss.aadl



package iPCA_Boss
public
with EMV2, 
  iPCA_Types, 
  iPCA_Properties,
  iPCA_Error_Model, 
  BLESS;

--the boss thread executes Use Case 1:  Normal Operation
--and ancillary events.  therefore, there really isn't any
--formal specification, just validation that the ues/exception 
--cases were done correctly
--contained by PCA_Operation::Operation_Thread_Group
thread Boss_Thread
  features
    post_done: in event port;                   --power-on self-test completed
    post_fail: in event port;                   --power-on self-test failure
    display_message: out event data port iPCA_Types::Message;  --message to be displayed on control panel
    sound_type: out event data port iPCA_Types::Sound;      --sound to be made by control panel
    stop_button_pressed: in event port;         --stop button was pressed
    start_button_pressed: in event port;        --start button was pressed
    do_scan: out event port;                    --tell scanner to scan
    scan_done: in event port;                   --scan completed
    authenticate_clinician: out event port;     --do clinican authentication
    authenticate_patient: out event port;       --do patient authentication
    authenticate_prescription: out event port;  --do prescription authentication
    authentication_fail: in event port;         --authentication failed
    authentication_pass: in event port;         --authentication passed
    check_prescription: out event port;                   --check drug
    drug_not_in_library: in event port;         --drug is not in library
    hard_limit_violated: in event port;         --hard limit was violated
    reject_soft_limit_exception: in event port;                   --clinician did not accept soft limit violation
    confirm_soft_limit_exception: in event port;                  --prescription confirmed
    prescription_okay: in event port 
      {BLESS::Assertion => "<<Rx_APPROVED()>>";};  --the prescription approved for infusion
    door_closed: in event port;                 --the drug door was closed
    begin_priming: out event port;              --start priming
    end_priming: out event port;                --stop priming
    priming_failure: out event port;              --priming not stopped in time
    begin_infusion: out event port             --start infusion
      {BLESS::Assertion => "<<Rx_APPROVED()>>";};
    halt_infusion: out event port;              --stop infusion
    turn_off: in event port;                    --the "off" switch was pressed
  --log events
    log_event: out event data port iPCA_Types::Event_Record;   
  properties
    Thread_Properties::Dispatch_Protocol=>Aperiodic;  
end Boss_Thread;

thread implementation Boss_Thread.i
  annex BLESS  
  {**
  	DO_NOT_PROVE  --not proved yet, keep from generating unsolved proof obligations
  	invariant <<true>>
  	states
  	  UC1_1_press_power_switch: initial state;
  	  EC4_POST: complete state;
  	  EC4_POST_fail: complete state;
  	  UC1_2_make_sound: complete state;
  	  EC17_audio_fail: complete state;
  	  UC1_3_display_scan_badge: state;
  	  UC1_3_do_scan: complete state;
  	  UC1_4_authenticate_clinician: complete state;
  	  EC14_clinician_authentication_fail: complete state;
  	  UC1_5_display_scan_wristband: complete state;
  	  UC1_6_authenticate_patient: complete state;
  	  EC15_patient_authentication_fail: complete state;
  	  UC1_7_display_scan_Rx: complete state;
  	  UC1_8_authenticate_Rx: complete state;
  	  EC16_Rx_authentication_fail: complete state;
  	  UC1_9_drug_check: complete state;
  	  UC1_9_drug_not_in_library: complete state;
  	  EC3_hard_limit_fail: complete state;
  	  EC2_soft_limit_rejected: complete state;
  	  UC1_10_display_insert_vial: complete state;
  	  UC1_11_display_attach_tube: complete state;
  	  UC1_12_display_prime_pump: complete state;
  	  UC1_12_prime_start: complete state;
  	  UC1_12_prime_stop: complete state;
  	  EC6_display_priming_fail: complete state;
  	  UC1_13_display_insert_needle: complete state;
  	  UC1_14_display_press_start: complete state;
  	  UC1_15_continue_basal: complete state;
  	  UC2_1_patient_button_pressed: complete state;
  	  UC2_2_check_last_bolus_time: complete state;
  	  EC1_1_patient_button_too_soon: complete state;
  	  EC1_2_3_announce_and_log: complete state;
  	  UC2_3_infuse_vtbi: complete state;
  	  UC2_4_infusion_done: complete state;
  	  UC3_1_clinician_chooses_duration: complete state;
  	  UC3_2_clinician_requests_bolus: complete state;
  	  UC3_3_square_bolus_infusion: complete state;
  	  UC3_4_square_bolus_done: complete state;
  	  UC1_16_stop_button_pressed: complete state;
  	  UC7_resume_infusion_after_stop: complete state;
  	  UC1_17_dislay_remove_needle: complete state;
  	  UC1_18_display_remove_vial: complete state;
  	  UC1_19_display_turn_off_pump:complete state;
   	  Initialization_fail: complete state;
  	  Power_Down: final state;
  	transitions
  	--power-on, do POST
  	  UC1_1: UC1_1_press_power_switch -[ ]-> EC4_POST 
  	    {display_message!(No_Message) & sound_type!(Silence)};
  	--POST fail
  	  EC4: EC4_POST -[on dispatch post_fail ]-> EC4_POST_fail 
  	    {display_message!(POST_failure) & sound_type!(Beep)};
  	--turn off
  	  EC4a: EC4_POST_fail -[on dispatch timeout (post_fail) 2 sec]-> UC1_19_display_turn_off_pump
  	    {sound_type!(Silence)};
  	--POST pass, do audio check
  	  EC4b: EC4_POST -[on dispatch post_done ]-> UC1_2_make_sound
  	    {display_message!(If_Beep_Press_Stop_Button) & sound_type!(Beep)};
  	--audio check
  	  UC1_2: UC1_2_make_sound -[on dispatch stop_button_pressed]->UC1_3_display_scan_badge{};
  	--button not pressed in time, show "sound failure"
  	  EC17:  UC1_2_make_sound -[on dispatch timeout (post_done) 10 sec]-> EC17_audio_fail
 	    {display_message!(Sound_Failure) & sound_type!(Silence)};
    --go to turn-off on stop button or timeout
 	  EC17a:  EC17_audio_fail -[on dispatch stop_button_pressed or timeout (post_done) 15 sec]-> UC1_19_display_turn_off_pump{};
 	--scan badge
 	  UC1_3: UC1_3_display_scan_badge -[ ]-> UC1_3_do_scan
 	    {display_message!(Scan_Badge) & do_scan!};
 	--badge scan done
 	  UC1_3a: UC1_3_do_scan -[on dispatch scan_done]-> UC1_4_authenticate_clinician
 	    {authenticate_clinician!};
 	--clinician authentication passed
 	  UC1_4: UC1_4_authenticate_clinician -[on dispatch authentication_pass]-> UC1_5_display_scan_wristband
 	    {display_message!(Scan_Wristband) & do_scan!};
 	--clinician authentication failed
 	  EC14: UC1_4_authenticate_clinician -[on dispatch authentication_fail]-> EC14_clinician_authentication_fail
 	    {display_message!(Clinician_Not_Authenticated)};
    --go to turn-off on stop button or timeout  	
 	  EC14a: EC14_clinician_authentication_fail -[on dispatch stop_button_pressed or timeout (authenticate_clinician) 90 sec]-> UC1_19_display_turn_off_pump{};  
 	--wristband scan 
 	  UC1_5: UC1_5_display_scan_wristband -[on dispatch scan_done]-> UC1_6_authenticate_patient
 	    {authenticate_patient!};
 	--patient authentication passed
 	  UC1_6: UC1_6_authenticate_patient -[on dispatch authentication_pass]-> UC1_7_display_scan_Rx
 	    {display_message!(Scan_Rx)};
	--patient authentication failed
	  EC15: UC1_6_authenticate_patient -[on dispatch authentication_fail]-> EC15_patient_authentication_fail
 	    {display_message!(Patient_Not_Authenticated)};
    --go to turn-off on stop button or timeout  	
 	  EC15a: EC15_patient_authentication_fail -[on dispatch stop_button_pressed or timeout (authenticate_patient) 90 sec]-> UC1_19_display_turn_off_pump{};  
 	--scan vial
 	  UC1_7: UC1_7_display_scan_Rx -[on dispatch scan_done]-> UC1_8_authenticate_Rx
 	    {authenticate_prescription!};
 	--prescription authentication passed
 	  UC1_8: UC1_8_authenticate_Rx  -[on dispatch authentication_pass]-> UC1_9_drug_check
 	    {check_prescription!};  --tell prescription checker to do its thing
 	--prescription authentication failed
 	  EC16: UC1_8_authenticate_Rx  -[on dispatch authentication_fail]-> EC16_Rx_authentication_fail
 	    {display_message!(Prescription_Not_Authenticated)};
    --go to turn-off on stop button or timeout  	
 	  EC16a: EC16_Rx_authentication_fail -[on dispatch stop_button_pressed or timeout (authenticate_prescription) 90 sec]-> UC1_19_display_turn_off_pump{}; 
 	--drug not in library
 	  UC1_9a:  UC1_9_drug_check -[on dispatch drug_not_in_library]-> UC1_9_drug_not_in_library
 	    {display_message!(drug_not_in_library)};
    --go to turn-off on stop button or timeout  	
 	  UC1_9b: UC1_9_drug_not_in_library -[on dispatch stop_button_pressed or timeout (check_prescription) 90 sec]-> UC1_19_display_turn_off_pump{}; 
 	--check hard limits
 	  EC3: UC1_9_drug_check -[on dispatch hard_limit_violated]-> EC3_hard_limit_fail
 	    {display_message!(hard_limit_violated)};
    --go to turn-off on stop button or timeout  	
 	  EC3a: EC3_hard_limit_fail -[on dispatch stop_button_pressed or timeout (hard_limit_violated) 90 sec]-> UC1_19_display_turn_off_pump{}; 
 	--check soft limits
 	  EC2: UC1_9_drug_check -[on dispatch reject_soft_limit_exception]-> EC2_soft_limit_rejected
 	    {display_message!(Soft_Limit_Rejected)};
    --go to turn-off on stop button or timeout  	
 	  EC2a: EC2_soft_limit_rejected -[on dispatch stop_button_pressed or timeout (reject_soft_limit_exception) 90 sec]-> UC1_19_display_turn_off_pump{}; 
 	--hard and soft limits okay
 	  UC1_9c: UC1_9_drug_check -[on dispatch confirm_soft_limit_exception or prescription_okay]-> UC1_10_display_insert_vial
 	     {display_message!(Insert_Vial_and_Close_Door)};
 	--insert vial and close door
 	  UC1_10: UC1_10_display_insert_vial -[on dispatch door_closed]-> UC1_11_display_attach_tube   	  
 	     {display_message!(Attach_Tube)};
 	--attach tube
 	  UC1_11: UC1_11_display_attach_tube  -[on dispatch timeout (door_closed) 20 sec]-> UC1_12_display_prime_pump
 	     {display_message!(Press_start_to_begin_priming)};
 	--start priming
 	  UC1_12: UC1_12_display_prime_pump -[on dispatch start_button_pressed]-> UC1_12_prime_start
 	     {display_message!(Press_stop_to_end_priming) & begin_priming!};
    --stop priming
      UC1_13: UC1_12_prime_start -[on dispatch stop_button_pressed]-> UC1_13_display_insert_needle
         {display_message!(Insert_Needle_Then_Press_Start)};
    --priming failure
      EC6: UC1_12_prime_start -[on dispatch timeout (begin_priming) #iPCA_Properties::Prime_Time sec]-> EC6_display_priming_fail
        {display_message!(Priming_Failure) & end_priming!};
    --go to turn-off on stop button or timeout  	
 	  EC6a: EC6_display_priming_fail -[on dispatch stop_button_pressed or timeout (begin_priming) 90 sec]-> UC1_19_display_turn_off_pump{}; 
  	--start infusion
  	  UC1_15: UC1_13_display_insert_needle -[on dispatch start_button_pressed]-> UC1_15_continue_basal  
  	    {begin_infusion!};
  	--stop button
  	  UC1_16: UC1_15_continue_basal-[on dispatch stop_button_pressed]-> UC1_16_stop_button_pressed
  	    {halt_infusion!};
  	--resume after stop 
  	  UC7: UC1_16_stop_button_pressed -[on dispatch start_button_pressed]-> UC1_15_continue_basal
  	    {begin_infusion!}; 
  	--turn off
  	  UC1_19: UC1_16_stop_button_pressed -[on dispatch turn_off]-> Power_Down{};    	  
	--scan timeouts 
 	  scan_to: UC1_3_do_scan, UC1_5_display_scan_wristband, UC1_7_display_scan_Rx -[on dispatch timeout (do_scan) 1 min]-> UC1_19_display_turn_off_pump{};  	  
  **};
  annex EMV2 
    {**
			use types ErrorLibrary, iPCA_Error_Model;
			use behavior iPCA_Error_Model::FailStop;
			error propagations
			  hard_limit_violated : in propagation {ItemOmission, ItemCommission};
			  prescription_okay : in propagation {EarlyServiceTermination, ItemCommission};
			end propagations;
			properties
				EMV2::OccurrenceDistribution => iPCA_Properties::ThreadFailureRate applies to fail;
		**}; --end of EMV2
	end Boss_Thread.i;




end iPCA_Boss;