--iPCA_Hardware.aadl

--holds all physical devices and components

package iPCA_Hardware
public
  with
    Hardware,  --platform hardware
    Buses,   --platform buses
    Human_Machine_Interface,  --platform human-machine interface
    Safety,
    Physical_Types,
    iPCA_Feature_Groups,  --PCA feature groups
    iPCA_Properties,
    iPCA_Buses,
--    iPCA_Peripherals,
    iPCA_Types,
--    iPCA_Error_Model,
    iPCA_Medical_Device;

--PCA pump printed circuit board & components
system PCB_iPCA extends Hardware::PCB
	features
		sense : refined to feature group iPCA_Feature_Groups::Sensing_iPCA;  -- {Classifier_Substitution_Rule => Type_Extension;};
	  act : refined to feature group iPCA_Feature_Groups::Actuation_iPCA; -- {Classifier_Substitution_Rule => Type_Extension;}; 
	flows
		drug_in : flow sink act.fill_reservoir;
		drug_out : flow source act.drug_outlet;
		drug_flow : flow path act.fill_reservoir -> act.drug_outlet; 
	properties		
		Classifier_Substitution_Rule => Type_Extension;
		annex EMV2 {**
		use types iPCA_Error_Model;
			error propagations
				-- drug output may be incorrect flow rate, or wrong kind of drug
				act.drug_outlet: out propagation {DrugFlowError, DrugKindError};
				-- the reservoir may be filled with the wrong kind of drug
				act.fill_reservoir: in propagation {DrugKindError};
			end propagations;
		**};
end PCB_iPCA;

--subcomponents are the devices that add medical function to the platform
system implementation PCB_iPCA.i extends Hardware::PCB.clock
		subcomponents
			button: device Patient_Button.i;
			drug_reservoir: device Drug_Reservoir.i;
			upstream_monitor: device Upstream_Monitor.i;
			pump: device Mechanical_Pump.i;
			downstream_monitor: device Downstream_Monitor.i;
			tube_connector: device Infusion_Set_Connector.i;
			perpheral_power_bus: bus Buses::Power_Supply;
			--from Hardware::PCB.clock
--			clock_controller: device Clock_Controller;
			--from Hardware::PCB.mp
--			internal_maintenance_bus: bus Buses::MTM_Bus;
			--from Hardware::PCB.poser
--			power: system Power;
--			power_bus: bus Buses::Power_Supply;
			--from Hardware::PCB.-
			main_bus: refined to bus iPCA_Buses::iPCA_System_Bus;
			cpu: refined to processor iPCA_CPU.i;
--			maintenance: device Maintenance_Processor;
--			nic: device NIC;
--			hmi: system Human_Machine_Interface::HMI;
--			timers : device Timers;
--			ebc : device External_Bus_Controller;
		connections
				--drug flow
			fill: port act.fill_reservoir -> drug_reservoir.fill_reservoir;
			r_u: port drug_reservoir.drug_outlet -> upstream_monitor.drug_intake; --drug from reservoir to upstream monitor
			u_p: port upstream_monitor.drug_outlet -> pump.drug_intake;
			p_d: port pump.drug_outlet -> downstream_monitor.drug_intake;
			d_p: port downstream_monitor.drug_outlet -> tube_connector.drug_intake;
			t_c: port tube_connector.drug_outlet -> act.drug_outlet; --drug to patient		
					--control of pump and sensors through GPIO pins
			gp_b: bus access cpu.gpio <-> button.gpio;
			gp_dr: bus access cpu.gpio <-> drug_reservoir.gpio;
			gp_um: bus access cpu.gpio <-> upstream_monitor.gpio;
			gp_p: bus access cpu.gpio <-> pump.gpio;
			gp_dm: bus access cpu.gpio <-> downstream_monitor.gpio;
					--power supply
			ps_ppb: bus access power.peripheral_power -> perpheral_power_bus;
			ps_b: bus access perpheral_power_bus -> button.power;
			ps_dr: bus access perpheral_power_bus -> drug_reservoir.power;
			ps_um: bus access perpheral_power_bus -> upstream_monitor.power;
			ps_pump: bus access perpheral_power_bus -> pump.power;
			ps_dm: bus access perpheral_power_bus -> downstream_monitor.power;
			ps_t: bus access perpheral_power_bus -> timers.peripheral_power;
			p_mb: bus access power.mtm_bus -> internal_maintenance_bus;
		flows
			drug_flow: flow path act.fill_reservoir -> fill -> drug_reservoir -> r_u -> upstream_monitor -> u_p -> pump 
			  -> p_d -> downstream_monitor -> d_p -> tube_connector -> t_c -> act.drug_outlet;
  annex EMV2 {**
    use types ErrorLibrary, iPCA_Error_Model;
    use behavior iPCA_Error_Model::CompositeFailUndetected; 	
--  	composite error behavior
--  	states
--  	  fd : [1 ormore(func.failed, board.failed) and 
--  	  	0 orless (func.undetected_failure,board.undetected_failure)]->failed;
--  	  fu : [1 ormore(func.undetected_failure, board.undetected_failure)]->undetected_failure;
--  	  
--  	end composite;
  **};
end PCB_iPCA.i;
	
--this is the button provided to patients to request more painkiller
--this is represented in the functional architecture as iPCA_Peripherals::Patient_Button
device Patient_Button extends Hardware::GPIO_Device
--button passes along third-party presses
--  annex EMV2
--  {**
--  use types ErrorLibrary, iPCA_Error_Model;
--  use behavior iPCA_Error_Model::FailStop; 	
--  error propagations
--    --button passes along third-party presses
--    button_press: in propagation {ThirdPartyPress};
--    --button may also be broken
--    Request_Bolus: out propagation {EarlyServiceTermination,ThirdPartyPress}; 
--  flows
--    --no output when button fails (completely)
--    fail_silent: error source Request_Bolus{EarlyServiceTermination} when failed;
--    --flow through errors
--    third_party:  error path button_press{ThirdPartyPress}->Request_Bolus{ThirdPartyPress};
--  end propagations;
--  properties
--    EMV2::OccurrenceDistribution => iPCA_Properties::PatientButtonFailureRate 
--      applies to fail;	
--  **}; --end of EMV
end Patient_Button;

device implementation Patient_Button.i
end Patient_Button.i;

device Drug_Reservoir extends Hardware::GPIO_Device
	features
    drug_outlet : out data port Physical_Types::Fluid_Flow;  --drug from reservoir
    fill_reservoir : in data port Physical_Types::Fluid_Volume;  --put drug in reservoir
  flows
    fill : flow sink fill_reservoir;  --consumer of rate information
    d_r_flow : flow path fill_reservoir -> drug_outlet;
end Drug_Reservoir;

device implementation Drug_Reservoir.i
	annex EMV2 {**
		use types iPCA_Error_Model;
		error propagations
		-- drug output may be wrong kind of drug
			drug_outlet: out propagation {DrugKindError};
		-- the reservoir may be filled with the wrong kind of drug
			fill_reservoir: in propagation {DrugKindError};
		flows
			fr_do : error path fill_reservoir -> drug_outlet;
		end propagations;
	**};
end Drug_Reservoir.i;

device Upstream_Monitor extends Hardware::GPIO_Device
	features
    drug_outlet : out data port Physical_Types::Fluid_Flow;  --drug to physical pump
    drug_intake : in data port Physical_Types::Fluid_Flow;   --drug from reservoir
  flows
    u_m_flow : flow path drug_intake->drug_outlet;
end Upstream_Monitor;

device implementation Upstream_Monitor.i
	annex EMV2 {**
		use types iPCA_Error_Model;
		error propagations
		-- drug output may be wrong kind of drug
			drug_outlet: out propagation {DrugKindError};
		-- the reservoir may be filled with the wrong kind of drug
			drug_intake: in propagation {DrugKindError};
		flows
			di_do : error path drug_intake -> drug_outlet;
		end propagations;
	**};
end Upstream_Monitor.i;

device Mechanical_Pump extends Hardware::GPIO_Device
	features
    drug_outlet : out data port Physical_Types::Fluid_Flow;  --drug to downstream monitor
    drug_intake : in data port Physical_Types::Fluid_Flow;   --drug from upstream monitor   
  flows
    m_p_flow : flow path Drug_Intake->drug_outlet;
end Mechanical_Pump;

device implementation Mechanical_Pump.i
	annex EMV2 {**
		use types iPCA_Error_Model;
		error propagations
				-- drug output may be incorrect flow rate, or wrong kind of drug
			drug_outlet: out propagation {DrugFlowError, DrugKindError};
				-- the reservoir may be filled with the wrong kind of drug
			drug_intake: in propagation {DrugKindError};
--				bindings : out propagation 
				
		flows
			mp_err: error path drug_intake{DrugKindError} -> drug_outlet{DrugKindError};
			bad_rate: error source drug_outlet{DrugFlowError};
--				val_err: error path bindings {ValueError} -> drug_outlet {DrugFlowError};
			end propagations;
	**};
end Mechanical_Pump.i;

device Downstream_Monitor extends Hardware::GPIO_Device
	features
    drug_outlet : out data port Physical_Types::Fluid_Flow;  --drug to patient
    drug_intake : in data port Physical_Types::Fluid_Flow;   --drug from physical pump
  flows
    d_m_flow : flow path Drug_Intake->drug_outlet;
end Downstream_Monitor;

device implementation Downstream_Monitor.i
	annex EMV2 {**
		use types iPCA_Error_Model;
		error propagations
				-- drug output may be incorrect flow rate, or wrong kind of drug
			drug_outlet: out propagation {DrugFlowError, DrugKindError};
				-- the reservoir may be filled with the wrong kind of drug
			drug_intake: in propagation {DrugFlowError, DrugKindError};
		flows
				dm_err: error path drug_intake -> drug_outlet;
		end propagations;
	**};
end Downstream_Monitor.i;

--connection point on the surface of the PVA pump where the infusion set attaches.
device Infusion_Set_Connector
	features
    drug_outlet : out data port Physical_Types::Fluid_Flow;  --drug to patient
    drug_intake : in data port Physical_Types::Fluid_Flow;   --drug from downstream monitor
  flows
    isc_flow : flow path Drug_Intake->drug_outlet;		
end Infusion_Set_Connector;

device implementation Infusion_Set_Connector.i
	annex EMV2 {**
		use types iPCA_Error_Model;
		error propagations
				-- drug output may be incorrect flow rate, or wrong kind of drug
			drug_outlet: out propagation {DrugFlowError, DrugKindError};
				-- the reservoir may be filled with the wrong kind of drug
			drug_intake: in propagation {DrugFlowError, DrugKindError};
		flows
			isc_err: error path drug_intake -> drug_outlet;
		end propagations;
		**};
end Infusion_Set_Connector.i;


--this represents an optical or RFID scanner to read
--drug labels, patient wristbands, and clinician badges
device Scanner
  features
    do_scan: in event port;                    --tell scanner to scan
    scan_done: out event port;                   --scan completed
    scan_data: out event data port iPCA_Types::Scan_Data_Type;  --data from scanner
		barcode_signal : in data port;  --light from label(s) bar code (or QR or whatever)
		barcode_illumination : out data port;  --laser light on barcode
  --internal bus
      i_bus : requires bus access iPCA_Medical_Device::Internal_Bus;
end Scanner;

device implementation Scanner.i
  annex EMV2
  {**
  use types ErrorLibrary, iPCA_Error_Model;
  use behavior iPCA_Error_Model::FailStop; 	
  error propagations
    --errors in scanner data
    Scan_Data: out propagation {CommonErrors};
  flows
    --no signals when scanner fails completely
    fail_blind: error source Scan_Data{EarlyServiceTermination} when failed;
    --bad scanning
    bad_scan: error source Scan_Data{ValueError};
  end propagations;
  properties
    EMV2::OccurrenceDistribution => iPCA_Properties::ScannerFailureRate 
      applies to fail;	
    EMV2::OccurrenceDistribution => iPCA_Properties::FalsePositiveRate 
      applies to bad_scan;	
  **}; --end of EMV2
end Scanner.i;
	
--this is the touch screen used as the PCA pump's control panel
--Image created by, and Touch used by ui_thread
device PCA_Screen extends Human_Machine_Interface::Touch_Screen
  features
			video_bus: requires bus access Buses::Video_Bus;
			power_supply: requires bus access Buses::Power_Supply;
			mtm_bus: requires bus access Buses::MTM_Bus;
    i_bus: requires bus access iPCA_Medical_Device::Internal_Bus;
	properties
		Classifier_Substitution_Rule => Type_Extension;
end PCA_Screen;

device implementation PCA_Screen.i
  annex EMV2
  {**
  use types ErrorLibrary, iPCA_Error_Model;
  use behavior iPCA_Error_Model::FailStop; 	
  error propagations
    --errors in the image to be displayed
    Image: in propagation {EarlyServiceTermination,AlarmError,ValueError};
    --errors in the touch sensed
    Finger_Location: out propagation {EarlyServiceTermination,OperatorError};
    --errors seen by clinician
    UI_Image: out propagation {EarlyServiceTermination,AlarmError,ValueError};
    --errors caused by clinician
    UI_Touch: in propagation {OperatorError};
  flows
    --no output when touch screen fails (completely)
    touch_fail_silent: error source Finger_Location{EarlyServiceTermination} when failed;
    lte_fail_silent: error source UI_Image{EarlyServiceTermination} when failed;
    --errors from digital image to eye
    image_to_eye: error path Image->UI_Image;	
    --error from finger-press to touch-sense
    finger_to_touch: error path UI_Touch->Finger_Location;
  end propagations;
  properties
    EMV2::OccurrenceDistribution => iPCA_Properties::TouchScreenFailureRate 
      applies to fail;	
  **};  --end of EMV2
end PCA_Screen.i;

--this is the speaker that sounds alarms, warnings, and confirmations
--Sound created by ui_thread
--continues to emit sound until next sound received, so must be explicitly silenced
device PCA_Speaker
  features
--CONTROLLED VARIABLE
    audio_signal: in data port;  --sound signal indicating alarm, warning, or confirmation
--EXTERNAL EFFECT
    sound: out data port Physical_Types::Sound;  --noise made by speaker, heard by clinician
  --internal bus
    i_bus: requires bus access iPCA_Medical_Device::Internal_Bus;
end PCA_Speaker;

device implementation PCA_Speaker.i
  annex EMV2
  {** 
  use types ErrorLibrary, iPCA_Error_Model;
  use behavior iPCA_Error_Model::FailStop; 	
  error propagations
    --no sound, wrong/false alarm, wrong sound
    audio_signal: in propagation {EarlyServiceTermination,AlarmError,ValueError};
    sound: out propagation {EarlyServiceTermination,AlarmError,ValueError}; 
  flows
    --no output when speaker fails (completely)
    fail_silent: error source Sound{EarlyServiceTermination} when failed;
    --flow through errors
    signal_to_sound:  error path audio_signal->Sound;
  end propagations;
  properties
    EMV2::OccurrenceDistribution => iPCA_Properties::SpeakerFailureRate 
      applies to fail;	
  **};  --end of EMV2
end PCA_Speaker.i;


--general purpose input.output pins for PCA pump	
bus gpio_iPCA extends Buses::GPIO
end gpio_iPCA;
	
device iPCA_Error_Detector extends Safety::Error_Detector
	features 
		hw_error_detections : refined to feature group inverse of iPCA_Feature_Groups::Operation_Safety_iPCA;
--		system_bus : refined to requires bus access 
	properties
		Classifier_Substitution_Rule => Type_Extension;
end iPCA_Error_Detector;

device implementation iPCA_Error_Detector.i
  annex EMV2
  {** 
  use types ErrorLibrary, iPCA_Error_Model;
  use behavior iPCA_Error_Model::ErrorDetector; 	
  error propagations
    --no sound, wrong/false alarm, wrong sound
    hw_error_detections.post_fail: out propagation {UndetectedFault}; 
--    flows
--    post_not_detect_failure: error source hw_error_detections.post_fail{UndetectedFault};
  end propagations;
  component error behavior
    events
      post_detected_failure : error event {POSTdetectedFault};
      post_not_detect_failure : error event {UndetectedFault};
      thread_monitor_detected_failure : error event {ThreadFault};
      thread_monitor_not_detect_failure : error event {UndetectedFault};
	  transitions
	    working -[post_detected_failure]-> failed_detected {POSTdetectedFault};   
	    working -[post_not_detect_failure]-> failed_undetected {UndetectedFault}; 
	    working -[thread_monitor_detected_failure]-> failed_detected {ThreadFault};   
	    working -[thread_monitor_not_detect_failure]-> failed_undetected {UndetectedFault}; 
	  detections
	    working -[post_detected_failure]-> hardware_fault!; 
	    --halt pumping on thread monitor-detected fault 
	    working -[thread_monitor_detected_failure]-> halt!;  
--	    working -[post_detected_failure]-> hw_error_detections.post_fail!;  
  end component;
  properties
	--power-on self-test detected failure
		EMV2::OccurrenceDistribution => iPCA_Properties::POSTfailureRate 
		  applies to post_detected_failure;
	--power-on self-test did not detect failure when it should have
		EMV2::OccurrenceDistribution => iPCA_Properties::POSTfailureToDetectRate 
		  applies to post_not_detect_failure;
	--thread monitor detected failure
		EMV2::OccurrenceDistribution => iPCA_Properties::ThreadFailureRate 
		  applies to thread_monitor_detected_failure;
	--thread monitor did not detect failure when it should have
		EMV2::OccurrenceDistribution => iPCA_Properties::ThreadFailureToDetectRate 
		  applies to thread_monitor_not_detect_failure;
  **};  --end of EMV2	
end iPCA_Error_Detector.i;

processor iPCA_CPU extends Hardware::CPU
end iPCA_CPU;

processor implementation iPCA_CPU.i extends Hardware::CPU.i
	annex EMV2 {**
		properties
			EMV2::OccurrenceDistribution => iPCA_Properties::RAMfailureRate 
			  applies to ^ram@Failure;
			EMV2::OccurrenceDistribution => iPCA_Properties::RAMseuRate 
			  applies to ^ram@ram_es2;		
			EMV2::OccurrenceDistribution => iPCA_Properties::ROMfailureRate 
			  applies to ^rom@Failure;
	**};
end iPCA_CPU.i;







end iPCA_Hardware;