--iPCA_Types.aadl


package iPCA_Types
public
  with Base_Types, Data_Model, iPCA_Properties, BLESS_Types, BLESS, Physical_Types;
--    IEEE11073_Nomenclature;

annex Typedef
{**
type alarms is enumeration (Pump_Overheated Defective_Battery Low_Battery 
      POST_Failure RAM_Failure ROM_failure CPU_Failure Thread_Monitor_Failure 
      Air_In_Line upstream_occlusion downstream_occlusion Empty_Reservoir 
      basal_overinfusion bolus_overinfusion square_bolus_overinfusion No_Alarm)	

type warnings is enumeration (over_max_drug_per_hour Soft_Limit 
 --     Below_VTBI_Soft_Limit Above_VTBI_Soft_Limit        
 --     Below_Basal_Rate_Soft_Limit Above_Basal_Rate_Soft_Limit 
      Low_Reservoir Priming_Failure 
      basal_underinfusion bolus_underinfusion square_bolus_underinfusion 
      Input_Needed Long_Pause drug_not_in_library hard_limit_violated voltage_oor 
       No_Warning)
       
type status is enumeration (Stopped Bolus Basal KVO Square_Bolus)      

type drug_code is string

type flow_rate is quantity mlph  --milliters per hour

type drug_volume is quantity ml

type drug_record is record (
  code : drug_code,                   --unique identifier for this drug/concentration
  name : string,                                 --generic drug name
--  location : string,                             --Context of drug application
  dose_rate_unit : string,    --The unit of drug dose (for example milliliters/hour)
  vtbi_unit : string,          --The unit of vtbi (for example milliliter)
  amount : quantity mg,               --The weight of the drug dissolved in the diluent (mg)
  concentration : quantity mgpl, --Drug concentration; as prescribed
  vtbi_lower_soft : quantity ml,      --Lower soft limit of drug volume to be infused
  vtbi_lower_hard : quantity ml,      --Lower hard limit of drug volume to be infused
  vtbi_typical : quantity ml,         --Typical drug volume to be infused
  vtbi_upper_soft : quantity ml,      --Upper soft limit of drug volume to be infused
  vtbi_upper_hard : quantity ml,      --Upper hard limit of drug volume to be infused
  basal_rate_lower_soft : quantity mlph,  --Lower soft limit of basal drug dose rate
  basal_rate_lower_hard : quantity mlph,  --Lower hard limit of basal drug dose rate
  basal_rate_typical : quantity mlph,     --Typical basal drug dose rate
  basal_rate_upper_soft : quantity mlph,  --Upper soft limit of basal drug dose rate
  basal_rate_upper_hard : quantity mlph,  --Upper hard limit of basal drug dose rate
  bolus_typical : quantity ml,        --Typical Value of Bolus Volume
  square_bolus_rate_typical : quantity mlph        --Typical duration of clinician commanded bolus
  )

type drug_library is array [iPCA_Properties::Drug_Library_Size] of drug_record  
  
type prescription is record (
  patient:string,
  drug_name:string,
  code: drug_code,
  concentration: quantity mgpl,
  initial_volume: quantity ml,
  basal_flow_rate: quantity mlph,
  vtbi: quantity ml,
  max_drug_per_hour: quantity ml,
  minimum_time_between_bolus: quantity min,
  date_rx_filled:string,
  prescriber:string,
  pharmacist:string
  )  

type fault_record is record (alarm:alarms, warning:warnings, occurrence_time:time) 

type fault_log is array [iPCA_Properties::Fault_Log_Size] of fault_record 

type message is enumeration(No_Message post_fail turn_off If_Beep_Press_Stop_Button Scan_Badge Scan_Wristband Scan_Rx 
       Clinician_Not_Authenticated Patient_Not_Authenticated Prescription_Not_Authenticated hard_limit_violated 
       Soft_Limit_Rejected Insert_Vial_and_Close_Door Press_start_to_begin_priming Press_stop_to_end_priming 
       Priming_Failure Insert_Needle_Then_Press_Start Press_Stop_Again_To_End_Infusion_Press_Start_To_Resume_Infusion 
       Attach_Tube)

type event_record is variant (start_patient_bolus:Start_Patient_Bolus_Event, 
      stop_patient_bolus:Stop_Patient_Bolus_Event )     
      
type alarm_inactivation is enumeration (On, Alarm_Off, Alarm_Paused, Audio_Off, Audio_Paused) 

type event_log is array [iPCA_Properties::Event_Log_Size] of event_record
       
**};	


data Alarm_Type
  properties
    BLESS::Typed => "alarms";
    Data_Model::Data_Representation => Enum;
    Data_Model::Enumerators => ("Pump_Overheated","Defective_Battery","Low_Battery",
        "POST_Failure","RAM_Failure","ROM_failure","CPU_Failure","Thread_Monitor_Failure",
        "Air_In_Line","upstream_occlusion","downstream_occlusion","Empty_Reservoir",
      "basal_overinfusion","bolus_overinfusion","square_bolus_overinfusion","No_Alarm");
end Alarm_Type; 

data Warning_Type
  properties
    BLESS::Typed => "warnings";
    Data_Model::Data_Representation => Enum;
    Data_Model::Enumerators => ("over_max_drug_per_hour",
    --"Below_VTBI_Soft_Limit","Above_VTBI_Soft_Limit","Below_Basal_Rate_Soft_Limit","Above_Basal_Rate_Soft_Limit",
        "Soft_Limit","Low_Reservoir","Priming_Failure",
      "basal_underinfusion","bolus_underinfusion","square_bolus_underinfusion",
      "Input_Needed","Long_Pause","drug_not_in_library","hard_limit_violated","voltage_oor",
      "Priming_Failure","No_Warning");
end Warning_Type;  

data Status_Type
  properties
    BLESS::Typed=>"status";
    Data_Model::Data_Representation => Enum;
    Data_Model::Enumerators => ("Stopped","Bolus","Basal","KVO","Square_Bolus");
end Status_Type;  

data Drug_Code  --string representing what drug, conectration, and volume is in the reservoir
  properties
    BLESS::Typed=>"string";
    Data_Model::Data_Representation => String;
end Drug_Code;

data Dose_Rate_Unit  --unit of dose rates specified buy the pharmacy
  properties
    BLESS::Typed=>"string";
    Data_Model::Data_Representation => String;
end Dose_Rate_Unit;  

data Flow_Rate  --dose rate
  properties
    BLESS::Typed=>"flow_rate";
    Data_Model::Base_Type => (classifier(Base_Types::Integer_16));
    Data_Model::Measurement_Unit => "ml/hr";
end Flow_Rate;  

data Infusion_Unit  --unit of vtbi
  properties
    BLESS::Typed=>"string";
    Data_Model::Data_Representation => String;
end Infusion_Unit;  

data Drug_Volume  --volume of vtbi
  properties
    BLESS::Typed=>"drug_volume";
    Data_Model::Base_Type => (classifier(Base_Types::Integer_16));
    Data_Model::Measurement_Unit => "ml";
end Drug_Volume;  

data Drug_Weight  --string representing what drug, concentration, and volume is in the reservoir
  properties
    BLESS::Typed=>"integer";
    Data_Model::Base_Type => (classifier(Base_Types::Integer_16));
    Data_Model::Measurement_Unit => "mg";
end Drug_Weight;

data Drug_Concentration  --string representing what drug, concentration, and volume is in the reservoir
  properties
    BLESS::Typed=>"drug_concentration";
    Data_Model::Base_Type => (classifier(Base_Types::Float));
    Data_Model::Measurement_Unit => "mg/l";
end Drug_Concentration;

data Drug_Record  --holds pharmacy data for a drug that may be used with the pump
  properties
    BLESS::Typed => "drug_record";
    Data_Model::Data_Representation => Struct;
    Data_Model::Element_Names => 
      ( "code",                   --unique identifier for this drug/concentration
      "name",                   --generic drug name
 --     "location",               --Context of drug application
      "dose_rate_unit",         --The unit of drug dose (for example milliliters/hour)
      "vtbi_unit",              --The unit of vtbi (for example milliliter)
      "amount",                 --The weight of the drug dissolved in the diluent (mg)
      "concentration",          --Drug concentration; as prescribed
      "vtbi_lower_soft",        --Lower soft limit of drug volume to be infused
      "vtbi_lower_hard",        --Lower hard limit of drug volume to be infused
      "vtbi_typical",           --Typical drug volume to be infused
      "vtbi_upper_soft",        --Upper soft limit of drug volume to be infused
      "vtbi_upper_hard",        --Upper hard limit of drug volume to be infused
      "basal_rate_lower_soft",  --Lower soft limit of basal drug dose rate
      "basal_rate_lower_hard",  --Lower hard limit of basal drug dose rate
      "basal_rate_typical",     --Typical basal drug dose rate
      "basal_rate_upper_soft",  --Upper soft limit of basal drug dose rate
      "basal_rate_upper_hard",  --Upper hard limit of basal drug dose rate
      "bolus_typical",          --Typical Value of Bolus Volume
      "square_bolus_rate_typical"      --Typical rate of clinician commanded bolus
      );
    Data_Model::Base_Type => 
      ( classifier(Drug_Code),           --code
        classifier(Base_Types::String),  --name
--        classifier(Base_Types::String),  --location
        classifier(Dose_Rate_Unit),      --dose_rate_unit
        classifier(Infusion_Unit),       --vtbi_unit
        classifier(Drug_Weight),         --amount
        classifier(Drug_Concentration),  --concentration
        classifier(Drug_Volume),     --vtbi_lower_soft
        classifier(Drug_Volume),     --vtbi_lower_hard
        classifier(Drug_Volume),     --vtbi_typical
        classifier(Drug_Volume),     --vtbi_upper_soft
        classifier(Drug_Volume),     --vtbi_upper_hard
        classifier(Flow_Rate),           --basal_rate_lower_soft
        classifier(Flow_Rate),           --basal_rate_lower_hard
        classifier(Flow_Rate),           --basal_rate_typical
        classifier(Flow_Rate),           --basal_rate_upper_soft
        classifier(Flow_Rate),           --basal_rate_upper_hard
        classifier(Drug_Volume),     --bolus_typical
        classifier(iPCA_Types::Flow_Rate)    --ssquare_bolus_rate_typical
      );
end Drug_Record;


data Drug_Library  --holds drug records for all drugs approved by the hospital pharmacy
  properties
    BLESS::Typed => "drug_library";
    Data_Model::Data_Representation => Array;
    Data_Model::Base_Type => (classifier(Drug_Record));
    Data_Model::Dimension => (iPCA_Properties::Drug_Library_Size);
end Drug_Library;
  
data Prescription
  properties
    BLESS::Typed => "prescription";
    Data_Model::Data_Representation => Struct;
    Data_Model::Element_Names => 
      ( "Patient",
        "Drug_Name",
        "Code",
        "Concentration",
        "Initial_Volume",
        "Basal_Flow_Rate",
        "VTBI",
        "Max_Drug_Per_Hour",
        "Minimum_Time_Between_Bolus",
        "Date_Rx_Filled",
        "Prescriber",
        "Pharmacist"
      );
    Data_Model::Base_Type => 
      ( classifier(Base_Types::String),   --patient
        classifier(Base_Types::String),   --drug name
        classifier(iPCA_Types::Drug_Code),            --code
        classifier(iPCA_Types::Drug_Concentration),   --concentration
        classifier(iPCA_Types::Drug_Volume),          --initial volume
        classifier(iPCA_Types::Flow_Rate),            --basal flow rate
        classifier(iPCA_Types::Drug_Volume),          --vtbi
        classifier(iPCA_Types::Drug_Volume),          --maximum drug allowed per hour
        classifier(Physical_Types::Minute),    --min time between bolus doses
        classifier(Base_Types::String),   --date filled; may change to a date type
        classifier(Base_Types::String),   --prescribing physician
        classifier(Base_Types::String)    --pharmacist        
      );      
end Prescription;  
  
data Fault_Record  --record of fault for log
  properties
    BLESS::Typed => "fault_record";
    Data_Model::Data_Representation => Struct;
    Data_Model::Element_Names => ("alarm","warning","occurrence_time");
    Data_Model::Base_Type => ( classifier(Alarm_Type),classifier(Warning_Type),classifier(BLESS_Types::Time));
end Fault_Record;  

data Fault_Log  --holds records of faults
  properties    
    BLESS::Typed => "fault_log";
    Data_Model::Data_Representation => Array;
    Data_Model::Base_Type => (classifier(Fault_Record));
    Data_Model::Dimension => (iPCA_Properties::Fault_Log_Size);
end Fault_Log;

data Event_Record  --record of event for log
  properties
    BLESS::Typed => "event_record";
    Data_Model::Data_Representation => Union;
    Data_Model::Base_Type => (classifier (Start_Patient_Bolus_Event), 
      classifier (Stop_Patient_Bolus_Event));
    Data_Model::Element_Names => ("start_patient_bolus", "stop_patient_bolus" );
end Event_Record;  

data Start_Patient_Bolus_Event
end Start_Patient_Bolus_Event;

data Stop_Patient_Bolus_Event
end Stop_Patient_Bolus_Event;

data Event_Log  --holds records of events
  properties
    BLESS::Typed => "event_log";
    Data_Model::Data_Representation => Array;
    Data_Model::Base_Type => (classifier(Event_Record));
    Data_Model::Dimension => (iPCA_Properties::Event_Log_Size);
end Event_Log;


data Infusion_Type   --used for over- and under-infusion alarms
  properties
    BLESS::Typed=>"enumeration(Bolus_Infusion,Square_Infusion,Basal_Infusion,KVO_Infusion)";
    Data_Model::Data_Representation => Enum;
    Data_Model::Enumerators => ("Bolus_Infusion","Square_Infusion","Basal_Infusion","KVO_Infusion");
end Infusion_Type;  


data Scan_Data_Type  --used for data from scanner
  --TBD
end Scan_Data_Type;
  
data Pump_Fault_Type
  properties
    BLESS::Typed=>"enumeration(priming_failure,pump_hpt,bubble,upstream_occlusion,
    downstream_occlusion,Overinfusion,Underinfusion)";
    Data_Model::Data_Representation => Enum;
    Data_Model::Enumerators => ("priming_failure","pump_hpt","bubble","upstream_occlusion",
      "downstream_occlusion","Overinfusion","Underinfusion" );
end Pump_Fault_Type;

data Message  --messages displayed on control panel 
  properties
    BLESS::Typed=>"message";
end Message;
  
data Sound  --sounds made by control panel 
  properties
    BLESS::Typed=>"enumeration(Silence,Beep)";
end Sound;

data Pumping_Mode
  properties
    BLESS::Typed=>"enumeration (Off,KVO,Patient_Bolus,Clinician_Bolus,Basal)";
    Data_Model::Data_Representation => Enum;
    Data_Model::Enumerators => ("Off","KVO","Patient_Bolus","Clinician_Bolus","Basal");
end Pumping_Mode;

--	data Milliliter
--	properties
--		BLESS::Typed=>"integer 0 .. 1000 units ml";
--		Data_Model::Data_Representation => Integer;
--		Data_Model::Base_Type => (classifier (Base_Types::Unsigned_16)); --two bytes for 0-1000 ml
--		Data_Model::Integer_Range => 0 .. 1000;
--		Data_Model::Measurement_Unit => "ml";
--	end Milliliter;
--
--	data Milliliter_Per_Hour
--	properties
--		BLESS::Typed=>"integer 0..1000 units ml_per_hr";
--		Data_Model::Data_Representation => Integer;
--		Data_Model::Base_Type => (classifier (Base_Types::Unsigned_16)); --two bytes for 0-1000 ml/hr
--		Data_Model::Integer_Range => 0 .. 1000;
--		Data_Model::Measurement_Unit => "ml_per_hr";
--	end Milliliter_Per_Hour;
--
--	data Microliter_Per_Hour
--	properties
--		BLESS::Typed=>"integer 0..1000 units ul_per_hr";
--		Data_Model::Data_Representation => Integer;
--		Data_Model::Base_Type => (classifier (Base_Types::Unsigned_16)); --two bytes for 0-1000 ul/hr
--		Data_Model::Integer_Range => 0 .. 1000;
--		Data_Model::Measurement_Unit => "ul_per_hr";
--	end Microliter_Per_Hour;

--	data Minute
--	properties
--		BLESS::Typed=>"integer 0..1000 units min";
--		Data_Model::Data_Representation => Integer;
--		Data_Model::Base_Type => (classifier (Base_Types::Unsigned_16)); --two bytes for 0-1000 minutes
--		Data_Model::Integer_Range => 0 .. 1000;
--		Data_Model::Measurement_Unit => "min";
--	end Minute;

	data Pulse_Rate
	properties
		BLESS::Typed=>"quantity ppm";
		Data_Model::Data_Representation => Integer;
		Data_Model::Base_Type => (classifier (Base_Types::Unsigned_16)); --two bytes for 0-1000 ppm
		Data_Model::Integer_Range => 0 .. 1000;
		Data_Model::Measurement_Unit => "ppm";
	end Pulse_Rate;

	data Alarm_Inactivation --according to IEC 60601-1-8/FDIS AAA.201.8 ALARM SIGNAL inactivation states
	properties
	  BLESS::Typed => "alarm_inactivation";
		Data_Model::Data_Representation => Enum;
		Data_Model::Enumerators => ("On", "Alarm_Off", "Alarm_Paused", "Audio_Off", "Audio_Paused");
	end Alarm_Inactivation;

	data Percent
	properties
		BLESS::Typed=>"percent";
		Data_Model::Data_Representation => Integer;
		Data_Model::Base_Type => (classifier (Base_Types::Unsigned_8)); --one byte for 0-100 percent
		Data_Model::Integer_Range => 0 .. 100;
--		IEEE11073_Nomenclature::OID => IEEE11073_Nomenclature::MDC_DIM_PERCENT;
	end Percent;

	data Minute_Count extends Base_Types::Integer
	end Minute_Count;

	data Second_Count extends Base_Types::Integer
	end Second_Count;

	data PKI_name --name presented to public-key infrastructure

	end PKI_name;

	data PKI_key --key matching name from public-key infrastructure

	end PKI_key;


end iPCA_Types;
