package iPCA_Communication
public
	with Comm;

	system iPCA_Communication extends Comm::Communications
	end iPCA_Communication;

	system implementation iPCA_Communication.i extends Comm::Communications.i
		subcomponents
			network_controller: refined to process iPCA_Network_Controller.i;
		properties
			Classifier_Substitution_Rule => Type_Extension;
	end iPCA_Communication.i;

	process iPCA_Network_Controller extends Comm::Network_Controller
	end iPCA_Network_Controller;

	process implementation iPCA_Network_Controller.i extends Comm::Network_Controller.i
		subcomponents
			nit: refined to thread iPCA_Network_Interface_Thread.i;
	  properties
			Classifier_Substitution_Rule => Type_Extension;
	end iPCA_Network_Controller.i;

	thread iPCA_Network_Interface_Thread extends Comm::Network_Interface_Thread
	end iPCA_Network_Interface_Thread;

	thread implementation iPCA_Network_Interface_Thread.i  extends Comm::Network_Interface_Thread.i
  end iPCA_Network_Interface_Thread.i;


--old network interface ports:
--					--from network:  danger detected-stop pumping
--			infusion_flow_rate: in data port iPCA_Types::Flow_Rate --rate to pump
--			{BLESS::Assertion => "<<:=PUMP_RATE()>>";};
--					--from prescription checker
--			patient_bolus_rate: in data port iPCA_Types::Flow_Rate {BLESS::Assertion => "<<:=PATIENT_BOLUS_RATE>>";};
--			square_bolus_rate: in data port iPCA_Types::Flow_Rate {BLESS::Assertion => "<<:=SQUARE_BOLUS_RATE>>";};
--			basal_rate: in data port iPCA_Types::Flow_Rate {BLESS::Assertion => "<<:=BASAL_RATE>>";};
--			vtbi: in data port iPCA_Types::Drug_Volume;
--					--from patient bolus checker
--			door_open: in data port Base_Types::Boolean;
--					--control panel
----    pause_infusion: in event port;
----    resume_infusion: in event port;
--			alarm_inactivation: in data port iPCA_Types::Alarm_Signal; --"On","Alarm_Off","Alarm_Paused","Audio_Off","Audio_Paused"
--					--from Max_Drug_Per_Hour_Watcher
----    Near_Max_Drug_Per_Hour: in event port  --near maximum drug infused in any hour
----      {BLESS::Assertion => "<<PATIENT_NEAR_MAX_DRUG_PER_HOUR()>>";};  
--			network_stop_pump: out event port;
--					--signals received by rate controller, or control panel
--					--pump control
--			prescription_okay: in event port --the prescription approved for infusion
--			{BLESS::Assertion => "<<Rx_APPROVED()>>";};
--			patient_request_not_too_soon: in event port {BLESS::Assertion => "<<PATIENT_REQUEST_NOT_TOO_SOON(now)>>";};
--			patient_request_too_soon: in event port {BLESS::Assertion => "<<PATIENT_REQUEST_TOO_SOON(now)>>";};
--					--from safety
--			hw_detected_failure: in event port;
--			stop_pumping_completely: in event port; --stop the pump
--			pump_at_KVO_rate: in event port; --keep vein open    
--			cp_clinician_request_bolus: in event port; --square bolus request from control panel
--			halt_infusion: in event port; --clinician pressed "stop" button
--			begin_infusion: in event port; --clinician pressed "start" button   
----    begin_priming: in event port;       --clinician pressed "prime" button 
----    end_priming: in event port;         --clinician pressed "off" button  
--			over_max_drug_per_hour: in event port --over maximum drug infused in any hour
--			{BLESS::Assertion => "<<PATIENT_OVER_MAX_DRUG_PER_HOUR()>>";};
--			Alarm: in event data port iPCA_Types::Alarm_Type; --alarm indication
--			Warning: in event data port iPCA_Types::Warning_Type; --warning indication
--					--reservoir
--			cp_bolus_duration: in event data port Physical_Types::Minute;
	
end iPCA_Communication;