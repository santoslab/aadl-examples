--iPCA_Safety_Subsystem.aadl

package iPCA_Safety_Subsystem
  public
  with
    Safety,  --generic safety subsystem
    EMV2,		--error model properties
--    PCA_Error_Model,
--    Base_Types,	--predeclared AADL data types
    BLESS,		--BLESS property types
    Safety,   --platform safety subsystem
    iPCA_Feature_Groups,
    iPCA_Properties,  --pca pump properties
    iPCA_Types,		--package holding types used only by this PCA pump model
    iPCA_Hardware,
--    iPCA_Medical_Device,
    Base_Types;            --main architecture package
--  PFT renames data PCA_Types::Pump_Fault_Type; 

flag renames data Base_Types::Boolean;
 

system iPCA_Safety extends Safety::Safety  
end iPCA_Safety;

system implementation iPCA_Safety.i extends Safety::Safety.i
	subcomponents
	--use generic LED, fault logger, and error detector, for now
     alarm_process : refined to process PCA_Alarm_Process.i;  --detects hazardous conditions
     error_detect : refined to device iPCA_Hardware::iPCA_Error_Detector.i;  
  annex EMV2 {**
    use types ErrorLibrary, iPCA_Error_Model;
    use behavior iPCA_Error_Model::CompositeFailUndetected; 	
  	composite error behavior
  	states
  	  fd : [error_detect.failed_detected {POSTdetectedFault,ThreadFault}]->failed;
  	  fu : [error_detect.failed_undetected {UndetectedFault}]->undetected_failure;
  	end composite;
  **};
end iPCA_Safety.i;
 
process PCA_Alarm_Process extends Safety::Alarm_Process
	features
    to_peripherals : refined to feature group 
       iPCA_Feature_Groups::Safety_Peripherals_iPCA;  --communicate with sensors/actuators
  	from_operation:  refined to feature group inverse of 
  	   iPCA_Feature_Groups::Operation_Safety_iPCA;      --communicate with operation subsystem
	  from_power: refined to feature group inverse of 
	     iPCA_Feature_Groups::Power_Safety_iPCA;               --communicate with power subsystem
-- use report_hazard without refinement
--	  report_hazard : out event data port Error_Indication.software;       --record hazard detected by software
    send_alarm : refined to feature group iPCA_Feature_Groups::Alarm_iPCA;                                --alarm or warning for clinician
    report_hazard : refined to out event data port iPCA_Types::Fault_Record;
	properties
		Classifier_Substitution_Rule => Type_Extension;
end PCA_Alarm_Process;

process implementation PCA_Alarm_Process.i
		subcomponents
			alarm_thr: thread Alarm_Thread.i;
			flow_rate: thread Flow_Rate_Checker.i;
		connections
				--alarms
			alr: port alarm_thr.alarm -> send_alarm.alarm;
			war: port alarm_thr.warning -> send_alarm.warning;
			spc: port alarm_thr.stop_pumping_completely -> to_peripherals.Halt;
					--directives to operation
			pkvo: port alarm_thr.pump_at_KVO_rate -> from_operation.pump_at_KVO_rate;
					--warning from operation 
			mdw: port from_operation.over_max_drug_per_hour -> alarm_thr.max_dose_warning;
			hlv: port from_operation.hard_limit_violated -> alarm_thr.hard_limit_violation;
					--errors from fluid subsystem
			er: port to_peripherals.Empty_Reservoir -> alarm_thr.empty_res;
			lr: port to_peripherals.Low_Reservoir -> alarm_thr.low_res;
			ph: port to_peripherals.Pump_Too_Hot -> alarm_thr.pump_hpt;
			uso: port to_peripherals.upstream_occlusion -> alarm_thr.upstream_occlusion;
			dso: port to_peripherals.downstream_occlusion -> alarm_thr.downstream_occlusion;
			bub: port to_peripherals.bubble -> alarm_thr.bubble;
					--errors from operation
			pf: port from_operation.priming_failure -> alarm_thr.priming_failure;
			dnl: port from_operation.drug_not_in_library -> alarm_thr.drug_not_in_library;
					--electrical
			db: port from_power.defective_btty -> alarm_thr.defective_btty;
			lb: port from_power.low_battery_warning -> alarm_thr.low_battery_warning;
			voo: port from_power.voltage_oor -> alarm_thr.voltage_oor;
					--log faults
			lf: port alarm_thr.log_fault -> report_hazard;
					--flow rate check
			ifr: port from_operation.infusion_flow_rate -> flow_rate.infusion_flow_rate;
			ufr: port to_peripherals.Upstream_Flow_Rate -> flow_rate.Upstream_Flow_Rate;
			dfr: port to_peripherals.Downstream_Flow_Rate -> flow_rate.Downstream_Flow_Rate;
			baso: port flow_rate.basal_overinfusion -> alarm_thr.basal_overinfusion;
			bolo: port flow_rate.bolus_overinfusion -> alarm_thr.bolus_overinfusion;
			sbo: port flow_rate.square_bolus_overinfusion -> alarm_thr.square_bolus_overinfusion;
			basu: port flow_rate.basal_underinfusion -> alarm_thr.basal_underinfusion;
			bolu: port flow_rate.bolus_underinfusion -> alarm_thr.bolus_underinfusion;
			sbu: port flow_rate.square_bolus_underinfusion -> alarm_thr.square_bolus_underinfusion;
			pr: port from_operation.Pumping_Mode -> flow_rate.Pumping_Mode;
			doo: port to_peripherals.door_open -> alarm_thr.door_open;
					--control panel
			cpra: port from_operation.cp_reset_alarm -> alarm_thr.cp_reset_alarm;
					--security
			secf: port from_operation.security_fault -> alarm_thr.security_fault;
--the alarm process is working if the alarm thread is working
			aiat: port alarm_inactivation -> alarm_thr.alarm_inactivation;
			pmat: port peripheral_malfunction -> alarm_thr.peripheral_malfunction;
end PCA_Alarm_Process.i;

--R5.4.0(1) issue alarms and warnings
--R5.4.0(8) pump overheated alarm
--R5.4.1(1) priority
--R5.4.1(2) alarm pump rate
--R6.2.0(3) air-in-line alarm
--R6.2.0(4) upstream occlusion alarm 
--R6.2.0(5) downstream occlusion alarm 
--R6.2.0(6) occlusion alarm
--R6.2.0(7) empty-reservoir alarm 
--R6.4.0(6) unmasked faults
thread Alarm_Thread
  features
  --alarms to control panel
    alarm: out event data port iPCA_Types::Alarm_Type  --alarm to control panel
      {BLESS::Assertion=>"<<:=ALARM_TYPE()>>";};  --reference Assertion enumeration
    warning: out event data port iPCA_Types::Warning_Type  --warning to control panel
      {BLESS::Assertion=>"<<:=WARNING_TYPE()>>";};  --reference Assertion enumeration
  --directives to Rate_Controller
    stop_pumping_completely: out event port  --tell infusion thread to stop the pump
      {BLESS::Assertion=>"<<STOP_PUMP()>>";};  --conditions to stop pumping
    pump_at_KVO_rate: out event port  --tell infusion thread to keep vein open 
      {BLESS::Assertion=>"<<PUMP_KVO()>>";};  --conditions to pump at KVO rate
  --from Max_Drug_Per_Hour_Watcher
    max_dose_warning: in event port  --maximum drug allowed (over time) during bolus infusion
       {BLESS::Assertion=>"<<MAX_DOSE_WARNING>>";};
  --from Prescription_Checker
    hard_limit_violation: in event port  --prescription exceeds hard limit in drug library
       {BLESS::Assertion=>"<<HARD_LIMIT_VIOLATED>>";};
  --from Fluid
    empty_res: in event port  --no drug left
       {BLESS::Assertion=>"<<EMPTY_RESERVOIR>>";};
    low_res: in event port --little drug left
       {BLESS::Assertion=>"<<LOW_RESERVOIR>>";};
    pump_hpt:  in event port  --pump over temperature
       {BLESS::Assertion=>"<<PUMP_OVERHEATED>>";};
    upstream_occlusion:  in event port  
       {BLESS::Assertion=>"<<UPSTREAM_OCCLUSION>>";};
    downstream_occlusion:  in event port  --pump over temperature
       {BLESS::Assertion=>"<<DOWNSTREAM_OCCLUSION>>";};     
    bubble: in event port; 
 		alarm_inactivation : in data port flag;  --user suspends alarms
    peripheral_malfunction : in data port flag;  --peripheral detected malfunction	
 --NEED TO ADD door_open TO BLESS STATE MACHINE  
    door_open:  in data port flag --reservoir door is open
       {BLESS::Assertion=>"<<DOOR_OPEN>>";};     
  --from Boss
    priming_failure: in event port  --priming failure indication
       {BLESS::Assertion=>"<<PRIME_FAIL>>";};
    cp_reset_alarm: in event port  --control panel reset alarm(s)
       {BLESS::Assertion=>"<<NO_ALARM and NO_WARNING>>";};
  --from Drug_Library
    drug_not_in_library: in event port  --null drug record returned from drug library
        {BLESS::Assertion=>"<<DRUG_NOT_IN_LIBRARY>>";};
  --from power_control
    defective_btty: in event port  --dead battery
       {BLESS::Assertion=>"<<DEFECTIVE_BATTERY>>";};
    low_battery_warning: in event port --little battery energy left
       {BLESS::Assertion=>"<<LOW_BATTERY>>";};
    voltage_oor: in event port  --power supply voltage out-of-range
       {BLESS::Assertion=>"<<VOLTAGE_OOR>>";};
  --from flow rate checker
    basal_overinfusion: in event port  
       {BLESS::Assertion=>"<<BASAL_OVERINFUSION>>";}; 
    bolus_overinfusion: in event port  
       {BLESS::Assertion=>"<<BOLUS_OVERINFUSION>>";}; 
    square_bolus_overinfusion: in event port  
       {BLESS::Assertion=>"<<SQUARE_OVERINFUSION>>";};
    basal_underinfusion: in event port  
       {BLESS::Assertion=>"<<BASAL_UNDERINFUSION>>";};
    bolus_underinfusion: in event port  
       {BLESS::Assertion=>"<<BOLUS_UNDERINFUSION>>";};
    square_bolus_underinfusion: in event port  
       {BLESS::Assertion=>"<<SQUARE_UNDERINFUSION>>";};
  --from security
    security_fault: in event port;
  --from control_panel
--    Input_Needed: in event port  
--       {BLESS::Assertion=>"<<INPUT_NEEDED>>";};
--    Long_Pause: in event port  
--       {BLESS::Assertion=>"<<LONG_PAUSE>>";}; 
  --log faults
    log_fault: out event data port iPCA_Types::Fault_Record
       {BLESS::Assertion=>"<<:=(alarm=>currentAlarm;warning=>currentWarning;occurrence_time=>now;)>>";};   
  properties
    Thread_Properties::Dispatch_Protocol=>Aperiodic;  
end Alarm_Thread;

thread implementation Alarm_Thread.i
annex BLESS
{**
  invariant <<true>>	
  variables
    currentAlarm : iPCA_Types::Alarm_Type := No_Alarm;
    currentWarning : iPCA_Types::Warning_Type := No_Warning; 
    faultRecord : iPCA_Types::Fault_Record;
  states
    start: initial state <<(currentAlarm=No_Alarm) and (currentWarning=No_Warning)
       and NO_ALARM and NO_WARNING>>;
    normal: complete state <<(currentAlarm=No_Alarm) and (currentWarning=No_Warning)>>;
    max_dose: complete state <<currentWarning=over_max_drug_per_hour>>;
    hard_limit: complete state <<currentWarning=hard_limit_violated>>;
    empty: complete state <<currentAlarm=Empty_Reservoir>>;
    low: complete state <<currentWarning=Low_Reservoir>>;
    prime_fail: complete state <<currentWarning=Priming_Failure>>;
    pump_hot: complete state <<currentAlarm=Pump_Overheated>>;
    btty: complete state <<(currentAlarm=Defective_Battery) or (currentAlarm=Low_Battery)>>;
    done : final state;
  transitions
  go:   --initial transition
    start -[ ]-> normal{alarm!(No_Alarm) & warning!(No_Warning)};
  md:   --maximum dose warning; stop infusion
    normal -[on dispatch max_dose_warning ]-> max_dose
    {  currentWarning:=over_max_drug_per_hour 
    	<<currentWarning=over_max_drug_per_hour>>
    &	warning!(over_max_drug_per_hour) 
        <<true>> 
--commented out to avoid a sticky issue with generated proof obligations for port output of records    
--    &	log_fault!((alarm=>currentAlarm; warning=>over_max_drug_per_hour; occurrence_time=>now;))	
    &  pump_at_KVO_rate!  --stop infusion->keep vein open rate
        <<true>>
    };
  hlv:   --hard limit violated; prevent infusion
    normal -[on dispatch hard_limit_violation ]-> hard_limit
    {  currentWarning:=hard_limit_violated 
    	<<currentWarning=hard_limit_violated>>
    &	warning!(hard_limit_violated)  
        <<true>> 
 --   &	log_fault!((alarm=>currentAlarm; warning=>hard_limit_violated; occurrence_time=>now;))
    };
  er:   --empty reservoir; stop infusion
    normal -[on dispatch empty_res ]-> empty
    {  currentAlarm:=Empty_Reservoir
    	<<currentAlarm=Empty_Reservoir>> 
    &	alarm!(Empty_Reservoir)  
        <<true>> 
--    &	log_fault!((alarm=>Empty_Reservoir; warning=>currentWarning; occurrence_time=>now;))
    &  stop_pumping_completely!  --stop infusion
        <<true>> 
    };
  lr:   --low reservoir; just warning
    normal -[on dispatch low_res ]-> low
    {  currentWarning:=Low_Reservoir 
    	<<currentWarning=Low_Reservoir>>
    &	warning!(Low_Reservoir)    
        <<true>> 
--    &	log_fault!((alarm=>currentAlarm; warning=>Low_Reservoir; occurrence_time=>now;))
    };
  pf:   --priming failure
    normal -[on dispatch priming_failure ]-> prime_fail
    {  currentWarning:=Priming_Failure 
    	<<currentWarning=Priming_Failure>>
    &	warning!(Priming_Failure)  
        <<true>> 
--    &	log_fault!((alarm=>currentAlarm; warning=>Priming_Failure; occurrence_time=>now;))
    };
  ph:   --pump too hot
    normal -[on dispatch pump_hpt ]-> pump_hot
    {  currentAlarm:=Pump_Overheated 
    	<<currentAlarm=Pump_Overheated>>
    &	alarm!(Pump_Overheated)  
        <<true>> 
--    &	log_fault!((alarm=>Pump_Overheated; warning=>currentWarning; occurrence_time=>now;))
    &  stop_pumping_completely!  --stop infusion
        <<true>> 
    };
  d:   --battery problem
    normal -[on dispatch defective_btty ]-> btty
    {  currentAlarm:=Defective_Battery 
    	<<currentAlarm=Defective_Battery>>
    &	alarm!(Defective_Battery)  
        <<true>> 
--    &	log_fault!((alarm=>Battery_Depleted; warning=>currentWarning; occurrence_time=>now;))
    &  stop_pumping_completely!  --stop infusion
        <<true>> 
    };
  btlo:   --battery low
    normal -[on dispatch low_battery_warning ]-> btty
    {  currentAlarm:=Low_Battery 
    	<<currentAlarm=Low_Battery>>
    &	alarm!(Low_Battery)  
        <<true>> 
--    &	log_fault!((alarm=>Battery_Depleted; warning=>currentWarning; occurrence_time=>now;))
    &  pump_at_KVO_rate!  --stop infusion->keep vein open rate
        <<true>> 
    };
    
  reset:  --clear alarm and warning
    max_dose,hard_limit,empty,low,prime_fail,pump_hot,btty
       -[on dispatch cp_reset_alarm]-> normal
    {  currentWarning:=No_Warning
    	<<currentWarning=No_Warning>>
    &  warning!(No_Warning)
        <<true>> 
    &  currentAlarm:=No_Alarm
        <<currentAlarm=No_Alarm>>
    &  alarm!(No_Alarm)
        <<true>> 
--    &	log_fault!((alarm=>currentAlarm; warning=>No_Warning; occurrence_time=>now;))
    };
  quit: normal -[ on dispatch stop ]-> done{};
**};

annex EMV2 
{**
  use types ErrorLibrary, iPCA_Error_Model;
  --when the alarm thread fails, it stops
  use behavior iPCA_Error_Model::FailStop; 	
  error propagations
    --no alarm, false alarm to control panel
    alarm: out propagation {DoMissQuit};
    --same thing for warnings
    warning: out propagation {DoMissQuit};
    --bad stop-pump decision, missed-alarm/false-alarm
    stop_pumping_completely: out propagation {DoMissQuit};
    --bad KVO decision, missed-alarm/false-alarm
    pump_at_KVO_rate: out propagation {DoMissQuit};
    --incorrect warnings from alarm thread
    max_dose_warning: in propagation {DoMissQuit};
    hard_limit_violation: in propagation {DoMissQuit};
    --incorrect reservoir warnings
    empty_res: in propagation {DoMissQuit};
    low_res: in propagation {DoMissQuit};
    --incorrect pump fault indication
    priming_failure: in propagation {DoMissQuit};
    pump_hpt: in propagation {DoMissQuit};
    --incorrect drug in library indication
    drug_not_in_library: in propagation {DoMissQuit};
    --incorrect battery fault indication    
    defective_btty: in propagation {DoMissQuit};
    low_battery_warning: in propagation {DoMissQuit};
    --may send (or miss) bad error log reports
    log_fault: out propagation {DoMissQuit};
  flows
    --alarm thread fails-silent
--    ice_alarm_fail_silent: error source alrm{EarlyServiceTermination} when failed;	
    panel_alarm_fail_silent: error source alarm{EarlyServiceTermination} when failed;	
    panel_warning_fail_silent: error source warning{EarlyServiceTermination} when failed;	
    log_fault_fail_silent: error source log_fault{EarlyServiceTermination} when failed;	
    stop_pump_fail_silent: error source stop_pumping_completely{EarlyServiceTermination} when failed;	
    kvo_fail_silent: error source pump_at_KVO_rate{EarlyServiceTermination} when failed;	
    --max dose warning
--    mdw_ice: error path over_max_drug_per_hour->alrm;
    mdw_cpa: error path max_dose_warning->alarm;
    mdw_cpw: error path max_dose_warning->warning;
    mdw_spc: error path max_dose_warning->stop_pumping_completely;
    mdw_kvo: error path max_dose_warning->pump_at_KVO_rate;
    mdw_lf: error path max_dose_warning->log_fault;
    --hard limit violated
--    hlv_ice: error path hard_limit_violated->alrm;
    hlv_cpa: error path hard_limit_violation->alarm;
    hlv_cpw: error path hard_limit_violation->warning;
    hlv_spc: error path hard_limit_violation->stop_pumping_completely;
    hlv_kvo: error path hard_limit_violation->pump_at_KVO_rate;
    hlv_lf: error path hard_limit_violation->log_fault;
    --empty reservoir
--    er_ice: error path empty_res->alrm;
    er_cpa: error path empty_res->alarm;
    er_cpw: error path empty_res->warning;
    er_spc: error path empty_res->stop_pumping_completely;
    er_kvo: error path empty_res->pump_at_KVO_rate;
    er_lf: error path empty_res->log_fault;
    --low reservoir
--    lr_ice: error path low_res->alrm;
    lr_cpa: error path low_res->alarm;
    lr_cpw: error path low_res->warning;
    lr_spc: error path low_res->stop_pumping_completely;
    lr_kvo: error path low_res->pump_at_KVO_rate;
    lr_lf: error path low_res->log_fault;
    --priming failure
--    pf_ice: error path priming_failure->alrm;
    pf_cpa: error path priming_failure->alarm;
    pf_cpw: error path priming_failure->warning;
    pf_spc: error path priming_failure->stop_pumping_completely;
    pf_kvo: error path priming_failure->pump_at_KVO_rate;
    pf_lf: error path priming_failure->log_fault;
    --pump too hot
--    pf_ice: error path pump_hpt->alrm;
    ph_cpa: error path pump_hpt->alarm;
    ph_cpw: error path pump_hpt->warning;
    ph_spc: error path pump_hpt->stop_pumping_completely;
    ph_kvo: error path pump_hpt->pump_at_KVO_rate;
    ph_lf: error path pump_hpt->log_fault;
    --drug library
--    dl_ice: error path drug_not_in_library->alrm;
    dl_cpa: error path drug_not_in_library->alarm;
    dl_cpw: error path drug_not_in_library->warning;
    dl_spc: error path drug_not_in_library->stop_pumping_completely;
    dl_kvo: error path drug_not_in_library->pump_at_KVO_rate;
    dl_lf: error path drug_not_in_library->log_fault;
    --defective battery
--    db_ice: error path Defective_Battery->alrm;
    db_cpa: error path defective_btty->alarm;
    db_cpw: error path defective_btty->warning;
    db_spc: error path defective_btty->stop_pumping_completely;
    db_kvo: error path defective_btty->pump_at_KVO_rate;
    db_lf: error path defective_btty->log_fault;
    --low battery
--    lb_ice: error path Low_Battery->alrm;
    lb_cpa: error path low_battery_warning->alarm;
    lb_cpw: error path low_battery_warning->warning;
    lb_spc: error path low_battery_warning->stop_pumping_completely;
    lb_kvo: error path low_battery_warning->pump_at_KVO_rate;
    lb_lf: error path low_battery_warning->log_fault;
  end propagations;
  properties
    EMV2::OccurrenceDistribution => iPCA_Properties::AlarmThreadFailureRate 
      applies to fail;
**};  --end of EMV2
end Alarm_Thread.i;

--R5.4.0(2) basal over-infusion alarm
--R5.4.0(3) basal under-infusion warning 
--R5.4.0(4) bolus over-infusion alarm
--R5.4.0(5) bolus under-infusion warning 
--R5.4.0(6) square bolus over-infusion alarm 
--R5.4.0(7) square bolus under-infusion warning 
--check for flow rate errors
thread Flow_Rate_Checker
  features
  --flow information
    infusion_flow_rate: in data port iPCA_Types::Flow_Rate;  --intended
    upstream_flow_rate: in data port iPCA_Types::Flow_Rate;  --measured
    downstream_flow_rate: in data port iPCA_Types::Flow_Rate;  --measured 
    pumping_mode : in data port iPCA_Types::Pumping_Mode;  --off,KVO,patient-bolus,priming,clinician-bolus   
  --errors detected
    basal_overinfusion: out event port  
       {BLESS::Assertion=>"<<BASAL_OVERINFUSION>>";}; 
    bolus_overinfusion: out event port  
       {BLESS::Assertion=>"<<BOLUS_OVERINFUSION>>";}; 
    square_bolus_overinfusion: out event port  
       {BLESS::Assertion=>"<<SQUARE_OVERINFUSION>>";};
    basal_underinfusion: out event port  
       {BLESS::Assertion=>"<<BASAL_UNDERINFUSION>>";};
    bolus_underinfusion: out event port  
       {BLESS::Assertion=>"<<BOLUS_UNDERINFUSION>>";};
    square_bolus_underinfusion: out event port  
       {BLESS::Assertion=>"<<SQUARE_UNDERINFUSION>>";};
  properties
    Dispatch_Protocol => Periodic;
    Period => iPCA_Properties::PCA_Period;
end Flow_Rate_Checker;

--THIS IS A GOOD OPPORTUNITY TO WRITE AND PROVE BLESS BEHAVIOR
thread implementation Flow_Rate_Checker.i
end Flow_Rate_Checker.i;


end iPCA_Safety_Subsystem;