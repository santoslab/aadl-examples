--CPAL.aadl

--Cyber Physical Access Layer


package CPAL
public
  with Platform_Properties, Base_Types, FG
  ;


flag renames data Base_Types::Boolean;

--AADL control of GPIO pins

--GPIO_Control allows AADL components to control GPIO pins of the platform
--properties set in containing system implementation
--for demonstration platform:
--Platform_Properties::GPIO_Input_Output => "UUUUUUUUOOUUIIII";  pins 8&9 are output controlling stepper motor, pins 12-15 are inputs
--Platform_Properties::GPIO_Active_Level => "UUUUUUUUHHUUHHHH"; active high (H), low (L), or unused (U)
--Platform_Properties::GPIO_Irq_Trigger =>  "UUUUUUUUUUUUBBBB"; cause event when input changes
	thread GPIO_Control
		features
		--sixteen inputs, those unused leave unconnected
		  i0: in event data port flag;
		  i1: in event data port flag;
		  i2: in event data port flag;
		  i3: in event data port flag;
		  i4: in event data port flag;
		  i5: in event data port flag;
		  i6: in event data port flag;
		  i7: in event data port flag;
		  i8: in event data port flag;
		  i9: in event data port flag;
		  i10: in event data port flag;
		  i11: in event data port flag;
		  i12: in event data port flag;
		  i13: in event data port flag;
		  i14: in event data port flag;
		  i15: in event data port flag;
		--sixteen outputs, those unused leave unconnected
		  o0: out event data port flag;
		  o1: out event data port flag;
		  o2: out event data port flag;
		  o3: out event data port flag;
		  o4: out event data port flag;
		  o5: out event data port flag;
		  o6: out event data port flag;
		  o7: out event data port flag;
		  o8: out event data port flag;
		  o9: out event data port flag;
		  o10: out event data port flag;
		  o11: out event data port flag;
		  o12: out event data port flag;
		  o13: out event data port flag;
		  o14: out event data port flag;
		  o15: out event data port flag;
	
	end GPIO_Control;
	
--this mediates control between safety and operations giving safety override capability
thread CPAL_Mediator
  features 
	  halt : in event port;  --halt medical device operation on safety command 
    malfunction : out data port flag;  --hardware detected malfunction, such as pump overheating
    from_safety : feature group inverse of FG::Safety_Peripherals;  --from safety subsystem
    from_operation : feature group inverse of FG::Operation_Peripherals;  --from operation subsystem
    --add interface to individual device drivers here
--    driver_control : feature group FG::Driver_Control;
end CPAL_Mediator;

thread Device_Driver
	features
	  driver_control : feature group inverse of FG::Driver_Control;
end Device_Driver;
	
	
--Cyber-Physical System Abstraction Layer
--holds back-end of device drivers	
process CPAL_Server_Process
  features 
	  halt : in event port;  --halt medical device operation on safety command 
    malfunction : out data port flag;  --hardware detected malfunction, such as pump overheating
    from_safety : feature group inverse of FG::Safety_Peripherals;  --from safety subsystem
    from_operation : feature group inverse of FG::Operation_Peripherals;  --from operation subsystem
  properties
    Platform_Properties::Name => "cpal-server";
end CPAL_Server_Process;

--inside this put one thread to control each device (its driver)
process implementation CPAL_Server_Process.i
	subcomponents
	  mediator : thread CPAL::CPAL_Mediator;
	  gpio : thread CPAL::GPIO_Control;
	--add Device_Driver thread for each device here
	connections
  --to mediator
	  h : port halt -> mediator.halt;
	  m : port mediator.malfunction -> malfunction;
	  fs : feature group from_safety <-> mediator.from_safety;
	  fo : feature group from_operation <-> mediator.from_operation;	  
  --connect control of each driver to mediator's driver_control feature group array	
end CPAL_Server_Process.i;

--this is the CPAL device driver
--it will be implemented with Genode
--extend this to have the logical features you need for your functional architecture
--reference it as an Actual_Function_Binding
thread CPAL_Device_Driver
--properties tell Platform how to use a Genode driver for it
end CPAL_Device_Driver;


--use this to simulate devices during development
process implementation CPAL_Server_Process.simulation
	subcomponents
	  mediator : thread CPAL::CPAL_Mediator;
	--add a simulator (fake Device_Driver thread) for each device here
	connections
  --to mediator
	  h : port halt -> mediator.halt;
	  m : port mediator.malfunction -> malfunction;
	  fs : feature group from_safety <-> mediator.from_safety;
	  fo : feature group from_operation <-> mediator.from_operation;	  
  --connect control of each simulator to mediator's driver_control feature group array	
end CPAL_Server_Process.simulation;

--example to make diagram
process implementation CPAL_Server_Process.example
	subcomponents
	  mediator : thread CPAL::CPAL_Mediator;
	  button_driver : thread CPAL::Device_Driver;
	  pump_driver : thread CPAL::Device_Driver;
	  upstream_driver : thread CPAL::Device_Driver;
	connections
  --to mediator
	  h : port halt -> mediator.halt;
	  m : port mediator.malfunction -> malfunction;
	  fs : feature group from_safety <-> mediator.from_safety;
	  fo : feature group from_operation <-> mediator.from_operation;	  
--	--connection to individual elements of feature arrays is not supported in AADL V2
--    bd : feature group mediator.driver_control[1] <-> button_driver.driver_control;
--    pd : feature group mediator.driver_control[2] <-> button_driver.pump_driver;
--    ud : feature group mediator.driver_control[3] <-> button_driver.upstream_driver;    
end CPAL_Server_Process.example;
	
end CPAL;