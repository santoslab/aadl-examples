--Hardware.aadl
--physical hardware
--everything in bill of materials goes here
--deployed system will refine these with design choices
package Hardware
public
with Buses, --physical connections used on PCB
	FG, --feature groups
	Human_Machine_Interface,
	Abstract_Devices; --AADL abstract components that are refined into devices

--this represents a peripheral connected by GPIO pin(s)
--extend this for each kind of sensor/actuator
--reference this by the Actual_Function_Binding property of the abstract component
--that also references it Genode driver
--put a subcomponent for it in your implementation of Hardware::PCB
device GPIO_Device
	features
		--connection to cpu
		gpio : requires bus access Buses::GPIO;
		power : requires bus access Buses::Power_Supply;
end GPIO_Device;

--printed circuit board with chips and connectors
	system PCB
		features
				--external connection to Ethernet, WiFi, etc.
			ethernet: requires bus access Buses::CAT5;
					--dedicated physical connection for maintenance and trustworthy provisioning
			maintenance_bus: requires bus access Buses::Maintenance_Bus;
			sense: feature group FG::Sensing; --physical input to device
			act: feature group FG::Actuation; --what the device does	
			connectors : feature group FG::External_Connections;  
	end PCB;

--implementation with subcomponents for parts
	system implementation PCB.i
		subcomponents
				--system bus
			main_bus: bus Buses::System_Bus;
					--processor
			cpu: processor CPU.i;
					--maintenance processor
			maintenance: device Maintenance_Processor;
					--network controller
			nic: device NIC;
			    --user interface
			hmi: system Human_Machine_Interface::HMI;
			    --timers
			timers : device Timers;
			    --USB, serial, LVDS
			ebc : device External_Bus_Controller;
--					--display controller
--			dc: device Display_Controller;
--					--touch screen
--			ts: device Touch_Screen;
--					--sound controller
--			sc: device Sound_Controller;
--					--speaker
--			piezo: device Speaker;
--			  --video bus
--			video_bus: bus Buses::Video_Bus;
--			  --audio bus
--			audio_bus: bus Buses::Audio_Bus;
					--security processor (TPM)
--			sp: device Security::Crypto_Processor;
		connections
				--sound and image
			img: port hmi.ui_image -> act.ui_image; --image seen by clinician
			snd: port hmi.ui_sound -> act.ui_sound; --sound made by device
			  --touch
			tch: port sense.ui_touch -> hmi.ui_touch;
					--physical sense and act
--			s: feature group sense <-> sa.sense;
--			a: feature group sa.act <-> act;
					--system bus connections
			pb: bus access main_bus -> cpu.system_bus;
			eb: bus access main_bus -> ebc.system_bus;
--			tb: bus access main_bus -> sp.system_bus;
			nb: bus access main_bus -> nic.system_bus;
			hmib: bus access main_bus -> hmi.system_bus;
			mpb: bus access main_bus -> maintenance.system_bus;
					--ethernet connection
			e: bus access ethernet <-> nic.ethernet;
					--maintenance processor connection
			mc: bus access maintenance_bus -> maintenance.maintenance_bus;
					--security provisioning connection
--			spc: bus access maintenance.provision_bus <-> sp.provision_bus;
	  sb : bus access timers.system_bus -> main_bus;
	  --external buses
	  usb : bus access ebc.usb_bus -> connectors.usb_bus;
	  serial : bus access ebc.serial_bus -> connectors.serial_bus;
	  lvds : bus access ebc.lvds_bus -> connectors.lvds_bus; 
	  vga : bus access hmi.vga_bus -> connectors.vga_bus;
	  hdmi : bus access hmi.hdmi_bus -> connectors.hdmi_bus;
	end PCB.i;


--with power
	system implementation PCB.power extends PCB.i
		subcomponents
				--power supply
			power: system Power;
			  --power distribution
			power_bus: bus Buses::Power_Supply;
		connections
			psb: bus access main_bus -> power.system_bus;
					--power supply
			ps: bus access power.power_supply -> power_bus;
			ps_p: bus access power_bus -> cpu.power_supply;
			ps_mp: bus access power_bus -> maintenance.power_supply;
--			ps_sp: bus access power_bus -> sp.power_supply;
			ps_n: bus access power_bus -> nic.power_supply;
--			ps_sa: bus access power.peripheral_power -> sa.power_supply; --sensors/actuators may need different power	
      ps_ebc : bus access power_bus -> ebc.power_supply;
      ps_hmi : bus access power_bus -> hmi.power_supply;
	end PCB.power;

--with MTM	
	system implementation PCB.mp extends PCB.power
		subcomponents
			--internal maintenance bus
			internal_maintenance_bus: bus Buses::MTM_Bus;
		connections
				--internal maintenance bus
			mym: bus access maintenance.mtm_bus -> internal_maintenance_bus;
			mtm_p: bus access internal_maintenance_bus -> cpu.mtm_bus;
--			mtm_sp: bus access internal_maintenance_bus -> sp.mtm_bus;
			mtm_n: bus access internal_maintenance_bus -> nic.mtm_bus;
--			mtm_sa: bus access internal_maintenance_bus -> sa.mtm_bus;
			mtm_hmi: bus access internal_maintenance_bus -> hmi.mtm_bus;
	end PCB.mp;

	system implementation PCB.clock extends PCB.mp
		subcomponents
				--clock controller
			clock_controller: device Clock_Controller;
		connections
				--clock connections
			pcl: bus access clock_controller.cpu_clock -> cpu.cpu_clock;
			ncl: bus access clock_controller.nic_clock -> nic.nic_clock;
			mpcl: bus access clock_controller.mp_clock -> maintenance.mp_clock;
			dccl: bus access clock_controller.dc_clock -> hmi.dc_clock;
			sccl: bus access clock_controller.sc_clock -> hmi.sc_clock;
	end PCB.clock;

--the processor, as yet undefined which kind	
	processor CPU
		features
				--main system bus
			system_bus: requires bus access Buses::System_Bus;
					--test interface
			mtm_bus: requires bus access Buses::MTM_Bus;
					--connection to peripherals
			gpio: provides bus access Buses::GPIO;
					--clock
			cpu_clock: requires bus access Buses::Clock;
					--power
			power_supply: requires bus access Buses::Power_Supply;
	end CPU;

  processor implementation CPU.i
  	subcomponents
					--memory
			ram: memory RAM;
					--non-volatile memory (flash)
			rom: memory FLASH;  	
  	connections
			mtm_m: bus access mtm_bus -> ram.mtm_bus;
			mtm_f: bus access mtm_bus -> rom.mtm_bus;
			ps_m: bus access power_supply -> ram.power_supply;
			ps_f: bus access power_supply -> rom.power_supply;
			sb_m: bus access system_bus -> ram.system_bus;
			sb_f: bus access system_bus -> rom.system_bus;

		annex EMV2 {**
    use types ErrorLibrary, Platform_Error_Model;
		use behavior ErrorLibrary::FailStop;
		error propagations
			bindings: out propagation {CPUFailure};
			power_supply: in propagation {PowerSupplyFailure};
			system_bus: in propagation {ServiceOmission,EarlyServiceTermination};
			system_bus: out propagation {ServiceOmission};
		flows
			cpu_es: error source bindings {CPUFailure} when FailStop;
			cpu_bus: error path system_bus {ServiceOmission} -> system_bus {ServiceOmission};
		end propagations;
		component error behavior
		  transitions
		    Operational -[power_supply{PowerSupplyFailure}]-> FailStop;
		    Operational -[system_bus{EarlyServiceTermination}]-> FailStop;
			propagations
				FailStop -[]-> bindings {CPUFailure};
		end component;
		composite error behavior
		  states
		   [ram.FailStop or rom.FailStop]->FailStop;
		end composite;
		**};
  end CPU.i;
  
--volatile random access memory
--single-event upset become value error to bindings to RAM
	memory RAM
		features
			system_bus: requires bus access Buses::System_Bus;
			power_supply: requires bus access Buses::Power_Supply;
			mtm_bus: requires bus access Buses::MTM_Bus;
			
		annex EMV2 {**
    use types ErrorLibrary, Platform_Error_Model;
		use behavior ErrorLibrary::FailStop;
		error propagations
			bindings: out propagation {MemoryFailure, ValueError};
			power_supply: in propagation {PowerSupplyFailure};
			system_bus: in propagation {ServiceOmission,EarlyServiceTermination};
			system_bus: out propagation {ServiceOmission};
		flows
			ram_es1: error source bindings {MemoryFailure} when FailStop;
			ram_es2: error source bindings {ValueError} when {SingleEventUpset};
			ram_bus: error path system_bus {ServiceOmission} -> system_bus {ServiceOmission};
		end propagations;
		component error behavior
		  events
		    seu : error event {SingleEventUpset};
		  transitions
		    Operational -[power_supply{PowerSupplyFailure}]-> FailStop;
		    Operational -[system_bus{EarlyServiceTermination}]-> FailStop;
			propagations
			  Operational -[seu {SingleEventUpset}]-> bindings {ValueError};
				FailStop -[]-> bindings {MemoryFailure};
		end component;
		**};
	end RAM;

--non-volatile (FLASH) memory	
	memory FLASH
		features
			system_bus: requires bus access Buses::System_Bus;
			power_supply: requires bus access Buses::Power_Supply;
			mtm_bus: requires bus access Buses::MTM_Bus;
			
		annex EMV2 {**
    use types ErrorLibrary, Platform_Error_Model;
		use behavior ErrorLibrary::FailStop;
		error propagations
			bindings: out propagation {MemoryFailure};
			power_supply: in propagation {PowerSupplyFailure};
			system_bus: in propagation {ServiceOmission,EarlyServiceTermination};
			system_bus: out propagation {ServiceOmission};
		flows
			rom_es: error source bindings {MemoryFailure} when FailStop;
			rom_bus: error path system_bus {ServiceOmission} -> system_bus {ServiceOmission};
		end propagations;
		component error behavior
		  transitions
		    Operational -[power_supply{PowerSupplyFailure}]-> FailStop;
		    Operational -[system_bus{EarlyServiceTermination}]-> FailStop;
			propagations
				FailStop -[]-> bindings {MemoryFailure};
		end component;
		**};
	end FLASH;

--maintenance access 
	device Maintenance_Processor extends Abstract_Devices::Abstract_Maintenance_Processor
--	features
--    maintenance_bus : requires bus access Buses::Maintenance_Bus;	  
--    provision_bus : provides bus access Buses::Provisioning_Bus;	  
--	  system_bus : requires bus access Buses::System_Bus;
--		power_supply : requires bus access Buses::Power_Supply;
--		mp_clock : requires bus access Buses::Clock;
--		mtm_bus : provides bus access Buses::MTM_Bus;
	end Maintenance_Processor;

--Network Interface Chip; Ethernet chip (set)
	device NIC extends Abstract_Devices::Abstract_NIC
--	features
--	  system_bus : requires bus access Buses::System_Bus;
--	  --external connection to Ethernet, WiFi, etc.
--    ethernet : requires bus access Buses::CAT5;
--		power_supply : requires bus access Buses::Power_Supply;
--		nic_clock : requires bus access Buses::Clock;
--		mtm_bus : requires bus access Buses::MTM_Bus;
	end NIC;


--power subsystem
	system Power extends Abstract_Devices::Abstract_Power
--		features
--			power_supply: provides bus access Buses::Power_Supply;
--			system_bus: requires bus access Buses::System_Bus;
--			peripheral_power: provides bus access Buses::Power_Supply;
--			mtm_bus: requires bus access Buses::MTM_Bus;
	end Power;

--clock generator
	device Clock_Controller
		features
				--processor
			cpu_clock: provides bus access Buses::Clock;
					--network controller
			nic_clock: provides bus access Buses::Clock;
					--maintenance processor
			mp_clock: provides bus access Buses::Clock;
					--display controller
			dc_clock: provides bus access Buses::Clock;
					--sound controller
			sc_clock: provides bus access Buses::Clock;
			clk_pwr : requires bus access Buses::Power_Supply;
	end Clock_Controller;

--switch to stand alone mode 
	device stand_alone_switch
		features
--MONITORED VARIABLE
			stand_alone: out data port; --clinician disables ICE interface
--EXTERNAL PHENOMENON
			switch_position: in data port; --physical position of the switch
	end stand_alone_switch;

	device implementation stand_alone_switch.i
--stand-alone switch is error free
	annex EMV2 {
    use types ErrorLibrary;
    error propagations
      switch_position: not in propagation {CommonErrors};
      stand_alone: not out propagation {CommonErrors};
    end propagations;
  **}; --end of EMV2
	end stand_alone_switch.i;

--custom timers
	device Timers extends  Abstract_Devices::Abstract_Timers
--		features
--			system_bus: requires bus access Buses::System_Bus;
--			peripheral_power: requires bus access Buses::Power_Supply;
	end Timers;

device External_Bus_Controller extends Abstract_Devices::Abstract_External_Bus_Controller
end External_Bus_Controller;
	
end Hardware;