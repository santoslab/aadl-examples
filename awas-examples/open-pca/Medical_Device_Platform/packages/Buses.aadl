--Buses.aadl

--bus components in platform

package Buses
public
	
	
--main system bus	
bus System_Bus
	--senders on a system bus can drop a message (ServiceOmission), or stop completely (EarlyServiceTermination)
	--errors are propagated from components with bus access to connections bound to the bus
	--need to send NetworkFailure type when in FailStop state for the bus itself to break
		annex EMV2 {**
			use types ErrorLibrary, Platform_Error_Model;
			use behavior ErrorLibrary::FailStop;
			
			error propagations
				bindings: out propagation {ServiceOmission,EarlyServiceTermination};
				access: in propagation {ServiceOmission,EarlyServiceTermination};
				access: out propagation {ServiceOmission,EarlyServiceTermination};
			flows
				bus_es: error path access {ServiceOmission,EarlyServiceTermination} -> bindings {ServiceOmission,EarlyServiceTermination};
				network_binding_es: error source bindings {EarlyServiceTermination} when {NetworkFailure};
				network_access_es: error source access {EarlyServiceTermination} when {NetworkFailure};
			end propagations;
			component error behavior
			  propagations
			  FailStop -[]-> bindings{EarlyServiceTermination};
			end component;
			properties
				EMV2::OccurrenceDistribution => [ProbabilityValue => 2.5e-5;
					Distribution => Poisson;] applies to network_binding_es.EarlyServiceTermination;
				EMV2::OccurrenceDistribution => [ProbabilityValue => 2.5e-5;
					Distribution => Poisson;] applies to network_access_es.EarlyServiceTermination;
				EMV2::OccurrenceDistribution => [ProbabilityValue => 2.5e-5; Distribution => Poisson;] applies to Failure;
		**};
end System_Bus;
		
--connection between display and its controller
bus Video_Bus
		annex EMV2 {**
			use types ErrorLibrary;			
			error propagations
				bindings: out propagation {ServiceOmission,EarlyServiceTermination};
				access: in propagation {ServiceOmission,EarlyServiceTermination};
				access: out propagation {ServiceOmission,EarlyServiceTermination};
			flows
				bus_es: error path access {ServiceOmission,EarlyServiceTermination} -> bindings {ServiceOmission,EarlyServiceTermination};
			end propagations;
		**};
end Video_Bus;

--connection between speaker and its amplifier
bus Audio_Bus
		annex EMV2 {**
			use types ErrorLibrary;			
			error propagations
				bindings: out propagation {ServiceOmission,EarlyServiceTermination};
				access: in propagation {ServiceOmission,EarlyServiceTermination};
				access: out propagation {ServiceOmission,EarlyServiceTermination};
			flows
				bus_es: error path access {ServiceOmission,EarlyServiceTermination} -> bindings {ServiceOmission,EarlyServiceTermination};
			end propagations;
		**};
end Audio_Bus;

--connection to external ethernet
bus CAT5
		annex EMV2 {**
			use types ErrorLibrary;			
			error propagations
				bindings: out propagation {ServiceOmission,EarlyServiceTermination};
				access: in propagation {ServiceOmission,EarlyServiceTermination};
				access: out propagation {ServiceOmission,EarlyServiceTermination};
			flows
				bus_es: error path access {ServiceOmission,EarlyServiceTermination} -> bindings {ServiceOmission,EarlyServiceTermination};
			end propagations;
		**};
end CAT5;


--connection to external maintenance controller (this may be MTM_Bus, too)
bus Maintenance_Bus
		annex EMV2 {**
			use types ErrorLibrary;			
			error propagations
				bindings: out propagation {ServiceOmission,EarlyServiceTermination};
				access: in propagation {ServiceOmission,EarlyServiceTermination};
				access: out propagation {ServiceOmission,EarlyServiceTermination};
			flows
				bus_es: error path access {ServiceOmission,EarlyServiceTermination} -> bindings {ServiceOmission,EarlyServiceTermination};
			end propagations;
		**};
end Maintenance_Bus;

--Module Test and Maintenance Bus  IEEE 1149.5-1995
--internal maintenance bus
bus MTM_Bus
		annex EMV2 {**
			use types ErrorLibrary;			
			error propagations
				bindings: out propagation {ServiceOmission,EarlyServiceTermination};
				access: in propagation {ServiceOmission,EarlyServiceTermination};
				access: out propagation {ServiceOmission,EarlyServiceTermination};
			flows
				bus_es: error path access {ServiceOmission,EarlyServiceTermination} -> bindings {ServiceOmission,EarlyServiceTermination};
			end propagations;
		**};
end MTM_Bus;

--general purpose input/output
--connection to peripherals
bus GPIO	
		annex EMV2 {**
			use types ErrorLibrary;			
			error propagations
				bindings: out propagation {ServiceOmission,EarlyServiceTermination};
				access: in propagation {ServiceOmission,EarlyServiceTermination};
				access: out propagation {ServiceOmission,EarlyServiceTermination};
			flows
				bus_es: error path access {ServiceOmission,EarlyServiceTermination} -> bindings {ServiceOmission,EarlyServiceTermination};
			end propagations;
		**};
end GPIO;

--clock connection
bus Clock	
		annex EMV2 {**
			use types ErrorLibrary;			
			error propagations
				bindings: out propagation {ServiceOmission,EarlyServiceTermination};
				access: in propagation {ServiceOmission,EarlyServiceTermination};
				access: out propagation {ServiceOmission,EarlyServiceTermination};
			flows
				bus_es: error path access {ServiceOmission,EarlyServiceTermination} -> bindings {ServiceOmission,EarlyServiceTermination};
			end propagations;
		**};
end Clock;
	
--security provisioning
bus Provisioning_Bus	
		annex EMV2 {**
			use types ErrorLibrary;			
			error propagations
				bindings: out propagation {ServiceOmission,EarlyServiceTermination};
				access: in propagation {ServiceOmission,EarlyServiceTermination};
				access: out propagation {ServiceOmission,EarlyServiceTermination};
			flows
				bus_es: error path access {ServiceOmission,EarlyServiceTermination} -> bindings {ServiceOmission,EarlyServiceTermination};
			end propagations;
		**};
end Provisioning_Bus;
	
--power supply
bus Power_Supply	
	--power bus modeled to only propagate power supply failure
	--of course power traces can break, so the power bus itself could be source of error,
	--but we choose to model it more simply
		annex EMV2 {**
			use types Platform_Error_Model;			
			error propagations
				access: in propagation {PowerSupplyFailure};
				access: out propagation {PowerSupplyFailure};
			flows
				cpu_es: error path access {PowerSupplyFailure} -> access {PowerSupplyFailure};
			end propagations;
		**};
end Power_Supply;

--Universal Asynchronous Receiver-Transmitter (UART)
--classic 1553 serial channel to TTY
bus Serial_Bus
end Serial_Bus;

--Universal Serial Bus (USB)
bus USB
end USB;

--High-Definition Multimedia Interface (HDMI)
bus HDMI
end HDMI;

--Serial Peripheral Interface (SPI)
bus SPI
end SPI;

--Low Pin Count (LPC)
bus LPC
end LPC;

--Low Voltage Differential Signaling (LVDS)
bus LVDS extends Video_Bus
end LVDS;
	
--classic monitor bus
bus VGA extends Video_Bus	
end VGA;
	
end Buses;