--FG.aadl

--feature groups for Medical_Device_Platform

package FG
public


with
  Base_Types,  --AADL data model 
  Safety,   --safety subsystem
  Security,  --security subsystem
  Buses,  --wires
  Physical_Types  --physical things like fluid, voltage, sound, etc.
  ;

flag renames data Base_Types::Boolean;
 
feature group Sensing
	--physical measurements of Physical_Types such as voltage, temperature, luminosity, etc. 
	--also includes press of buttons, or touch of screen of user interface, or light from bar code
	features
		ui_touch : in data port Physical_Types::Touch;
end Sensing;

feature group Actuation
	--physical actions like infuse drug, emit heat, cut, stitch, laser (cutting or illumination), 
	--also include sound and image of user interface, 
	features
		ui_image : out data port Physical_Types::Image;
		ui_sound : out data port Physical_Types::Sound;
end Actuation;
  
--feature groups to define interfaces
--these will be refined to contain the actual signals of the device
feature group Alarm_Indication
  --alarm and warning indications from the safety subsystem that need to be communicated to the clinician
	features
	  alarm : out event data port;
	  warning : out event data port;
	  info : out event data port;
end Alarm_Indication;

feature group Maintenance
  --communicate with maintenance processor of non-functional information
  --like fault log, event log, drug library, security provisioning
  features
    get_fault_log : out event port; --ask Fault_Logger for fault records 
    the_fault_log : in data port Safety::Fault_Records;  --logged faults
    get_event_log : out event port;  --ask Event_Logger for event records
    the_event_log : in data port;  --logged events
    get_security_log : out event port; --ask Security_Logger for security records 
    the_security_log : in data port;  --logged security events
    load_drug_library : out event data port;
    security_provisioning : feature group;
end Maintenance;

feature group Operation_GUI
  --communitcation between operations and graphical user interface
end Operation_GUI;

feature group Safety_GUI
  --communication between safety and graphical user interface 
end Safety_GUI;

feature group Operation_Comm
  --communitcation between operations and graphical user interface
end Operation_Comm;

feature group Safety_Comm
  --communication between safety and graphical user interface 
end Safety_Comm;

feature group Network_Protocol
  --exchange information with network controller
end Network_Protocol;
	
feature group Safety_Peripherals
	--information and control between the safety subsystem and the peripherals that perform medical function
end Safety_Peripherals;

feature group Operation_Peripherals
	--information and control between the operation subsystem and the peripherals that perform medical function
end Operation_Peripherals;

feature group Operation_Safety
  --signals between the operation and safety subsystems
end Operation_Safety;

feature group Power_Safety
  --signals from the power subsystem to the safety subsystem; defective battery, voltage out of range, etc
end Power_Safety;

feature group Power_Operation
  --signals from the power subsystem to the operation subsystem; using battery power, low battery warning, etc.
end Power_Operation;

feature group Crypto_Control
	--control signals for the crytoprocessor
end Crypto_Control;

feature group Driver_Control
  --interface between CPAL mediator and individual device drivers
end Driver_Control;

  --interfaces to firewall service
feature group Syslog_Interface extends UDP_Socket
end Syslog_Interface;

feature group Time_Synch_Interface extends UDP_Socket
end Time_Synch_Interface;

feature group DNS_Proxy_Interface extends UDP_Socket
end DNS_Proxy_Interface;

feature group Network_Proxy_Interface
end Network_Proxy_Interface;

feature group TCP_Socket
end TCP_Socket;

feature group UDP_Socket
end UDP_Socket;

feature group NIC_Interface
end NIC_Interface;

feature group Security_Interface
	features
	--incoming data
		key_label : in data port Base_Types::String;  --just the name of the key to be used
		algorithm : in data port Security::Algorithms;
		tag : in data port  Base_Types::String;  --authentication tag
    source_text : in data port Base_Types::String;
    nonce_in :  in data port Base_Types::String;
  --commands
		sign_message : in event port;  --asymmetric authentication tag generation
		mac_message : in event port;  --symmetric authentication tag generation
		verify_signature : in event port;  --check asymmetric authentication
		verify_mac : in event port;  --check symmetric authentication 
		generate_key : in event port;
		generate_random_number : in event port;
		encrypt : in event port;
		decrypt : in event port;
  --results
    result_text : out event data port Base_Types::String;
    nonce_out :  out data port Base_Types::String;
    okay : out event data port flag;  --verified, yes
		operation_failed : out event port;  --something bad happened during execution, result is invalid!!!!!
		bad_format : out event port;  --somehow the stuff you sent was not in the form demanded by the algorithm
end Security_Interface;

feature group External_Connections
	features
		  serial_bus : provides bus access Buses::Serial_Bus;  --1553 serial bus to text terminal through UART
		  usb_bus : provides bus access Buses::USB;  --to USB connector
		  lvds_bus : provides bus access Buses::LVDS;  --Low Voltage Differential Signaling (LVDS)
		  hdmi_bus  : provides bus access Buses::HDMI;  --external monitor
		  vga_bus : provides bus access Buses::VGA;  --classic monitor interface 
end External_Connections;

feature group Control_Panel_Interface
end Control_Panel_Interface;


end FG;