--Communications.aadl
--performs all non-GUI communication in functional architecture
package Comm
public
	with 
    Buses, 
    FG; --feature groups 

	system Communications
		features
    	to_comm : feature group inverse of FG::Operation_Comm;  --communicate with communications subsystem
			alarm: feature group inverse of FG::Alarm_Indication;
			maintenance: feature group FG::Maintenance; --connections to internals
			to_network: requires bus access Buses::CAT5;
			jack: requires bus access Buses::Maintenance_Bus; --physical jack to connect to maintenance controller
	end Communications;

	system implementation Communications.i
		subcomponents
			network_controller: process Network_Controller.i;
			maintenance_processor: device Maintenance_Processor.i;
			nic: device NIC.i;
		connections
			n: bus access to_network -> nic.to_network;
			j: bus access jack -> maintenance_processor.jack;
			ni: feature group network_controller.to_nic <-> nic.nic_interface;
			op: feature group to_comm <-> network_controller.from_operation;
			al: feature group alarm <-> network_controller.alarm;
			m: feature group maintenance <-> maintenance_processor.maintenance;
	end Communications.i;

--network controller is driver for NIC
	process Network_Controller
		--control external communication on network
		features
			from_operation: feature group inverse of FG::Operation_Comm; --control from operation subsystem
--  	external : requires bus access  Buses::CAT5;   --physical connection to external network
			alarm: feature group inverse of FG::Alarm_Indication; --alarm and waring signals  
			to_nic : feature group inverse of FG::NIC_Interface;	
	end Network_Controller;

	process implementation Network_Controller.i
		subcomponents
			firewall: thread group Firewall.i;
			nit: thread Network_Interface_Thread.i;
		connections
			fo: feature group nit.from_operation <-> from_operation;
			al: feature group nit.alarm <-> alarm;
			tn: feature group nit.to_nic <-> to_nic;
			dns: feature group nit.dns <-> firewall.dns;
			ts: feature group nit.timesync <-> firewall.timesync;
			net: feature group nit.net <-> firewall.net;
			sl: feature group nit.syslog <-> firewall.syslog;
	end Network_Controller.i;

--maintenance processor is hardware for talking to the external maintenance controller used by technicians
	device Maintenance_Processor
		--provides non-functional communication for logs, security provisioning etc.
		features
			maintenance: feature group FG::Maintenance; --connections to internals
			jack: requires bus access Buses::Maintenance_Bus; --physical jack to connect to maintenance controller
	end Maintenance_Processor;

	device implementation Maintenance_Processor.i
	end Maintenance_Processor.i;

  device NIC
    features
			to_network: requires bus access Buses::CAT5;
			nic_interface : feature group FG::NIC_Interface;	
  end NIC;

  device implementation NIC.i
  end NIC.i;
  
  thread Network_Interface_Thread
		features
			alarm: feature group inverse of FG::Alarm_Indication;
			from_operation: feature group inverse of FG::Operation_Comm;
			to_nic : feature group inverse of FG::NIC_Interface;	
			--firewall	
			syslog: feature group inverse of FG::Syslog_Interface;
			timesync: feature group inverse of FG::Time_Synch_Interface;
			dns: feature group inverse of FG::DNS_Proxy_Interface;
			net: feature group inverse of FG::Network_Proxy_Interface;
		properties
			Thread_Properties::Dispatch_Protocol => Aperiodic;
	end Network_Interface_Thread;

	thread implementation Network_Interface_Thread.i
  end Network_Interface_Thread.i;

  
--provide firewall for network interface
--includes networking API including TCP/IP stack
	thread group Firewall
		features
			syslog: feature group FG::Syslog_Interface;
			timesync: feature group FG::Time_Synch_Interface;
			dns: feature group FG::DNS_Proxy_Interface;
			net: feature group FG::Network_Proxy_Interface;
	end Firewall;

	thread group  implementation Firewall.i
		subcomponents
			log: thread Syslog_Service;
			ts: thread Time_Synch_Service;
			d: thread DNS_Proxy_Service;
			i: thread Network_Proxy_Service;
			s: thread group TCP_IP_Stack;
			e: thread Ethernet_Device_Driver;
		connections
			sl: feature group syslog <-> log.syslog;
			sy: feature group timesync <-> ts.synch;
			dn: feature group dns <-> d.dns;
			ic: feature group net <-> i.net;
			st: feature group log.tcp <-> s.syslog_tcp;
			tu: feature group ts.udp <-> s.synch_udp;
			du: feature group d.udp <-> s.dns_udp;
			it: feature group i.tcp <-> s.tcp;
			se: feature group s.nic <-> e.nic;
	end Firewall.i;

	thread Syslog_Service
		features
			syslog: feature group FG::Syslog_Interface;
			tcp: feature group FG::TCP_Socket;
	end Syslog_Service;

	thread Time_Synch_Service
		features
			synch: feature group FG::Time_Synch_Interface;
			udp: feature group FG::UDP_Socket;
	end Time_Synch_Service;

	thread DNS_Proxy_Service
		features
			dns: feature group FG::DNS_Proxy_Interface;
			udp: feature group FG::UDP_Socket;
	end DNS_Proxy_Service;

	thread Network_Proxy_Service
		features
			net: feature group FG::Network_Proxy_Interface;
			tcp: feature group FG::TCP_Socket;
	end Network_Proxy_Service;

	thread group TCP_IP_Stack
		features
			syslog_tcp: feature group inverse of FG::TCP_Socket;
			synch_udp: feature group inverse of FG::UDP_Socket;
			dns_udp: feature group inverse of FG::UDP_Socket;
			tcp: feature group inverse of FG::TCP_Socket;
			nic: feature group FG::NIC_Interface;
	end TCP_IP_Stack;

	thread Ethernet_Device_Driver
		features
			nic: feature group inverse of FG::NIC_Interface;
	end Ethernet_Device_Driver;
----domain name server masking
--process DNSmasq_Process	
--  features
--    dns_server: in out data port;
--end DNSmasq_Process;
--	
--process implementation DNSmasq_Process.i	
--end DNSmasq_Process.i;
--
----name resolver
--process Resolver_Process	
--  features
--    dns_client: in out data port;
--end Resolver_Process;
--	
--process implementation Resolver_Process.i	
--end Resolver_Process.i;
end Comm;