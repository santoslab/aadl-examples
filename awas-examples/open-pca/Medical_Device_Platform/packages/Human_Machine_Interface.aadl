package Human_Machine_Interface
public
with 
  Physical_Types, Buses, 
  Abstract_Devices;

--there are many possible HMI i/o;  Platform defines many common ones
--add others if needed--like a second USB connector
--and ignore (unconnected and unused) any others	
	system HMI
		features
			ui_image: out data port Physical_Types::Image; --image seen by clinician
		  ui_sound : out data port Physical_Types::Sound;  --sound heard
		  ui_touch: in data port Physical_Types::Touch;  --finger(s) on screen
		  system_bus : requires bus access Buses::System_Bus;
		  power_supply : requires bus access Buses::Power_Supply;	
		  dc_clock : requires bus access Buses::Clock;  --display clock
		  sc_clock : requires bus access Buses::Clock;   --sound clock
		  mtm_bus : requires bus access Buses::MTM_Bus;
  	  hdmi_bus  : provides bus access Buses::HDMI;  --external monitor
		  vga_bus : provides bus access Buses::VGA;  --classic monitor interface 
	end HMI;

system implementation HMI.i
	subcomponents
	  ts : device Touch_Screen.i;
	  dc : device Display_Controller.i;
	  sp : device Speaker.i;
	  sc : device Sound_Controller.i;
	  --make scanner external???
--	  bs : device Barcode_Scanner.i;
	  --find out how CubieTruck generates external bus connections, like USB, HDMI, etc.
end HMI.i;

--touch screen display
  device Touch_Screen extends Abstract_Devices::Abstract_Touch_Screen
--		features
--			video_bus: requires bus access Buses::Video_Bus;
--			ui_image: out data port Physical_Types::Image; --image seen by clinician
--			image: in data port; --image type from controller
--			power_supply: requires bus access Buses::Power_Supply;
--			mtm_bus: requires bus access Buses::MTM_Bus;
--			ui_touch: in data port Physical_Types::Touch;
--			finger_location: out event data port;
  end Touch_Screen;

  device implementation Touch_Screen.i
  end Touch_Screen.i;

--controller for display
--on cubieTruck:  ARM Mali-400 graphics processor 
	device Display_Controller extends Abstract_Devices::Abstract_Display_Controller
--	features
--	  system_bus : requires bus access Buses::System_Bus;
--refine video_bus for either HDMI or VGA
--    video_bus : provides bus access Buses::Video_Bus;
--	  dc_clock : requires bus access Buses::Clock;
--		power_supply : requires bus access Buses::Power_Supply;	  	
--		mtm_bus : requires bus access Buses::MTM_Bus;
	end Display_Controller;

  device implementation Display_Controller.i
  end Display_Controller.i;

--sound maker
	device Speaker extends Abstract_Devices::Abstract_Speaker
--	features
--	  	audio_bus : requires bus access Buses::Audio_Bus;
--	  	sound : out data port Physical_Types::Sound;
	end Speaker;

  device implementation Speaker.i
  end Speaker.i;

--sound controller
	device Sound_Controller extends Abstract_Devices::Abstract_Sound_Controller
--	features
--	  system_bus : requires bus access Buses::System_Bus;
--	  	audio_bus : provides bus access Buses::Audio_Bus;
--		power_supply : requires bus access Buses::Power_Supply;
--		sc_clock : requires bus access Buses::Clock;
--		mtm_bus : requires bus access Buses::MTM_Bus;
	end Sound_Controller;

  device implementation Sound_Controller.i
  end Sound_Controller.i;

--this represents an optical or RFID scanner to read
--drug labels, patient wristbands, and clinician badges
device Barcode_Scanner extends Abstract_Devices::Abstract_Scanner
--  features
--		barcode_signal : in data port;  --light from label(s) bar code (or QR or whatever)
--		barcode_illumination : out data port;  --laser light on barcode
--    do_scan: in event port;                    --tell scanner to scan
--    scan_done: out event port;                   --scan completed
--    scan_data: out event data port;  --data from scanner
end Barcode_Scanner;


  device implementation Barcode_Scanner.i
  end Barcode_Scanner.i;
	
	
end Human_Machine_Interface;