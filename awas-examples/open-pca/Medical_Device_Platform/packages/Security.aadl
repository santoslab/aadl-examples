--Security.aadl

--this contains security services like encrypt, decrypt, and authenticate

--they will live in the Platform service layer, and require access to the cryptoprocessor

--there are a fixed set of keys defined by the data component "Keys" which is an enumeration type 
--substituting for the number of the key inside the cryptoprocessor

--no creation of keys on the fly, the medical device will extend the Keys data type with additional keys
--all keys are loaded or generated during provisioning

--there is no "sign" operation, use Encrypt_Decrypt instead

package Security
public
	with
	  Data_Model,Base_Types,  --AADL data modeling annex
	  BLESS, 
	  FG   --platform feature groups
	  ;

flag renames data Base_Types::Boolean;

--key record
data Key
--	  secret_or_symmetric_key : in data port Base_Types::String;
--	  public_key : in data port Base_Types::String;
--	  alogorithm_parameters : in data port Base_Types::String;
--		key_label : in data port Base_Types::String;  
end Key;
	
data Algorithms
	properties
		Data_Model::Data_Representation => Enum;
		Data_Model::Enumerators => (
--labels of algorithms supported by Platform
     "blowfish", --symmetric cipher
     "ecc",  --elliptic curve asymmetric cipher
     "sha3",  --hash function
     "dsa",  --asymmetric authentication
     "hmac"  --symmetric authentication
		  );
		BLESS::Typed => "enumeration (Clinician,Pharmacy,Private,Hospital)";  --BLESS type
end Algorithms;



system Security_System
  features
    crypto_control : feature group FG::Crypto_Control;
end Security_System;

system implementation Security_System.i
  subcomponents
    security_process : process Security_Process.i;
  connections
    cont : feature group crypto_control <-> security_process.crypto_control;
end Security_System.i;

--if a cryptoprocesor is used to hold/generate keys or help
--perform security algorithms, extend this system
--to add the hardware; you may also want to bind the threads to 
--the cryptoporcessor, here, too
system implementation Security_System.cp extends Security_System.i
  subcomponents
	  security_processor : processor Crypto_Processor;
--	    {Implemented_As => (classifier(Hardware::PCB.i.sp));};
end Security_System.cp;

processor Crypto_Processor
end Crypto_Processor;


process Security_Process
  features
    crypto_control : feature group FG::Crypto_Control;
end Security_Process;


process implementation Security_Process.i
	subcomponents
	  algorithms : thread group Security_Threads.i;
	  controller : thread Security_Controller.i;
	connections
	  cont : feature group crypto_control <-> controller.crypto_control;
	  algo : feature group controller.security_interface <-> algorithms.security_interface;
end Security_Process.i;

thread Security_Controller
	features
    crypto_control : feature group FG::Crypto_Control;
	  security_interface : feature group inverse of FG::Security_Interface;  
end Security_Controller;

thread implementation Security_Controller.i
end Security_Controller.i;

thread group Security_Threads
	features
	  security_interface : feature group FG::Security_Interface;
end Security_Threads;

thread Sign_Message
  features
		sign_message : in event port;  --asymmetric authentication tag generation
		algorithm : in data port Algorithms;
    source_text : in data port Base_Types::String;
    nonce_in :  in data port Base_Types::String;
		key_label : in data port Base_Types::String;  --just the name of the key to be used
    result_text : out event data port Base_Types::String;
		operation_failed : out event port;  --something bad happened during execution, result is invalid!!!!!
		bad_format : out event port;  --somehow the stuff you sent was not in the form demanded by the algorithm
	  fetch_key : out event data port Base_Types::String;
	  retreived_key : in event data port Key;
end Sign_Message;

thread MAC_Message
  features
		mac_message : in event port;  --symmetric authentication tag generation
		algorithm : in data port Algorithms;
    source_text : in data port Base_Types::String;
    nonce_in :  in data port Base_Types::String;
		key_label : in data port Base_Types::String;  --just the name of the key to be used
    result_text : out event data port Base_Types::String;
		operation_failed : out event port;  --something bad happened during execution, result is invalid!!!!!
		bad_format : out event port;  --somehow the stuff you sent was not in the form demanded by the algorithm
	  fetch_key : out event data port Base_Types::String;
	  retreived_key : in event data port Key;
end MAC_Message;

thread Verify_Signature
  features
		verify_signature : in event port;  --check asymmetric authentication
		algorithm : in data port Algorithms;
    source_text : in data port Base_Types::String;
		tag : in data port  Base_Types::String;  --authentication tag
    nonce_in :  in data port Base_Types::String;
		key_label : in data port Base_Types::String;  --just the name of the key to be used
    okay : out event data port flag;  --verified, yes
		operation_failed : out event port;  --something bad happened during execution, result is invalid!!!!!
		bad_format : out event port;  --somehow the stuff you sent was not in the form demanded by the algorithm
	  fetch_key : out event data port Base_Types::String;
	  retreived_key : in event data port Key;
end Verify_Signature;

thread Verify_MAC
  features
		verify_mac : in event port;  --check symmetric authentication 
		algorithm : in data port Algorithms;
    source_text : in data port Base_Types::String;
		tag : in data port  Base_Types::String;  --authentication tag
    nonce_in :  in data port Base_Types::String;
		key_label : in data port Base_Types::String;  --just the name of the key to be used
    okay : out event data port flag;  --verified, yes
		operation_failed : out event port;  --something bad happened during execution, result is invalid!!!!!
		bad_format : out event port;  --somehow the stuff you sent was not in the form demanded by the algorithm
	  fetch_key : out event data port Base_Types::String;
	  retreived_key : in event data port Key;
end Verify_MAC;

thread Encrypt
	features
		encrypt : in event port;
		algorithm : in data port Algorithms;
    source_text : in data port Base_Types::String;
    nonce_in :  in data port Base_Types::String;
		key_label : in data port Base_Types::String;  --just the name of the key to be used
    result_text : out event data port Base_Types::String;
		operation_failed : out event port;  --something bad happened during execution, result is invalid!!!!!
		bad_format : out event port;  --somehow the stuff you sent was not in the form demanded by the algorithm
	  fetch_key : out event data port Base_Types::String;
	  retreived_key : in event data port Key;
end Encrypt;

thread implementation Encrypt.i
  --check Key.algorithm_parameters (of Key retrieved from Key_Store)
end Encrypt.i;

thread Decrypt
	features
		decrypt : in event port;
		algorithm : in data port Algorithms;
    source_text : in data port Base_Types::String;
		key_label : in data port Base_Types::String;  --just the name of the key to be used
    result_text : out event data port Base_Types::String;
		operation_failed : out event port;  --something bad happened during execution, result is invalid!!!!!
		bad_format : out event port;  --somehow the stuff you sent was not in the form demanded by the algorithm
	  fetch_key : out event data port Base_Types::String;
	  retreived_key : in event data port Key;
end Decrypt;

thread implementation Decrypt.i
end Decrypt.i;

--currently no sigcryption supported directly
--can be implemented internally by using a known-safe composition of authentication and encryption (e.g. encrypt-then-MAC)
--will likely require double-length keys, or double-labels
--thread Authenticate_Encrypt
--	features
--		algorithm : in data port Algorithms;
--    source_text : in data port Base_Types::String;
--    nonce_in :  in data port Base_Types::String;
--		key_label : in data port Base_Types::String;  --just the name of the key to be used
--    result_text : out event data port Base_Types::String;
--		operation_failed : out event port;  --something bad happened during execution, result is invalid!!!!!
--		bad_format : out event port;  --somehow the stuff you sent was not in the form demanded by the algorithm
--	  fetch_key : out event data port Base_Types::String;
--	  retreived_key : in event data port Key;
--end Authenticate_Encrypt;

--currently no sigcryption supported directly
--can be implemented internally by using a known-safe composition of authentication and encryption (e.g. encrypt-then-MAC)
--will likely require double-length keys, or double-labels
--thread Verify_Decrypt
--	features
--		algorithm : in data port Algorithms;
--    source_text : in data port Base_Types::String;
--		tag : in data port  Base_Types::String;  --authentication tag
--		key_label : in data port Base_Types::String;  --just the name of the key to be used
--    result_text : out event data port Base_Types::String;
--		operation_failed : out event port;  --something bad happened during execution, result is invalid!!!!!
--		bad_format : out event port;  --somehow the stuff you sent was not in the form demanded by the algorithm
--	  fetch_key : out event data port Base_Types::String;
--	  retreived_key : in event data port Key;
--end Verify_Decrypt;

thread Generate_Key
	features
		generate_key : in event port;
		algorithm : in data port Algorithms;
		requested_key_label: in data port Base_Types::String;  --optional
		key_label : out data port Base_Types::String;  --just the name of the key to be used
		operation_failed : out event port;  --something bad happened during execution, result is invalid!!!!!
	  store_key : out event data port Key;  --Key contains its own label
end Generate_Key;

thread Generate_Random_Number
	features
		generate_random_number : in event port;
    result_text : out event data port Base_Types::String;
		operation_failed : out event port;  --something bad happened during execution, result is invalid!!!!!
end Generate_Random_Number;

thread Key_Store
	features
	  fetch_key : in event data port Base_Types::String;
	  retreived_key : out event data port Key;
	  store_key : in event data port Key;  --Key contains its own label
end Key_Store;


thread group implementation Security_Threads.i
	subcomponents
		signer : thread Sign_Message;
		mac : thread MAC_Message;
		verifier : thread Verify_Signature;
		mac_verifier : thread Verify_MAC;
		encryptor : thread Encrypt.i;
		decryptor : thread Decrypt.i;
--		auth_en : thread Authenticate_Encrypt;
--		ver_de : thread Verify_Decrypt;
		key_gen : thread Generate_Key;
		random: thread Generate_Random_Number;
		key_store : thread Key_Store;
	connections
		--sign
		sign : port security_interface.sign_message -> signer.sign_message;
		s_alg : port security_interface.algorithm -> signer.algorithm;
		s_source : port security_interface.source_text -> signer.source_text;
		s_nonce : port security_interface.nonce_in -> signer.nonce_in;
		s_key : port security_interface.key_label -> signer.key_label;
		s_result : port signer.result_text -> security_interface.result_text;
		s_fail : port signer.operation_failed -> security_interface.operation_failed;
		s_bad : port signer.bad_format -> security_interface.bad_format;
		s_fetch : port signer.fetch_key -> key_store.fetch_key;
		s_ret : port key_store.retreived_key -> signer.retreived_key;
    --MAC sign
 		mac_sign : port security_interface.mac_message -> mac.mac_message;
		m_alg : port security_interface.algorithm -> mac.algorithm;
		m_source : port security_interface.source_text -> mac.source_text;
		m_nonce : port security_interface.nonce_in -> mac.nonce_in;
		m_key : port security_interface.key_label -> mac.key_label;
		m_result : port mac.result_text -> security_interface.result_text;
		m_fail : port mac.operation_failed -> security_interface.operation_failed;
		m_bad : port mac.bad_format -> security_interface.bad_format;
		m_fetch : port mac.fetch_key -> key_store.fetch_key;
		m_ret : port key_store.retreived_key -> mac.retreived_key;
		--verify
 		verify : port security_interface.verify_signature -> verifier.verify_signature;
		v_alg : port security_interface.algorithm -> verifier.algorithm;
		v_source : port security_interface.source_text -> verifier.source_text;
		v_nonce : port security_interface.nonce_in -> verifier.nonce_in;
		v_key : port security_interface.key_label -> verifier.key_label;
    v_tag : port security_interface.tag -> verifier.tag ; 
		v_okay : port verifier.okay -> security_interface.okay;
		v_fail : port verifier.operation_failed -> security_interface.operation_failed;
		v_bad : port verifier.bad_format -> security_interface.bad_format;
		v_fetch : port verifier.fetch_key -> key_store.fetch_key;
		v_ret : port key_store.retreived_key -> verifier.retreived_key;
		--verify MAC
 		mverify : port security_interface.verify_mac -> mac_verifier.verify_mac;
		vm_alg : port security_interface.algorithm -> mac_verifier.algorithm;
		vm_source : port security_interface.source_text -> mac_verifier.source_text;
		vm_nonce : port security_interface.nonce_in -> mac_verifier.nonce_in;
		vm_key : port security_interface.key_label -> mac_verifier.key_label;
    vm_tag : port security_interface.tag -> mac_verifier.tag ; 
		vm_okay : port mac_verifier.okay -> security_interface.okay;
		vm_fail : port mac_verifier.operation_failed -> security_interface.operation_failed;
		vm_bad : port mac_verifier.bad_format -> security_interface.bad_format;
		vm_fetch : port mac_verifier.fetch_key -> key_store.fetch_key;
		vm_ret : port key_store.retreived_key -> mac_verifier.retreived_key;
    --encrypt
    en : port security_interface.encrypt -> encryptor.encrypt;
		en_alg : port security_interface.algorithm -> encryptor.algorithm;
		en_source : port security_interface.source_text -> encryptor.source_text;
		en_nonce : port security_interface.nonce_in -> encryptor.nonce_in;
		en_key : port security_interface.key_label -> encryptor.key_label;
		en_result : port encryptor.result_text -> security_interface.result_text;
		en_fail : port encryptor.operation_failed -> security_interface.operation_failed;
		en_bad : port encryptor.bad_format -> security_interface.bad_format;
		en_fetch : port encryptor.fetch_key -> key_store.fetch_key;
		en_ret : port key_store.retreived_key -> encryptor.retreived_key;
		--decrypt
    de : port security_interface.decrypt -> decryptor.decrypt;
		de_alg : port security_interface.algorithm -> decryptor.algorithm;
		de_source : port security_interface.source_text -> decryptor.source_text;
		de_key : port security_interface.key_label -> decryptor.key_label;
		de_result : port decryptor.result_text -> security_interface.result_text;
		de_fail : port decryptor.operation_failed -> security_interface.operation_failed;
		de_bad : port decryptor.bad_format -> security_interface.bad_format;
		de_fetch : port decryptor.fetch_key -> key_store.fetch_key;
		de_ret : port key_store.retreived_key -> decryptor.retreived_key;
		--key generation
		gen_key : port security_interface.generate_key -> key_gen.generate_key;
		gk_alg : port security_interface.algorithm -> key_gen.algorithm;
		gk_rkey : port security_interface.key_label -> key_gen.requested_key_label;
	  gk_key : port key_gen.key_label ->	security_interface.result_text;
		gk_fail : port key_gen.operation_failed -> security_interface.operation_failed;
    gk_store : port key_gen.store_key -> key_store.store_key;
	  --random number
	  rand : port security_interface.generate_random_number -> random.generate_random_number;
	  rand_result : port random.result_text -> security_interface.result_text;
		rand_fail : port random.operation_failed -> security_interface.operation_failed;
end Security_Threads.i ;

end Security;