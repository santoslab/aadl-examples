/**************************************************************************
  Copyright (c) 2013-2016 Rockwell Collins and the University of
  Minnesota. Developed with the sponsorship of the Defense Advanced
  Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this data, including any software or models
  in source or binary form, as well as any drawings,
  specifications, and documentation (collectively "the Data"), to
  deal in the Data without restriction, including without
  limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Data, and to
  permit persons to whom the Data is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS, SPONSORS,
  DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE
  DATA.
 **************************************************************************/

/**************************************************************************

  ***AUTOGENERATED CODE: DO NOT MODIFY***

This file contains the main CAmkES assembly for the
AADL system instance rooted at PROC_HW.

 **************************************************************************/

import <std_connector.camkes>;

#include <autoconf.h>
#define TB_MONITOR_READ_ACCESS 111
#define TB_MONITOR_WRITE_ACCESS 222


import "components/RadioDriver/RadioDriver.camkes";
import "components/tb_Monitors/tb_RadioDriver_recv_map_in_Monitor/tb_RadioDriver_recv_map_in_Monitor.camkes";
import "components/tb_Monitors/tb_RadioDriver_send_status_in_Monitor/tb_RadioDriver_send_status_in_Monitor.camkes";

import "components/Filter/Filter.camkes";
import "components/tb_Monitors/tb_Filter_filter_in_Monitor/tb_Filter_filter_in_Monitor.camkes";

import "components/FlightPlanner/FlightPlanner.camkes";
import "components/tb_Monitors/tb_FlightPlanner_recv_map_Monitor/tb_FlightPlanner_recv_map_Monitor.camkes";
import "components/tb_Monitors/tb_FlightPlanner_position_status_Monitor/tb_FlightPlanner_position_status_Monitor.camkes";

import "components/WaypointManager/WaypointManager.camkes";
import "components/tb_Monitors/tb_WaypointManager_flight_plan_Monitor/tb_WaypointManager_flight_plan_Monitor.camkes";
import "components/tb_Monitors/tb_WaypointManager_position_status_Monitor/tb_WaypointManager_position_status_Monitor.camkes";

import "components/UARTDriver/UARTDriver.camkes";
import "components/tb_Monitors/tb_UARTDriver_position_status_in_Monitor/tb_UARTDriver_position_status_in_Monitor.camkes";
import "components/tb_Monitors/tb_UARTDriver_waypoint_in_Monitor/tb_UARTDriver_waypoint_in_Monitor.camkes";




// 12/12 MWW modified for CaMKes-next
connector seL4RPCCallDataport {
    from Procedure template "seL4RPCCallDataport-from.template.c";
    to Procedure template "seL4RPCCallDataport-to.template.c";
}

assembly {
    composition {
        // Component instances for all AADL-defined threads

        component RadioDriver RadioDriver_inst;
        component Filter Filter_inst;
        component FlightPlanner FlightPlanner_inst;
        component WaypointManager WaypointManager_inst;
        component UARTDriver UARTDriver_inst;



        // Port declarations for active threads

        component tb_RadioDriver_recv_map_in_Monitor tb_radiodriver_recv_map_in_monitor;

        component tb_RadioDriver_send_status_in_Monitor tb_radiodriver_send_status_in_monitor;

        component tb_Filter_filter_in_Monitor tb_filter_filter_in_monitor;


        component tb_FlightPlanner_recv_map_Monitor tb_flightplanner_recv_map_monitor;

        component tb_FlightPlanner_position_status_Monitor tb_flightplanner_position_status_monitor;

        component tb_WaypointManager_flight_plan_Monitor tb_waypointmanager_flight_plan_monitor;

        component tb_WaypointManager_position_status_Monitor tb_waypointmanager_position_status_monitor;

        component tb_UARTDriver_position_status_in_Monitor tb_uartdriver_position_status_in_monitor;

        component tb_UARTDriver_waypoint_in_Monitor tb_uartdriver_waypoint_in_monitor;




        // Port connections for active threads

        connection seL4RPCCall conn1 (from RadioDriver_inst.tb_recv_map_in, to tb_radiodriver_recv_map_in_monitor.mon);
        connection seL4Notification conn2 (from tb_radiodriver_recv_map_in_monitor.monsig, to RadioDriver_inst.tb_recv_map_in_notification);

        connection seL4RPCCall conn3 (from RadioDriver_inst.tb_send_status_in, to tb_radiodriver_send_status_in_monitor.mon);
        connection seL4Notification conn4 (from tb_radiodriver_send_status_in_monitor.monsig, to RadioDriver_inst.tb_send_status_in_notification);

        connection seL4RPCCall conn5 (from RadioDriver_inst.tb_recv_map_out0, to tb_filter_filter_in_monitor.mon);

        connection seL4RPCCall conn6 (from Filter_inst.tb_filter_in, to tb_filter_filter_in_monitor.mon);
        connection seL4Notification conn7 (from tb_filter_filter_in_monitor.monsig, to Filter_inst.tb_filter_in_notification);

        connection seL4RPCCall conn8 (from Filter_inst.tb_filter_out0, to tb_flightplanner_recv_map_monitor.mon);

        connection seL4RPCCall conn9 (from FlightPlanner_inst.tb_flight_plan0, to tb_waypointmanager_flight_plan_monitor.mon);

        connection seL4RPCCall conn10 (from FlightPlanner_inst.tb_recv_map, to tb_flightplanner_recv_map_monitor.mon);
        connection seL4Notification conn11 (from tb_flightplanner_recv_map_monitor.monsig, to FlightPlanner_inst.tb_recv_map_notification);

        connection seL4RPCCall conn12 (from FlightPlanner_inst.tb_position_status, to tb_flightplanner_position_status_monitor.mon);
        connection seL4Notification conn13 (from tb_flightplanner_position_status_monitor.monsig, to FlightPlanner_inst.tb_position_status_notification);

        connection seL4RPCCall conn14 (from WaypointManager_inst.tb_flight_plan, to tb_waypointmanager_flight_plan_monitor.mon);
        connection seL4Notification conn15 (from tb_waypointmanager_flight_plan_monitor.monsig, to WaypointManager_inst.tb_flight_plan_notification);

        connection seL4RPCCall conn16 (from WaypointManager_inst.tb_waypoint0, to tb_uartdriver_waypoint_in_monitor.mon);

        connection seL4RPCCall conn17 (from WaypointManager_inst.tb_position_status, to tb_waypointmanager_position_status_monitor.mon);
        connection seL4Notification conn18 (from tb_waypointmanager_position_status_monitor.monsig, to WaypointManager_inst.tb_position_status_notification);

        connection seL4RPCCall conn19 (from UARTDriver_inst.tb_position_status_in, to tb_uartdriver_position_status_in_monitor.mon);
        connection seL4Notification conn20 (from tb_uartdriver_position_status_in_monitor.monsig, to UARTDriver_inst.tb_position_status_in_notification);

        connection seL4RPCCall conn21 (from UARTDriver_inst.tb_position_status_out0, to tb_waypointmanager_position_status_monitor.mon);
        connection seL4RPCCall conn22 (from UARTDriver_inst.tb_position_status_out1, to tb_flightplanner_position_status_monitor.mon);
        connection seL4RPCCall conn23 (from UARTDriver_inst.tb_position_status_out2, to tb_radiodriver_send_status_in_monitor.mon);

        connection seL4RPCCall conn24 (from UARTDriver_inst.tb_waypoint_in, to tb_uartdriver_waypoint_in_monitor.mon);
        connection seL4Notification conn25 (from tb_uartdriver_waypoint_in_monitor.monsig, to UARTDriver_inst.tb_waypoint_in_notification);




    }

    configuration {



        // Component port configuration declarations

        tb_radiodriver_recv_map_in_monitor.priority = 230;
        RadioDriver_inst.tb_recv_map_in_attributes = TB_MONITOR_READ_ACCESS;

        tb_radiodriver_send_status_in_monitor.priority = 230;
        RadioDriver_inst.tb_send_status_in_attributes = TB_MONITOR_READ_ACCESS;

        RadioDriver_inst.tb_recv_map_out0_attributes = TB_MONITOR_WRITE_ACCESS;

        tb_filter_filter_in_monitor.priority = 230;
        Filter_inst.tb_filter_in_attributes = TB_MONITOR_READ_ACCESS;

        Filter_inst.tb_filter_out0_attributes = TB_MONITOR_WRITE_ACCESS;

        FlightPlanner_inst.tb_flight_plan0_attributes = TB_MONITOR_WRITE_ACCESS;

        tb_flightplanner_recv_map_monitor.priority = 230;
        FlightPlanner_inst.tb_recv_map_attributes = TB_MONITOR_READ_ACCESS;

        tb_flightplanner_position_status_monitor.priority = 230;
        FlightPlanner_inst.tb_position_status_attributes = TB_MONITOR_READ_ACCESS;

        tb_waypointmanager_flight_plan_monitor.priority = 230;
        WaypointManager_inst.tb_flight_plan_attributes = TB_MONITOR_READ_ACCESS;

        WaypointManager_inst.tb_waypoint0_attributes = TB_MONITOR_WRITE_ACCESS;

        tb_waypointmanager_position_status_monitor.priority = 230;
        WaypointManager_inst.tb_position_status_attributes = TB_MONITOR_READ_ACCESS;

        tb_uartdriver_position_status_in_monitor.priority = 230;
        UARTDriver_inst.tb_position_status_in_attributes = TB_MONITOR_READ_ACCESS;

        UARTDriver_inst.tb_position_status_out0_attributes = TB_MONITOR_WRITE_ACCESS;
        UARTDriver_inst.tb_position_status_out1_attributes = TB_MONITOR_WRITE_ACCESS;
        UARTDriver_inst.tb_position_status_out2_attributes = TB_MONITOR_WRITE_ACCESS;

        tb_uartdriver_waypoint_in_monitor.priority = 230;
        UARTDriver_inst.tb_waypoint_in_attributes = TB_MONITOR_READ_ACCESS;



        RadioDriver_inst.priority = 200;
        Filter_inst.priority = 200;
        FlightPlanner_inst.priority = 200;
        WaypointManager_inst.priority = 200;
        UARTDriver_inst.priority = 200;

        RadioDriver_inst._control_stack_size = 1024;
        Filter_inst._control_stack_size = 1024;
        FlightPlanner_inst._control_stack_size = 1024;
        WaypointManager_inst._control_stack_size = 1024;
        UARTDriver_inst._control_stack_size = 1024;


        //ADDITIONAL_CONFIGS
    }
}


